{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs"],"sourcesContent":["import { CompiledQuery, DefaultQueryCompiler, DEFAULT_MIGRATION_TABLE, DEFAULT_MIGRATION_LOCK_TABLE, sql } from 'kysely';\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      sql`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\nexport { BunSqliteAdapter, BunSqliteDialect, BunSqliteDriver, BunSqliteIntrospector, BunSqliteQueryCompiler };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAEA,MAAM;IACJ,IAAI,4BAA4B;QAC9B,OAAO;IACT;IACA,IAAI,2BAA2B;QAC7B,OAAO;IACT;IACA,IAAI,oBAAoB;QACtB,OAAO;IACT;IACA,MAAM,uBAAuB,CAC7B;IACA,MAAM,uBAAuB,CAC7B;IACA,IAAI,iBAAiB;QACnB,OAAO;IACT;AACF;IAEE,uCACA,gDACA,mCACA;AAJF,MAAM;IAQJ,MAAM,OAAO;+LACN,KAAM,iLAAA,IAAI,EAAC,SAAQ,QAAQ;+LAC3B,aAAc,IAAI,qMAAoB,IAAI,EAAC;QAChD,IAAI,iLAAA,IAAI,EAAC,SAAQ,kBAAkB,EAAE;YACnC,MAAM,iLAAA,IAAI,EAAC,SAAQ,kBAAkB,kLAAC,IAAI,EAAC;QAC7C;IACF;IACA,MAAM,oBAAoB;QACxB,MAAM,iLAAA,IAAI,EAAC,kBAAiB,IAAI;QAChC,wLAAO,IAAI,EAAC;IACd;IACA,MAAM,iBAAiB,UAAU,EAAE;QACjC,MAAM,WAAW,YAAY,CAAC,mMAAa,CAAC,GAAG,CAAC;IAClD;IACA,MAAM,kBAAkB,UAAU,EAAE;QAClC,MAAM,WAAW,YAAY,CAAC,mMAAa,CAAC,GAAG,CAAC;IAClD;IACA,MAAM,oBAAoB,UAAU,EAAE;QACpC,MAAM,WAAW,YAAY,CAAC,mMAAa,CAAC,GAAG,CAAC;IAClD;IACA,MAAM,oBAAoB;QACxB,iLAAA,IAAI,EAAC,kBAAiB,MAAM;IAC9B;IACA,MAAM,UAAU;;qNACd,IAAI,EAAC,iEAAL,yBAAU,KAAK;IACjB;IA5BA,YAAY,MAAM,CAAE;QAJpB,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAmB,IAAI;;QACvB,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;+LAEO,SAAU;YAAE,GAAG,MAAM;QAAC;IAC7B;AA2BF;IAEE;AADF,MAAM;IAKJ,aAAa,aAAa,EAAE;QAC1B,MAAM,EAAE,KAAK,IAAI,EAAE,UAAU,EAAE,GAAG;QAClC,MAAM,OAAO,iLAAA,IAAI,EAAC,MAAI,OAAO,CAAC;QAC9B,OAAO,QAAQ,OAAO,CAAC;YACrB,MAAM,KAAK,GAAG,CAAC;QACjB;IACF;IACA,OAAO,cAAc;QACnB,MAAM,IAAI,MAAM;IAClB;IAZA,YAAY,EAAE,CAAE;QADhB,wLAAA;;mBAAA,KAAA;;+LAEO,MAAM;IACb;AAWF;IAEE,wCACA;AAFF,MAAM;IAGJ,MAAM,OAAO;QACX,uLAAO,IAAI,EAAC,UAAU;YACpB,uLAAM,IAAI,EAAC;QACb;+LACK,UAAW,IAAI,QAAQ,CAAC;mMACtB,UAAW;QAClB;IACF;IACA,SAAS;QACP,MAAM,2LAAU,IAAI,EAAC;+LAChB,UAAW,KAAK;+LAChB,UAAW,KAAK;QACrB,oBAAA,8BAAA;IACF;;QAfA,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;;AAeF;IAEE,oCAoBM;AArBR,MAAM;IAKJ,MAAM,aAAa;QACjB,OAAO,EAAE;IACX;IACA,MAAM,YAAyD;YAA/C,UAAA,iEAAU;YAAE,0BAA0B;QAAM;QAC1D,IAAI,QAAQ,iLAAA,IAAI,EAAC,MAAI,UAAU,CAAC,iBAAiB,KAAK,CAAC,QAAQ,KAAK,SAAS,KAAK,CAAC,QAAQ,YAAY,YAAY,MAAM,CAAC,QAAQ,OAAO;QACzI,IAAI,CAAC,QAAQ,wBAAwB,EAAE;YACrC,QAAQ,MAAM,KAAK,CAAC,QAAQ,MAAM,4LAAuB,EAAE,KAAK,CAAC,QAAQ,MAAM,iMAA4B;QAC7G;QACA,MAAM,SAAS,MAAM,MAAM,OAAO;QAClC,OAAO,QAAQ,GAAG,CAAC,OAAO,GAAG,CAAC;gBAAC,EAAE,IAAI,EAAE;mBAAK,kLAAA,IAAI,EAAC,mBAAA,uBAAL,IAAI,EAAmB;;IACrE;IACA,MAAM,YAAY,OAAO,EAAE;QACzB,OAAO;YACL,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC;QAC/B;IACF;IAlBA,YAAY,EAAE,CAAE;QAmBhB,yLAAM;QApBN,wLAAA;;mBAAA,KAAA;;+LAEO,MAAM;IACb;AAoCF;AAnBE,eAAA,iBAAwB,KAAK;QAGF,mCAAA,kCAAA,4BAAA,uBAAA,iBAAA;IAFzB,MAAM,sLAAK,IAAI,EAAC;IAChB,MAAM,YAAY,MAAM,GAAG,UAAU,CAAC,iBAAiB,KAAK,CAAC,QAAQ,KAAK,OAAO,MAAM,CAAC,OAAO,OAAO,GAAG,OAAO;IAChH,MAAM,oBAAmB,cAAA,SAAS,CAAC,EAAE,cAAZ,mCAAA,kBAAA,YAAc,GAAG,cAAjB,uCAAA,wBAAA,gBAAmB,KAAK,CAAC,wBAAzB,6CAAA,6BAAA,sBAAqC,IAAI,CAAC,CAAC,KAAO,GAAG,WAAW,GAAG,QAAQ,CAAC,+BAA5E,kDAAA,mCAAA,2BAA+F,KAAK,CAAC,oBAArG,wDAAA,oCAAA,gCAA6G,CAAC,EAAE,cAAhH,wDAAA,kCAAkH,OAAO,CAAC,SAAS;IAC5J,MAAM,UAAU,MAAM,GAAG,UAAU,CACjC,IAAA,wKAAG,qBAAqB,OAAS,EAAE,CAAC,eACpC,MAAM,CAAC;QAAC;QAAQ;QAAQ;QAAW;KAAa,EAAE,OAAO;IAC3D,OAAO;QACL,MAAM;QACN,SAAS,QAAQ,GAAG,CAAC,CAAC,MAAQ,CAAC;gBAC7B,MAAM,IAAI,IAAI;gBACd,UAAU,IAAI,IAAI;gBAClB,YAAY,CAAC,IAAI,OAAO;gBACxB,oBAAoB,IAAI,IAAI,KAAK;gBACjC,iBAAiB,IAAI,UAAU,IAAI;YACrC,CAAC;QACD,QAAQ;IACV;AACF;AAEF,MAAM,+BAA+B,qNAAoB;IACvD,iCAAiC;QAC/B,OAAO;IACT;IACA,2BAA2B;QACzB,OAAO;IACT;IACA,4BAA4B;QAC1B,OAAO;IACT;IACA,mBAAmB;QACjB,OAAO;IACT;AACF;IAEE;AADF,MAAM;IAKJ,eAAe;QACb,OAAO,IAAI,iMAAgB,IAAI,EAAC;IAClC;IACA,sBAAsB;QACpB,OAAO,IAAI;IACb;IACA,gBAAgB;QACd,OAAO,IAAI;IACb;IACA,mBAAmB,EAAE,EAAE;QACrB,OAAO,IAAI,sBAAsB;IACnC;IAdA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAEO,UAAU;YAAE,GAAG,MAAM;QAAC;IAC7B;AAaF","ignoreList":[0],"debugId":null}}]
}