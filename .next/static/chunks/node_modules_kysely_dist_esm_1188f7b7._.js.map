{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/object-utils.js"],"sourcesContent":["/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    if (!isObject(obj) || getTag(obj) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(obj) === null) {\n        return true;\n    }\n    let proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst toString = Object.prototype.toString;\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return toString.call(value);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/random-string.js"],"sourcesContent":["/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;AAC9C,MAAM,QAAQ;IACV;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH;AACM,SAAS,aAAa,MAAM;IAC/B,IAAI,QAAQ;IACZ,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,EAAE,EAAG;QAC7B,SAAS;IACb;IACA,OAAO;AACX;AACA,SAAS;IACL,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,KAAK,MAAM,MAAM,EAAE;AAClD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/query-id.js"],"sourcesContent":["/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;;;AACzC;;;;;AACO,SAAS;IACZ,OAAO,IAAI;AACf;IAEI;AADJ,MAAM;IAEF,IAAI,UAAU;QACV,IAAI,iLAAA,IAAI,EAAC,cAAa,WAAW;mMACxB,UAAW,IAAA,oLAAY,EAAC;QACjC;QACA,wLAAO,IAAI,EAAC;IAChB;;QANA,wLAAA;;mBAAA,KAAA;;;AAOJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/log-once.js"],"sourcesContent":["/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;AACzC,MAAM,kBAAkB,IAAI;AAKrB,SAAS,QAAQ,OAAO;IAC3B,IAAI,gBAAgB,GAAG,CAAC,UAAU;QAC9B;IACJ;IACA,gBAAgB,GAAG,CAAC;IACpB,QAAQ,GAAG,CAAC;AAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/require-all-props.js"],"sourcesContent":["/// <reference types=\"./require-all-props.d.ts\" />\n/**\n * Helper function to check listed properties according to given type. Check if all properties has been used when object is initialised.\n *\n * Example use:\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n *\n * // propB has to be mentioned even it is optional. It still should be initialized with undefined.\n * const a: SomeType = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n *\n * // checked type is implicit for variable.\n * const b = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n * ```\n *\n * Wrong use of this helper:\n *\n * 1. Omit checked type - all checked properties will be expect as of type never\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * // const z: SomeType = requireAllProps({ propC: \"no type will work\" }); // Property 'propA' is missing in type '{ propC: string; }' but required in type 'SomeType'.\n * ```\n *\n * 2. Apply to spreaded object - there is no way how to check in compile time if spreaded object contains all properties\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * const y: SomeType = { propA: \"\" }; // valid object according to SomeType declaration\n * // const x = requireAllProps<SomeType>({ ...y }); // Argument of type '{ propA: string; propB?: number; }' is not assignable to parameter of type 'AllProps<SomeType>'.\n * ```\n *\n * @param obj object to check if all properties has been used\n * @returns untouched obj parameter is returned\n */\nexport function requireAllProps(obj) {\n    return obj;\n}\n"],"names":[],"mappings":"AAAA,kDAAkD;AAClD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCC;;;;AACM,SAAS,gBAAgB,GAAG;IAC/B,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/deferred.js"],"sourcesContent":["/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;;;;;;;;IAErC,wCACA,wCACA;AAHG,MAAM;IAUT,IAAI,UAAU;QACV,wLAAO,IAAI,EAAC;IAChB;IARA,aAAc;QAHd,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;QAUA,+KAAA,WAAU,CAAC;YACP,qLAAI,IAAI,EAAC,WAAU;gBACf,iLAAA,IAAI,EAAC,eAAL,IAAI,EAAU;YAClB;QACJ;QACA,+KAAA,UAAS,CAAC;YACN,qLAAI,IAAI,EAAC,UAAS;gBACd,iLAAA,IAAI,EAAC,cAAL,IAAI,EAAS;YACjB;QACJ;+LAjBS,UAAW,IAAI,QAAQ,CAAC,SAAS;mMAC7B,SAAU;mMACV,UAAW;QACpB;IACJ;AAcJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/provide-controlled-connection.js"],"sourcesContent":["/// <reference types=\"./provide-controlled-connection.d.ts\" />\nimport { Deferred } from './deferred.js';\nimport { freeze } from './object-utils.js';\nexport async function provideControlledConnection(connectionProvider) {\n    const connectionDefer = new Deferred();\n    const connectionReleaseDefer = new Deferred();\n    connectionProvider\n        .provideConnection(async (connection) => {\n        connectionDefer.resolve(connection);\n        return await connectionReleaseDefer.promise;\n    })\n        .catch((ex) => connectionDefer.reject(ex));\n    // Create composite of the connection and the release method instead of\n    // modifying the connection or creating a new nesting `DatabaseConnection`.\n    // This way we don't accidentally override any methods of 3rd party\n    // connections and don't return wrapped connections to drivers that\n    // expect a certain specific connection class.\n    return freeze({\n        connection: await connectionDefer.promise,\n        release: connectionReleaseDefer.resolve,\n    });\n}\n"],"names":[],"mappings":"AAAA,8DAA8D;;;;;AAC9D;AACA;;;AACO,eAAe,4BAA4B,kBAAkB;IAChE,MAAM,kBAAkB,IAAI,wKAAQ;IACpC,MAAM,yBAAyB,IAAI,wKAAQ;IAC3C,mBACK,iBAAiB,CAAC,OAAO;QAC1B,gBAAgB,OAAO,CAAC;QACxB,OAAO,MAAM,uBAAuB,OAAO;IAC/C,GACK,KAAK,CAAC,CAAC,KAAO,gBAAgB,MAAM,CAAC;IAC1C,uEAAuE;IACvE,2EAA2E;IAC3E,mEAAmE;IACnE,mEAAmE;IACnE,8CAA8C;IAC9C,OAAO,IAAA,6KAAM,EAAC;QACV,YAAY,MAAM,gBAAgB,OAAO;QACzC,SAAS,uBAAuB,OAAO;IAC3C;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/stack-trace-utils.js"],"sourcesContent":["/// <reference types=\"./stack-trace-utils.d.ts\" />\nimport { isObject, isString } from './object-utils.js';\nexport function extendStackTrace(err, stackError) {\n    if (isStackHolder(err) && stackError.stack) {\n        // Remove the first line that just says `Error`.\n        const stackExtension = stackError.stack.split('\\n').slice(1).join('\\n');\n        err.stack += `\\n${stackExtension}`;\n        return err;\n    }\n    return err;\n}\nfunction isStackHolder(obj) {\n    return isObject(obj) && isString(obj.stack);\n}\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;AAClD;;AACO,SAAS,iBAAiB,GAAG,EAAE,UAAU;IAC5C,IAAI,cAAc,QAAQ,WAAW,KAAK,EAAE;QACxC,gDAAgD;QAChD,MAAM,iBAAiB,WAAW,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC;QAClE,IAAI,KAAK,IAAI,AAAC,KAAmB,OAAf;QAClB,OAAO;IACX;IACA,OAAO;AACX;AACA,SAAS,cAAc,GAAG;IACtB,OAAO,IAAA,+KAAQ,EAAC,QAAQ,IAAA,+KAAQ,EAAC,IAAI,KAAK;AAC9C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/performance-now.js"],"sourcesContent":["/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n"],"names":[],"mappings":"AAAA,gDAAgD;;;;;AAChD;;AACO,SAAS;IACZ,IAAI,OAAO,gBAAgB,eAAe,IAAA,iLAAU,EAAC,YAAY,GAAG,GAAG;QACnE,OAAO,YAAY,GAAG;IAC1B,OACK;QACD,OAAO,KAAK,GAAG;IACnB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/log.js"],"sourcesContent":["/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        const prefix = `kysely:query:${event.isStream ? 'stream:' : ''}`;\n        console.log(`${prefix} ${event.query.sql}`);\n        console.log(`${prefix} duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${JSON.stringify({\n                error: event.error,\n                query: event.query.sql,\n                queryDurationMillis: event.queryDurationMillis,\n            })}`);\n        }\n    }\n}\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;;;;;;AACpC;;;;;AACO,MAAM,aAAa,IAAA,6KAAM,EAAC;IAAC;IAAS;CAAQ;IAE/C,uCACA;AAFG,MAAM;IAmBT,eAAe,KAAK,EAAE;QAClB,OAAO,iLAAA,IAAI,EAAC,QAAO,CAAC,MAAM;IAC9B;IACA,MAAM,MAAM,QAAQ,EAAE;QAClB,IAAI,iLAAA,IAAI,EAAC,SAAQ,KAAK,EAAE;YACpB,MAAM,iLAAA,IAAI,EAAC,cAAL,IAAI,EAAS;QACvB;IACJ;IACA,MAAM,MAAM,QAAQ,EAAE;QAClB,IAAI,iLAAA,IAAI,EAAC,SAAQ,KAAK,EAAE;YACpB,MAAM,iLAAA,IAAI,EAAC,cAAL,IAAI,EAAS;QACvB;IACJ;IA5BA,YAAY,MAAM,CAAE;QAFpB,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;QAEI,IAAI,IAAA,iLAAU,EAAC,SAAS;mMACf,SAAU;mMACV,SAAU,IAAA,6KAAM,EAAC;gBAClB,OAAO;gBACP,OAAO;YACX;QACJ,OACK;mMACI,SAAU;mMACV,SAAU,IAAA,6KAAM,EAAC;gBAClB,OAAO,OAAO,QAAQ,CAAC;gBACvB,OAAO,OAAO,QAAQ,CAAC;YAC3B;QACJ;IACJ;AAcJ;AACA,SAAS,cAAc,KAAK;IACxB,IAAI,MAAM,KAAK,KAAK,SAAS;QACzB,MAAM,SAAS,AAAC,gBAA+C,OAAhC,MAAM,QAAQ,GAAG,YAAY;QAC5D,QAAQ,GAAG,CAAC,AAAC,GAAY,OAAV,QAAO,KAAmB,OAAhB,MAAM,KAAK,CAAC,GAAG;QACxC,QAAQ,GAAG,CAAC,AAAC,GAAsB,OAApB,QAAO,eAAkD,OAArC,MAAM,mBAAmB,CAAC,OAAO,CAAC,IAAG;IAC5E,OACK,IAAI,MAAM,KAAK,KAAK,SAAS;QAC9B,IAAI,MAAM,KAAK,YAAY,OAAO;gBACC;YAA/B,QAAQ,KAAK,CAAC,AAAC,iBAAyD,OAAzC,CAAA,qBAAA,MAAM,KAAK,CAAC,KAAK,cAAjB,gCAAA,qBAAqB,MAAM,KAAK,CAAC,OAAO;QAC3E,OACK;YACD,QAAQ,KAAK,CAAC,AAAC,iBAIZ,OAJ4B,KAAK,SAAS,CAAC;gBAC1C,OAAO,MAAM,KAAK;gBAClB,OAAO,MAAM,KAAK,CAAC,GAAG;gBACtB,qBAAqB,MAAM,mBAAmB;YAClD;QACJ;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/util/compilable.js"],"sourcesContent":["/// <reference types=\"./compilable.d.ts\" />\nimport { isFunction, isObject } from './object-utils.js';\nexport function isCompilable(value) {\n    return isObject(value) && isFunction(value.compile);\n}\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;AAC3C;;AACO,SAAS,aAAa,KAAK;IAC9B,OAAO,IAAA,+KAAQ,EAAC,UAAU,IAAA,iLAAU,EAAC,MAAM,OAAO;AACtD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/savepoint-parser.js"],"sourcesContent":["/// <reference types=\"./savepoint-parser.d.ts\" />\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nexport function parseSavepointCommand(command, savepointName) {\n    return RawNode.createWithChildren([\n        RawNode.createWithSql(`${command} `),\n        IdentifierNode.create(savepointName), // ensures savepointName gets sanitized\n    ]);\n}\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AACjD;AACA;;;AACO,SAAS,sBAAsB,OAAO,EAAE,aAAa;IACxD,OAAO,uLAAO,CAAC,kBAAkB,CAAC;QAC9B,uLAAO,CAAC,aAAa,CAAC,AAAC,GAAU,OAAR,SAAQ;QACjC,qMAAc,CAAC,MAAM,CAAC;KACzB;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/value-parser.js"],"sourcesContent":["/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;;;;;;;AAC7C;AACA;AACA;AACA;AACA;;;;;;AACO,SAAS,2BAA2B,GAAG;IAC1C,IAAI,IAAA,sLAAe,EAAC,MAAM;QACtB,OAAO,yBAAyB;IACpC;IACA,OAAO,qBAAqB;AAChC;AACO,SAAS,qBAAqB,GAAG;IACpC,IAAI,IAAA,mMAAqB,EAAC,MAAM;QAC5B,OAAO,IAAA,6LAAe,EAAC;IAC3B;IACA,OAAO,2LAAS,CAAC,MAAM,CAAC;AAC5B;AACO,SAAS,qBAAqB,KAAK;IACtC,OAAO,IAAA,+KAAQ,EAAC,UAAU,IAAA,gLAAS,EAAC,UAAU,IAAA,6KAAM,EAAC;AACzD;AACO,SAAS,wBAAwB,KAAK;IACzC,IAAI,CAAC,qBAAqB,QAAQ;QAC9B,MAAM,IAAI,MAAM,AAAC,0BAA+C,OAAtB,KAAK,SAAS,CAAC;IAC7D;IACA,OAAO,2LAAS,CAAC,eAAe,CAAC;AACrC;AACA,SAAS,yBAAyB,GAAG;IACjC,IAAI,IAAI,IAAI,CAAC,mMAAqB,GAAG;QACjC,OAAO,uMAAa,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,KAAO,qBAAqB;IACrE;IACA,OAAO,6NAAsB,CAAC,MAAM,CAAC;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/binary-operation-parser.js"],"sourcesContent":["/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator, withParens = true) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create('='), ValueNode.createImmediate(combinator === 'and' ? 1 : 0));\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1 && withParens) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n"],"names":[],"mappings":"AAAA,wDAAwD;;;;;;;;;;;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACO,SAAS,sCAAsC,IAAI;IACtD,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,OAAO,0BAA0B,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;IAC9D,OACK,IAAI,KAAK,MAAM,KAAK,GAAG;QACxB,OAAO,IAAA,6LAAoB,EAAC,IAAI,CAAC,EAAE;IACvC;IACA,MAAM,IAAI,MAAM,AAAC,sBAA0C,OAArB,KAAK,SAAS,CAAC;AACzD;AACO,SAAS,0BAA0B,IAAI,EAAE,QAAQ,EAAE,KAAK;IAC3D,IAAI,aAAa,aAAa,gBAAgB,QAAQ;QAClD,OAAO,mNAAmB,CAAC,MAAM,CAAC,IAAA,qMAAwB,EAAC,OAAO,cAAc,WAAW,2LAAS,CAAC,eAAe,CAAC;IACzH;IACA,OAAO,mNAAmB,CAAC,MAAM,CAAC,IAAA,qMAAwB,EAAC,OAAO,cAAc,WAAW,IAAA,mMAA0B,EAAC;AAC1H;AACO,SAAS,gCAAgC,IAAI,EAAE,QAAQ,EAAE,KAAK;IACjE,OAAO,mNAAmB,CAAC,MAAM,CAAC,IAAA,qMAAwB,EAAC,OAAO,cAAc,WAAW,IAAA,qMAAwB,EAAC;AACxH;AACO,SAAS,kBAAkB,GAAG,EAAE,UAAU;IAC7C,OAAO,gBAAgB,OAAO,OAAO,CAAC,KACjC,MAAM,CAAC;YAAC,GAAG,EAAE;eAAK,CAAC,IAAA,kLAAW,EAAC;OAC/B,GAAG,CAAC;YAAC,CAAC,GAAG,EAAE;eAAK,0BAA0B,GAAG,gBAAgB,KAAK,OAAO,KAAK;QAAK;AAC5F;AACO,SAAS,gBAAgB,IAAI,EAAE,UAAU;QAAE,aAAA,iEAAa;IAC3D,MAAM,UAAU,eAAe,QAAQ,uLAAO,CAAC,MAAM,GAAG,qLAAM,CAAC,MAAM;IACrE,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,OAAO,mNAAmB,CAAC,MAAM,CAAC,2LAAS,CAAC,eAAe,CAAC,IAAI,iMAAY,CAAC,MAAM,CAAC,MAAM,2LAAS,CAAC,eAAe,CAAC,eAAe,QAAQ,IAAI;IACnJ;IACA,IAAI,OAAO,gBAAgB,IAAI,CAAC,EAAE;IAClC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,EAAE,EAAG;QAClC,OAAO,QAAQ,MAAM,gBAAgB,IAAI,CAAC,EAAE;IAChD;IACA,IAAI,KAAK,MAAM,GAAG,KAAK,YAAY;QAC/B,OAAO,6LAAU,CAAC,MAAM,CAAC;IAC7B;IACA,OAAO;AACX;AACA,SAAS,aAAa,QAAQ;IAC1B,OAAO,aAAa,QAAQ,aAAa;AAC7C;AACA,SAAS,gBAAgB,KAAK;IAC1B,OAAO,IAAA,6KAAM,EAAC,UAAU,IAAA,gLAAS,EAAC;AACtC;AACA,SAAS,cAAc,QAAQ;IAC3B,IAAI,IAAA,+KAAQ,EAAC,aAAa,8LAAS,CAAC,QAAQ,CAAC,WAAW;QACpD,OAAO,iMAAY,CAAC,MAAM,CAAC;IAC/B;IACA,IAAI,IAAA,qNAAqB,EAAC,WAAW;QACjC,OAAO,SAAS,eAAe;IACnC;IACA,MAAM,IAAI,MAAM,AAAC,oBAA4C,OAAzB,KAAK,SAAS,CAAC;AACvD;AACA,SAAS,gBAAgB,YAAY;IACjC,OAAO,IAAA,qNAAqB,EAAC,gBACvB,aAAa,eAAe,KAC5B;AACV","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/order-by-parser.js"],"sourcesContent":["/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { isExpression } from '../expression/expression.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { OrderByItemBuilder } from '../query-builder/order-by-item-builder.js';\nimport { logOnce } from '../util/log-once.js';\nimport { isExpressionOrFactory, parseExpression, } from './expression-parser.js';\nimport { parseStringReference, } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            logOnce('orderBy(array) is deprecated, use multiple orderBy calls instead.');\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(expr, modifiers) {\n    const parsedRef = parseOrderByExpression(expr);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (modifiers) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return parseOrderByWithModifiers(parsedRef, modifiers);\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        logOnce(\"`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead.\");\n        return parseOrderByWithModifiers(parseStringReference(ref), direction);\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByWithModifiers(expr, modifiers) {\n    if (typeof modifiers === 'string') {\n        if (!isOrderByDirection(modifiers)) {\n            throw new Error(`Invalid order by direction: ${modifiers}`);\n        }\n        return OrderByItemNode.create(expr, RawNode.createWithSql(modifiers));\n    }\n    if (isExpression(modifiers)) {\n        logOnce(\"`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead.\");\n        return OrderByItemNode.create(expr, modifiers.toOperationNode());\n    }\n    const node = OrderByItemNode.create(expr);\n    if (!modifiers) {\n        return node;\n    }\n    return modifiers(new OrderByItemBuilder({ node })).toOperationNode();\n}\n"],"names":[],"mappings":"AAAA,gDAAgD;;;;;;;;;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACO,SAAS,mBAAmB,KAAK;IACpC,OAAO,UAAU,SAAS,UAAU;AACxC;AACO,SAAS,aAAa,IAAI;IAC7B,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,OAAO;YAAC,iBAAiB,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;SAAE;IAC/C;IACA,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,MAAM,CAAC,QAAQ,GAAG;QAClB,IAAI,MAAM,OAAO,CAAC,UAAU;YACxB,IAAA,0KAAO,EAAC;YACR,OAAO,QAAQ,GAAG,CAAC,CAAC,OAAS,iBAAiB;QAClD;QACA,OAAO;YAAC,iBAAiB;SAAS;IACtC;IACA,MAAM,IAAI,MAAM,AAAC,mEAA8E,OAAZ,KAAK,MAAM;AAClG;AACO,SAAS,iBAAiB,IAAI,EAAE,SAAS;IAC5C,MAAM,YAAY,uBAAuB;IACzC,IAAI,+MAAe,CAAC,EAAE,CAAC,YAAY;QAC/B,IAAI,WAAW;YACX,MAAM,IAAI,MAAM;QACpB;QACA,OAAO;IACX;IACA,OAAO,0BAA0B,WAAW;AAChD;AACA,SAAS,uBAAuB,IAAI;IAChC,IAAI,IAAA,mMAAqB,EAAC,OAAO;QAC7B,OAAO,IAAA,6LAAe,EAAC;IAC3B;IACA,IAAI,IAAA,mNAAyB,EAAC,OAAO;QACjC,OAAO,KAAK,eAAe;IAC/B;IACA,MAAM,CAAC,KAAK,UAAU,GAAG,KAAK,KAAK,CAAC;IACpC,IAAI,WAAW;QACX,IAAA,0KAAO,EAAC;QACR,OAAO,0BAA0B,IAAA,iMAAoB,EAAC,MAAM;IAChE;IACA,OAAO,IAAA,iMAAoB,EAAC;AAChC;AACA,SAAS,0BAA0B,IAAI,EAAE,SAAS;IAC9C,IAAI,OAAO,cAAc,UAAU;QAC/B,IAAI,CAAC,mBAAmB,YAAY;YAChC,MAAM,IAAI,MAAM,AAAC,+BAAwC,OAAV;QACnD;QACA,OAAO,+MAAe,CAAC,MAAM,CAAC,MAAM,uLAAO,CAAC,aAAa,CAAC;IAC9D;IACA,IAAI,IAAA,oLAAY,EAAC,YAAY;QACzB,IAAA,0KAAO,EAAC;QACR,OAAO,+MAAe,CAAC,MAAM,CAAC,MAAM,UAAU,eAAe;IACjE;IACA,MAAM,OAAO,+MAAe,CAAC,MAAM,CAAC;IACpC,IAAI,CAAC,WAAW;QACZ,OAAO;IACX;IACA,OAAO,UAAU,IAAI,oNAAkB,CAAC;QAAE;IAAK,IAAI,eAAe;AACtE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 846, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/partition-by-parser.js"],"sourcesContent":["/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n"],"names":[],"mappings":"AAAA,oDAAoD;;;;;AACpD;AACA;;;AACO,SAAS,iBAAiB,WAAW;IACxC,OAAO,IAAA,2MAA8B,EAAC,aAAa,GAAG,CAAC,uNAAmB,CAAC,MAAM;AACrF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/table-parser.js"],"sourcesContent":["/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isAliasedDynamicTableBuilder, } from '../dynamic/dynamic-table-builder.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else if (isAliasedDynamicTableBuilder(table)) {\n        return table.toOperationNode();\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;;;;;;;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;AACO,SAAS,2BAA2B,KAAK;IAC5C,IAAI,IAAA,sLAAe,EAAC,QAAQ;QACxB,OAAO,MAAM,GAAG,CAAC,CAAC,KAAO,qBAAqB;IAClD,OACK;QACD,OAAO;YAAC,qBAAqB;SAAO;IACxC;AACJ;AACO,SAAS,qBAAqB,KAAK;IACtC,IAAI,IAAA,+KAAQ,EAAC,QAAQ;QACjB,OAAO,kBAAkB;IAC7B,OACK,IAAI,IAAA,kNAA4B,EAAC,QAAQ;QAC1C,OAAO,MAAM,eAAe;IAChC,OACK;QACD,OAAO,IAAA,oMAAsB,EAAC;IAClC;AACJ;AACO,SAAS,kBAAkB,IAAI;IAClC,MAAM,kBAAkB;IACxB,IAAI,KAAK,QAAQ,CAAC,kBAAkB;QAChC,MAAM,CAAC,OAAO,MAAM,GAAG,KAAK,KAAK,CAAC,iBAAiB,GAAG,CAAC;QACvD,OAAO,2LAAS,CAAC,MAAM,CAAC,WAAW,QAAQ,qMAAc,CAAC,MAAM,CAAC;IACrE,OACK;QACD,OAAO,WAAW;IACtB;AACJ;AACO,SAAS,WAAW,IAAI;IAC3B,MAAM,mBAAmB;IACzB,IAAI,KAAK,QAAQ,CAAC,mBAAmB;QACjC,MAAM,CAAC,QAAQ,MAAM,GAAG,KAAK,KAAK,CAAC,kBAAkB,GAAG,CAAC;QACzD,OAAO,2LAAS,CAAC,gBAAgB,CAAC,QAAQ;IAC9C,OACK;QACD,OAAO,2LAAS,CAAC,MAAM,CAAC;IAC5B;AACJ;AACA,SAAS,KAAK,GAAG;IACb,OAAO,IAAI,IAAI;AACnB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/select-parser.js"],"sourcesContent":["/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACO,SAAS,eAAe,SAAS;IACpC,IAAI,IAAA,iLAAU,EAAC,YAAY;QACvB,OAAO,eAAe,UAAU,IAAA,oMAAiB;IACrD,OACK,IAAI,IAAA,sLAAe,EAAC,YAAY;QACjC,OAAO,UAAU,GAAG,CAAC,CAAC,KAAO,sBAAsB;IACvD,OACK;QACD,OAAO;YAAC,sBAAsB;SAAW;IAC7C;AACJ;AACA,SAAS,sBAAsB,SAAS;IACpC,IAAI,IAAA,+KAAQ,EAAC,YAAY;QACrB,OAAO,mMAAa,CAAC,MAAM,CAAC,IAAA,wMAA2B,EAAC;IAC5D,OACK,IAAI,IAAA,mNAAyB,EAAC,YAAY;QAC3C,OAAO,mMAAa,CAAC,MAAM,CAAC,UAAU,eAAe;IACzD,OACK;QACD,OAAO,mMAAa,CAAC,MAAM,CAAC,IAAA,oMAAsB,EAAC;IACvD;AACJ;AACO,SAAS,eAAe,KAAK;IAChC,IAAI,CAAC,OAAO;QACR,OAAO;YAAC,mMAAa,CAAC,eAAe;SAAG;IAC5C,OACK,IAAI,MAAM,OAAO,CAAC,QAAQ;QAC3B,OAAO,MAAM,GAAG,CAAC;IACrB,OACK;QACD,OAAO;YAAC,kBAAkB;SAAO;IACrC;AACJ;AACA,SAAS,kBAAkB,KAAK;IAC5B,IAAI,IAAA,+KAAQ,EAAC,QAAQ;QACjB,OAAO,mMAAa,CAAC,wBAAwB,CAAC,IAAA,mLAAU,EAAC;IAC7D;IACA,MAAM,IAAI,MAAM,AAAC,uCAA4D,OAAtB,KAAK,SAAS,CAAC;AAC1E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 992, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/insert-values-parser.js"],"sourcesContent":["/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    let indexedRowColumns = rowColumns.length;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            indexedRowColumns--;\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = indexedRowColumns < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACO,SAAS,sBAAsB,GAAG;IACrC,MAAM,eAAe,IAAA,iLAAU,EAAC,OAAO,IAAI,IAAA,oMAAiB,OAAM;IAClE,MAAM,OAAO,IAAA,sLAAe,EAAC,gBACvB,eACA,IAAA,6KAAM,EAAC;QAAC;KAAa;IAC3B,OAAO,4BAA4B;AACvC;AACA,SAAS,4BAA4B,IAAI;IACrC,MAAM,UAAU,2BAA2B;IAC3C,OAAO;QACH,IAAA,6KAAM,EAAC;eAAI,QAAQ,IAAI;SAAG,CAAC,GAAG,CAAC,6LAAU,CAAC,MAAM;QAChD,6LAAU,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,MAAQ,eAAe,KAAK;KAC3D;AACL;AACA,SAAS,2BAA2B,IAAI;IACpC,MAAM,UAAU,IAAI;IACpB,KAAK,MAAM,OAAO,KAAM;QACpB,MAAM,OAAO,OAAO,IAAI,CAAC;QACzB,KAAK,MAAM,OAAO,KAAM;YACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,QAAQ,GAAG,CAAC,IAAI,KAAK,WAAW;gBAC7C,QAAQ,GAAG,CAAC,KAAK,QAAQ,IAAI;YACjC;QACJ;IACJ;IACA,OAAO;AACX;AACA,SAAS,eAAe,GAAG,EAAE,OAAO;IAChC,MAAM,aAAa,OAAO,IAAI,CAAC;IAC/B,MAAM,YAAY,MAAM,IAAI,CAAC;QACzB,QAAQ,QAAQ,IAAI;IACxB;IACA,IAAI,+BAA+B;IACnC,IAAI,oBAAoB,WAAW,MAAM;IACzC,KAAK,MAAM,OAAO,WAAY;QAC1B,MAAM,YAAY,QAAQ,GAAG,CAAC;QAC9B,IAAI,IAAA,kLAAW,EAAC,YAAY;YACxB;YACA;QACJ;QACA,MAAM,QAAQ,GAAG,CAAC,IAAI;QACtB,IAAI,IAAA,kLAAW,EAAC,UAAU,IAAA,mMAAqB,EAAC,QAAQ;YACpD,+BAA+B;QACnC;QACA,SAAS,CAAC,UAAU,GAAG;IAC3B;IACA,MAAM,oBAAoB,oBAAoB,QAAQ,IAAI;IAC1D,IAAI,qBAAqB,8BAA8B;QACnD,MAAM,eAAe,6NAAsB,CAAC,MAAM;QAClD,OAAO,uMAAa,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,KAAO,IAAA,kLAAW,EAAC,MAAM,eAAe,IAAA,6LAAoB,EAAC;IAC5G;IACA,OAAO,6NAAsB,CAAC,MAAM,CAAC;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1073, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/update-set-parser.js"],"sourcesContent":["/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseUpdate(...args) {\n    if (args.length === 2) {\n        return [\n            ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1])),\n        ];\n    }\n    return parseUpdateObjectExpression(args[0]);\n}\nexport function parseUpdateObjectExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;AAClD;AACA;AACA;AACA;AACA;AACA;;;;;;;AACO,SAAS;IAAY,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,OAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,KAAH,QAAA,SAAA,CAAA,KAAO;;IAC/B,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,OAAO;YACH,6MAAgB,CAAC,MAAM,CAAC,IAAA,qMAAwB,EAAC,IAAI,CAAC,EAAE,GAAG,IAAA,6LAAoB,EAAC,IAAI,CAAC,EAAE;SAC1F;IACL;IACA,OAAO,4BAA4B,IAAI,CAAC,EAAE;AAC9C;AACO,SAAS,4BAA4B,MAAM;IAC9C,MAAM,YAAY,IAAA,iLAAU,EAAC,UAAU,OAAO,IAAA,oMAAiB,OAAM;IACrE,OAAO,OAAO,OAAO,CAAC,WACjB,MAAM,CAAC;YAAC,CAAC,GAAG,MAAM;eAAK,UAAU;OACjC,GAAG,CAAC;YAAC,CAAC,KAAK,MAAM;QAClB,OAAO,6MAAgB,CAAC,MAAM,CAAC,6LAAU,CAAC,MAAM,CAAC,MAAM,IAAA,6LAAoB,EAAC;IAChF;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/top-parser.js"],"sourcesContent":["/// <reference types=\"./top-parser.d.ts\" />\nimport { TopNode } from '../operation-node/top-node.js';\nimport { isBigInt, isNumber, isUndefined } from '../util/object-utils.js';\nexport function parseTop(expression, modifiers) {\n    if (!isNumber(expression) && !isBigInt(expression)) {\n        throw new Error(`Invalid top expression: ${expression}`);\n    }\n    if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {\n        throw new Error(`Invalid top modifiers: ${modifiers}`);\n    }\n    return TopNode.create(expression, modifiers);\n}\nfunction isTopModifiers(modifiers) {\n    return (modifiers === 'percent' ||\n        modifiers === 'with ties' ||\n        modifiers === 'percent with ties');\n}\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;AAC3C;AACA;;;AACO,SAAS,SAAS,UAAU,EAAE,SAAS;IAC1C,IAAI,CAAC,IAAA,+KAAQ,EAAC,eAAe,CAAC,IAAA,+KAAQ,EAAC,aAAa;QAChD,MAAM,IAAI,MAAM,AAAC,2BAAqC,OAAX;IAC/C;IACA,IAAI,CAAC,IAAA,kLAAW,EAAC,cAAc,CAAC,eAAe,YAAY;QACvD,MAAM,IAAI,MAAM,AAAC,0BAAmC,OAAV;IAC9C;IACA,OAAO,uLAAO,CAAC,MAAM,CAAC,YAAY;AACtC;AACA,SAAS,eAAe,SAAS;IAC7B,OAAQ,cAAc,aAClB,cAAc,eACd,cAAc;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1142, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/with-parser.js"],"sourcesContent":["/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;AAC5C;AACA;AACA;AACA;AACA;;;;;;AACO,SAAS,2BAA2B,qBAAqB,EAAE,UAAU;IACxE,MAAM,iBAAiB,WAAW,IAAA,0LAAkB,KAAI,eAAe;IACvE,IAAI,IAAA,iLAAU,EAAC,wBAAwB;QACnC,OAAO,sBAAsB,kBAAkB,iBAAiB,eAAe;IACnF;IACA,OAAO,mOAAyB,CAAC,MAAM,CAAC,+BAA+B,wBAAwB;AACnG;AACA,SAAS,kBAAkB,cAAc;IACrC,OAAO,CAAC;QACJ,OAAO,IAAI,4LAAU,CAAC;YAClB,MAAM,mOAAyB,CAAC,MAAM,CAAC,+BAA+B,OAAO;QACjF;IACJ;AACJ;AACA,SAAS,+BAA+B,IAAI;IACxC,IAAI,KAAK,QAAQ,CAAC,MAAM;QACpB,MAAM,QAAQ,KAAK,KAAK,CAAC;QACzB,MAAM,QAAQ,KAAK,CAAC,EAAE;QACtB,MAAM,UAAU,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAO,GAAG,IAAI;QACvD,OAAO,+OAA6B,CAAC,MAAM,CAAC,OAAO;IACvD,OACK;QACD,OAAO,+OAA6B,CAAC,MAAM,CAAC;IAChD;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1185, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/merge-parser.js"],"sourcesContent":["/// <reference types=\"./merge-parser.d.ts\" />\nimport { MatchedNode } from '../operation-node/matched-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseFilterList, parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from './binary-operation-parser.js';\nexport function parseMergeWhen(type, args, refRight) {\n    return WhenNode.create(parseFilterList([\n        MatchedNode.create(!type.isMatched, type.bySource),\n        ...(args && args.length > 0\n            ? [\n                args.length === 3 && refRight\n                    ? parseReferentialBinaryOperation(args[0], args[1], args[2])\n                    : parseValueBinaryOperationOrExpression(args),\n            ]\n            : []),\n    ], 'and', false));\n}\nexport function parseMergeThen(result) {\n    if (isString(result)) {\n        return RawNode.create([result], []);\n    }\n    if (isOperationNodeSource(result)) {\n        return result.toOperationNode();\n    }\n    return result;\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;;;AAC7C;AACA;AACA;AACA;AACA;AACA;;;;;;;AACO,SAAS,eAAe,IAAI,EAAE,IAAI,EAAE,QAAQ;IAC/C,OAAO,yLAAQ,CAAC,MAAM,CAAC,IAAA,sMAAe,EAAC;QACnC,+LAAW,CAAC,MAAM,CAAC,CAAC,KAAK,SAAS,EAAE,KAAK,QAAQ;WAC7C,QAAQ,KAAK,MAAM,GAAG,IACpB;YACE,KAAK,MAAM,KAAK,KAAK,WACf,IAAA,sNAA+B,EAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,IACzD,IAAA,4NAAqC,EAAC;SAC/C,GACC,EAAE;KACX,EAAE,OAAO;AACd;AACO,SAAS,eAAe,MAAM;IACjC,IAAI,IAAA,+KAAQ,EAAC,SAAS;QAClB,OAAO,uLAAO,CAAC,MAAM,CAAC;YAAC;SAAO,EAAE,EAAE;IACtC;IACA,IAAI,IAAA,qNAAqB,EAAC,SAAS;QAC/B,OAAO,OAAO,eAAe;IACjC;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1227, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/parse-utils.js"],"sourcesContent":["/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;;;;;;;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACO,SAAS;IACZ,OAAO,IAAA,sNAAqB,EAAC;QACzB,SAAS,IAAA,gLAAa;QACtB,UAAU,iNAAmB;QAC7B,WAAW,2MAAe,CAAC,UAAU,CAAC,IAAA,mMAA0B,EAAC,EAAE;IACvE;AACJ;AACO,SAAS;IACZ,OAAO,IAAI,4KAAY,CAAC;QACpB,UAAU,iNAAmB;IACjC;AACJ;AACO,SAAS,kBAAkB,QAAQ,EAAE,KAAK;IAC7C,OAAO,IAAI,8LAAW,CAAC;QACnB,UAAU,yLAAQ,CAAC,MAAM,CAAC,UAAU,IAAA,6LAAoB,EAAC;IAC7D;AACJ;AACO,SAAS;IACZ,OAAO,IAAI,8LAAW,CAAC;QACnB,UAAU,yLAAQ,CAAC,MAAM;IAC7B;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1284, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/join-parser.js"],"sourcesContent":["/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nimport { parseTableExpression, } from './table-parser.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else if (args.length === 1) {\n        return parseOnlessJoin(joinType, args[0]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\nfunction parseOnlessJoin(joinType, from) {\n    return JoinNode.create(joinType, parseTableExpression(from));\n}\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;AAC5C;AACA;AACA;AACA;;;;;AACO,SAAS,UAAU,QAAQ,EAAE,IAAI;IACpC,IAAI,KAAK,MAAM,KAAK,GAAG;QACnB,OAAO,kBAAkB,UAAU,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;IAChE,OACK,IAAI,KAAK,MAAM,KAAK,GAAG;QACxB,OAAO,kBAAkB,UAAU,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;IACvD,OACK,IAAI,KAAK,MAAM,KAAK,GAAG;QACxB,OAAO,gBAAgB,UAAU,IAAI,CAAC,EAAE;IAC5C,OACK;QACD,MAAM,IAAI,MAAM;IACpB;AACJ;AACA,SAAS,kBAAkB,QAAQ,EAAE,IAAI,EAAE,QAAQ;IAC/C,OAAO,SAAS,IAAA,yLAAiB,EAAC,UAAU,OAAO,eAAe;AACtE;AACA,SAAS,kBAAkB,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS;IAC3D,OAAO,yLAAQ,CAAC,YAAY,CAAC,UAAU,IAAA,6LAAoB,EAAC,OAAO,IAAA,sNAA+B,EAAC,WAAW,KAAK;AACvH;AACA,SAAS,gBAAgB,QAAQ,EAAE,IAAI;IACnC,OAAO,yLAAQ,CAAC,MAAM,CAAC,UAAU,IAAA,6LAAoB,EAAC;AAC1D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1321, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/group-by-parser.js"],"sourcesContent":["/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n"],"names":[],"mappings":"AAAA,gDAAgD;;;;;AAChD;AACA;AACA;AACA;;;;;AACO,SAAS,aAAa,OAAO;IAChC,UAAU,IAAA,iLAAU,EAAC,WAAW,QAAQ,IAAA,oMAAiB,OAAM;IAC/D,OAAO,IAAA,2MAA8B,EAAC,SAAS,GAAG,CAAC,+MAAe,CAAC,MAAM;AAC7E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1342, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/set-operation-parser.js"],"sourcesContent":["/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;AACA;AACA;AACA;;;;;AACO,SAAS,mBAAmB,QAAQ,EAAE,UAAU,EAAE,GAAG;IACxD,IAAI,IAAA,iLAAU,EAAC,aAAa;QACxB,aAAa,WAAW,IAAA,0MAAuB;IACnD;IACA,IAAI,CAAC,IAAA,sLAAe,EAAC,aAAa;QAC9B,aAAa;YAAC;SAAW;IAC7B;IACA,OAAO,WAAW,GAAG,CAAC,CAAC,OAAS,6MAAgB,CAAC,MAAM,CAAC,UAAU,mMAAgB,OAAO;AAC7F","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1370, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/fetch-parser.js"],"sourcesContent":["/// <reference types=\"./fetch-parser.d.ts\" />\nimport { FetchNode } from '../operation-node/fetch-node.js';\nimport { isBigInt, isNumber } from '../util/object-utils.js';\nexport function parseFetch(rowCount, modifier) {\n    if (!isNumber(rowCount) && !isBigInt(rowCount)) {\n        throw new Error(`Invalid fetch row count: ${rowCount}`);\n    }\n    if (!isFetchModifier(modifier)) {\n        throw new Error(`Invalid fetch modifier: ${modifier}`);\n    }\n    return FetchNode.create(rowCount, modifier);\n}\nfunction isFetchModifier(value) {\n    return value === 'only' || value === 'with ties';\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;AAC7C;AACA;;;AACO,SAAS,WAAW,QAAQ,EAAE,QAAQ;IACzC,IAAI,CAAC,IAAA,+KAAQ,EAAC,aAAa,CAAC,IAAA,+KAAQ,EAAC,WAAW;QAC5C,MAAM,IAAI,MAAM,AAAC,4BAAoC,OAAT;IAChD;IACA,IAAI,CAAC,gBAAgB,WAAW;QAC5B,MAAM,IAAI,MAAM,AAAC,2BAAmC,OAAT;IAC/C;IACA,OAAO,2LAAS,CAAC,MAAM,CAAC,UAAU;AACtC;AACA,SAAS,gBAAgB,KAAK;IAC1B,OAAO,UAAU,UAAU,UAAU;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1395, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/unary-operation-parser.js"],"sourcesContent":["/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;;;;;AACvD;AACA;AACA;;;;AACO,SAAS,YAAY,OAAO;IAC/B,OAAO,oBAAoB,UAAU;AACzC;AACO,SAAS,eAAe,OAAO;IAClC,OAAO,oBAAoB,cAAc;AAC7C;AACO,SAAS,oBAAoB,QAAQ,EAAE,OAAO;IACjD,OAAO,iNAAkB,CAAC,MAAM,CAAC,iMAAY,CAAC,MAAM,CAAC,WAAW,IAAA,qMAAwB,EAAC;AAC7F","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1423, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/data-type-parser.js"],"sourcesContent":["/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, isColumnDataType, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    if (isOperationNodeSource(dataType)) {\n        return dataType.toOperationNode();\n    }\n    if (isColumnDataType(dataType)) {\n        return DataTypeNode.create(dataType);\n    }\n    throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);\n}\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;AACjD;AACA;;;AACO,SAAS,wBAAwB,QAAQ;IAC5C,IAAI,IAAA,qNAAqB,EAAC,WAAW;QACjC,OAAO,SAAS,eAAe;IACnC;IACA,IAAI,IAAA,yMAAgB,EAAC,WAAW;QAC5B,OAAO,qMAAY,CAAC,MAAM,CAAC;IAC/B;IACA,MAAM,IAAI,MAAM,AAAC,4BAAoD,OAAzB,KAAK,SAAS,CAAC;AAC/D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1445, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/expression-parser.js"],"sourcesContent":["/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;;;AAClD;AACA;AACA;AACA;;;;;AACO,SAAS,gBAAgB,GAAG;IAC/B,IAAI,IAAA,qNAAqB,EAAC,MAAM;QAC5B,OAAO,IAAI,eAAe;IAC9B,OACK,IAAI,IAAA,iLAAU,EAAC,MAAM;QACtB,OAAO,IAAI,IAAA,oMAAiB,KAAI,eAAe;IACnD;IACA,MAAM,IAAI,MAAM,AAAC,uBAA0C,OAApB,KAAK,SAAS,CAAC;AAC1D;AACO,SAAS,uBAAuB,GAAG;IACtC,IAAI,IAAA,qNAAqB,EAAC,MAAM;QAC5B,OAAO,IAAI,eAAe;IAC9B,OACK,IAAI,IAAA,iLAAU,EAAC,MAAM;QACtB,OAAO,IAAI,IAAA,oMAAiB,KAAI,eAAe;IACnD;IACA,MAAM,IAAI,MAAM,AAAC,+BAAkD,OAApB,KAAK,SAAS,CAAC;AAClE;AACO,SAAS,sBAAsB,GAAG;IACrC,OAAO,IAAA,oLAAY,EAAC,QAAQ,IAAA,2LAAmB,EAAC,QAAQ,IAAA,iLAAU,EAAC;AACvE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1485, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/reference-parser.js"],"sourcesContent":["/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1616, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/default-value-parser.js"],"sourcesContent":["/// <reference types=\"./default-value-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseDefaultValueExpression(value) {\n    return isOperationNodeSource(value)\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;AACA;;;AACO,SAAS,4BAA4B,KAAK;IAC7C,OAAO,IAAA,qNAAqB,EAAC,SACvB,MAAM,eAAe,KACrB,2LAAS,CAAC,eAAe,CAAC;AACpC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1632, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/on-modify-action-parser.js"],"sourcesContent":["/// <reference types=\"./on-modify-action-parser.d.ts\" />\nimport { ON_MODIFY_FOREIGN_ACTIONS, } from '../operation-node/references-node.js';\nexport function parseOnModifyForeignAction(action) {\n    if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\n"],"names":[],"mappings":"AAAA,wDAAwD;;;;;AACxD;;AACO,SAAS,2BAA2B,MAAM;IAC7C,IAAI,gNAAyB,CAAC,QAAQ,CAAC,SAAS;QAC5C,OAAO;IACX;IACA,MAAM,IAAI,MAAM,AAAC,iCAAuC,OAAP;AACrD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1649, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/on-commit-action-parse.js"],"sourcesContent":["/// <reference types=\"./on-commit-action-parse.d.ts\" />\nimport { ON_COMMIT_ACTIONS, } from '../operation-node/create-table-node.js';\nexport function parseOnCommitAction(action) {\n    if (ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;AACvD;;AACO,SAAS,oBAAoB,MAAM;IACtC,IAAI,6MAAiB,CAAC,QAAQ,CAAC,SAAS;QACpC,OAAO;IACX;IACA,MAAM,IAAI,MAAM,AAAC,0BAAgC,OAAP;AAC9C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1666, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/parser/identifier-parser.js"],"sourcesContent":["/// <reference types=\"./identifier-parser.d.ts\" />\nimport { SchemableIdentifierNode } from '../operation-node/schemable-identifier-node.js';\nexport function parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return SchemableIdentifierNode.create(id);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;AAClD;;AACO,SAAS,yBAAyB,EAAE;IACvC,MAAM,mBAAmB;IACzB,IAAI,GAAG,QAAQ,CAAC,mBAAmB;QAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,kBAAkB,GAAG,CAAC;QAC7C,IAAI,MAAM,MAAM,KAAK,GAAG;YACpB,OAAO,2NAAuB,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;QACtE,OACK;YACD,MAAM,IAAI,MAAM,AAAC,gCAAkC,OAAH;QACpD;IACJ,OACK;QACD,OAAO,2NAAuB,CAAC,MAAM,CAAC;IAC1C;AACJ;AACA,SAAS,KAAK,GAAG;IACb,OAAO,IAAI,IAAI;AACnB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1693, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-compiler/compiled-query.js"],"sourcesContent":["/// <reference types=\"./compiled-query.d.ts\" />\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { createQueryId } from '../util/query-id.js';\nexport const CompiledQuery = freeze({\n    raw(sql, parameters = []) {\n        return freeze({\n            sql,\n            query: RawNode.createWithSql(sql),\n            parameters: freeze(parameters),\n            queryId: createQueryId(),\n        });\n    },\n});\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;;AAC/C;AACA;AACA;;;;AACO,MAAM,gBAAgB,IAAA,6KAAM,EAAC;IAChC,KAAI,GAAG;YAAE,aAAA,iEAAa,EAAE;QACpB,OAAO,IAAA,6KAAM,EAAC;YACV;YACA,OAAO,uLAAO,CAAC,aAAa,CAAC;YAC7B,YAAY,IAAA,6KAAM,EAAC;YACnB,SAAS,IAAA,gLAAa;QAC1B;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1719, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js"],"sourcesContent":["/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { SetOperationNode } from '../operation-node/set-operation-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { logOnce } from '../util/log-once.js';\nconst LIT_WRAP_REGEX = /'/g;\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node, queryId) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.nodeStack.splice(0, this.nodeStack.length);\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            queryId,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode) &&\n            !CreateTableNode.is(this.parentNode) &&\n            !CreateViewNode.is(this.parentNode) &&\n            !SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.fetch) {\n            this.append(' ');\n            this.visitNode(node.fetch);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        // TODO: remove in 0.29.\n        if (node.ignore) {\n            logOnce('`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead.');\n            this.append(' ignore');\n        }\n        if (node.orAction) {\n            this.append(' ');\n            this.visitNode(node.orAction);\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.into) {\n            this.append(' into ');\n            this.visitNode(node.into);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.defaultValues) {\n            this.append(' ');\n            this.append('default values');\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!isString(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        if (node.selectQuery) {\n            this.append(' as ');\n            this.visitNode(node.selectQuery);\n        }\n        else {\n            this.append(' (');\n            this.compileList([...node.columns, ...(node.constraints ?? [])]);\n            this.append(')');\n            if (node.onCommit) {\n                this.append(' on commit ');\n                this.append(node.onCommit);\n            }\n            if (node.endModifiers && node.endModifiers.length > 0) {\n                this.append(' ');\n                this.compileList(node.endModifiers, ' ');\n            }\n        }\n    }\n    visitColumnDefinition(node) {\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.identity) {\n            this.append(' identity');\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.collation) {\n            this.append(' ');\n            this.visitNode(node.collation);\n        }\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n        if (node.nulls) {\n            this.append(' nulls ');\n            this.append(node.nulls);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append(' ');\n        }\n        this.append('set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            if (!node.from) {\n                throw new Error(\"Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins\");\n            }\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    buildDeferrable(node) {\n        if (node.deferrable !== undefined) {\n            if (node.deferrable) {\n                this.append(' deferrable');\n            }\n            else {\n                this.append(' not deferrable');\n            }\n        }\n        if (node.initiallyDeferred !== undefined) {\n            if (node.initiallyDeferred) {\n                this.append(' initially deferred');\n            }\n            else {\n                this.append(' initially immediate');\n            }\n        }\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique');\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n        this.buildDeferrable(node);\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if (isBoolean(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.renameConstraint) {\n            this.visitNode(node.renameConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileColumnAlterations(node.columnAlterations);\n        }\n        if (node.addIndex) {\n            this.visitNode(node.addIndex);\n        }\n        if (node.dropIndex) {\n            this.visitNode(node.dropIndex);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            if (this.announcesNewColumnDataType()) {\n                this.append('type ');\n            }\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitRenameConstraint(node) {\n        this.append('rename constraint ');\n        this.visitNode(node.oldName);\n        this.append(' to ');\n        this.visitNode(node.newName);\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitRefreshMaterializedView(node) {\n        this.append('refresh materialized view ');\n        if (node.concurrently) {\n            this.append('concurrently ');\n        }\n        this.visitNode(node.name);\n        if (node.withNoData) {\n            this.append(' with no data');\n        }\n        else {\n            this.append(' with data');\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n        if (node.of) {\n            this.append(' of ');\n            this.compileList(node.of, ', ');\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n        if (node.withinGroup) {\n            this.append(' within group (');\n            this.visitNode(node.withinGroup);\n            this.append(')');\n        }\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    visitMergeQuery(node) {\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('merge ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.append('into ');\n        this.visitNode(node.into);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.whens) {\n            this.append(' ');\n            this.compileList(node.whens, ' ');\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitMatched(node) {\n        if (node.not) {\n            this.append('not ');\n        }\n        this.append('matched');\n        if (node.bySource) {\n            this.append(' by source');\n        }\n    }\n    visitAddIndex(node) {\n        this.append('add ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n    }\n    visitCast(node) {\n        this.append('cast(');\n        this.visitNode(node.expression);\n        this.append(' as ');\n        this.visitNode(node.dataType);\n        this.append(')');\n    }\n    visitFetch(node) {\n        this.append('fetch next ');\n        this.visitNode(node.rowCount);\n        this.append(` rows ${node.modifier}`);\n    }\n    visitOutput(node) {\n        this.append('output ');\n        this.compileList(node.selections);\n    }\n    visitTop(node) {\n        this.append(`top(${node.expression})`);\n        if (node.modifiers) {\n            this.append(` ${node.modifiers}`);\n        }\n    }\n    visitOrAction(node) {\n        this.append(node.action);\n    }\n    visitCollate(node) {\n        this.append('collate ');\n        this.visitNode(node.collation);\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeStringLiteral(value) {\n        return value.replace(LIT_WRAP_REGEX, \"''\");\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.appendStringLiteral(value);\n        }\n        else if (isNumber(value) || isBoolean(value) || isBigInt(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    appendStringLiteral(value) {\n        this.append(\"'\");\n        this.append(this.sanitizeStringLiteral(value));\n        this.append(\"'\");\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return freeze(arr);\n    }\n    compileColumnAlterations(columnAlterations) {\n        this.compileList(columnAlterations);\n    }\n    /**\n     * controls whether the dialect adds a \"type\" keyword before a column's new data\n     * type in an ALTER TABLE statement.\n     */\n    announcesNewColumnDataType() {\n        return true;\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = freeze({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    CrossJoin: 'cross join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n    LateralCrossJoin: 'cross join lateral',\n    OuterApply: 'outer apply',\n    CrossApply: 'cross apply',\n    Using: 'using',\n});\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3128, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/plugin/noop-plugin.js"],"sourcesContent":["/// <reference types=\"./noop-plugin.d.ts\" />\nexport class NoopPlugin {\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;AACrC,MAAM;IACT,eAAe,IAAI,EAAE;QACjB,OAAO,KAAK,IAAI;IACpB;IACA,MAAM,gBAAgB,IAAI,EAAE;QACxB,OAAO,KAAK,MAAM;IACtB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3145, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js"],"sourcesContent":["/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { JoinNode } from '../../operation-node/join-node.js';\nimport { ListNode } from '../../operation-node/list-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    RefreshMaterializedViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n    MergeQueryNode: true,\n});\nconst SCHEMALESS_FUNCTIONS = {\n    json_agg: true,\n    to_json: true,\n};\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node, queryId) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node, queryId);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node, queryId);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node, queryId) {\n        const transformed = super.transformSchemableIdentifier(node, queryId);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node, queryId) {\n        const transformed = super.transformReferences(node, queryId);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    transformAggregateFunction(node, queryId) {\n        return {\n            ...super.transformAggregateFunction({ ...node, aggregated: [] }, queryId),\n            aggregated: this.#transformTableArgsWithoutSchemas(node, queryId, 'aggregated'),\n        };\n    }\n    transformFunction(node, queryId) {\n        return {\n            ...super.transformFunction({ ...node, arguments: [] }, queryId),\n            arguments: this.#transformTableArgsWithoutSchemas(node, queryId, 'arguments'),\n        };\n    }\n    #transformTableArgsWithoutSchemas(node, queryId, argsKey) {\n        return SCHEMALESS_FUNCTIONS[node.func]\n            ? node[argsKey].map((arg) => !TableNode.is(arg) || arg.table.schema\n                ? this.transformNode(arg, queryId)\n                : {\n                    ...arg,\n                    table: this.transformIdentifier(arg.table.identifier, queryId),\n                })\n            : this.transformNodeList(node[argsKey], queryId);\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        if ('using' in node && node.using) {\n            if (JoinNode.is(node.using)) {\n                this.#collectSchemableIdsFromTableExpr(node.using.table, schemableIds);\n            }\n            else {\n                this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);\n            }\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        if (TableNode.is(node)) {\n            this.#collectSchemableId(node.table, schemableIds);\n        }\n        else if (AliasNode.is(node) && TableNode.is(node.node)) {\n            this.#collectSchemableId(node.node.table, schemableIds);\n        }\n        else if (ListNode.is(node)) {\n            for (const table of node.items) {\n                this.#collectSchemableIdsFromTableExpr(table, schemableIds);\n            }\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3355, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js"],"sourcesContent":["/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n"],"names":[],"mappings":"AAAA,mDAAmD;;;;;;;;AACnD;;;;;IAEI;AADG,MAAM;IAKT,eAAe,IAAI,EAAE;QACjB,OAAO,iLAAA,IAAI,EAAC,cAAa,aAAa,CAAC,KAAK,IAAI,EAAE,KAAK,OAAO;IAClE;IACA,MAAM,gBAAgB,IAAI,EAAE;QACxB,OAAO,KAAK,MAAM;IACtB;IARA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,cAAe,IAAI,8NAAqB,CAAC;IAClD;AAOJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3388, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js"],"sourcesContent":["/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { ValueListNode } from '../../operation-node/value-list-node.js';\nimport { ValueNode } from '../../operation-node/value-node.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformPrimitiveValueList(node) {\n        return ValueListNode.create(node.values.map(ValueNode.createImmediate));\n    }\n    transformValue(node) {\n        return ValueNode.createImmediate(node.value);\n    }\n}\n"],"names":[],"mappings":"AAAA,4DAA4D;;;;;AAC5D;AACA;AACA;;;;AASO,MAAM,kCAAkC,6NAAwB;IACnE,4BAA4B,IAAI,EAAE;QAC9B,OAAO,uMAAa,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,2LAAS,CAAC,eAAe;IACzE;IACA,eAAe,IAAI,EAAE;QACjB,OAAO,2LAAS,CAAC,eAAe,CAAC,KAAK,KAAK;IAC/C;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3411, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js"],"sourcesContent":["/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;;;AACvD;;;;IAUI;AADG,MAAM;IAET,eAAe,IAAI,EAAE;QACjB,OAAO,iLAAA,IAAI,EAAC,cAAa,aAAa,CAAC,KAAK,IAAI,EAAE,KAAK,OAAO;IAClE;IACA,gBAAgB,IAAI,EAAE;QAClB,OAAO,QAAQ,OAAO,CAAC,KAAK,MAAM;IACtC;;QANA,wLAAA;;mBAAe,IAAI,0OAAyB;;;AAOhD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3441, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/migration/migrator.js"],"sourcesContent":["/// <reference types=\"./migrator.d.ts\" />\nimport { NoopPlugin } from '../plugin/noop-plugin.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { freeze, getLast, isObject } from '../util/object-utils.js';\nexport const DEFAULT_MIGRATION_TABLE = 'kysely_migration';\nexport const DEFAULT_MIGRATION_LOCK_TABLE = 'kysely_migration_lock';\nexport const DEFAULT_ALLOW_UNORDERED_MIGRATIONS = false;\nexport const MIGRATION_LOCK_ID = 'migration_lock';\nexport const NO_MIGRATIONS = freeze({ __noMigrations__: true });\n/**\n * A class for running migrations.\n *\n * ### Example\n *\n * This example uses the {@link FileMigrationProvider} that reads migrations\n * files from a single folder. You can easily implement your own\n * {@link MigrationProvider} if you want to provide migrations some\n * other way.\n *\n * ```ts\n * import { promises as fs } from 'node:fs'\n * import path from 'node:path'\n * import * as Sqlite from 'better-sqlite3'\n * import {\n *   FileMigrationProvider,\n *   Kysely,\n *   Migrator,\n *   SqliteDialect\n * } from 'kysely'\n *\n * const db = new Kysely<any>({\n *   dialect: new SqliteDialect({\n *     database: Sqlite(':memory:')\n *   })\n * })\n *\n * const migrator = new Migrator({\n *   db,\n *   provider: new FileMigrationProvider({\n *     fs,\n *     // Path to the folder that contains all your migrations.\n *     migrationFolder: 'some/path/to/migrations',\n *     path,\n *   })\n * })\n * ```\n */\nexport class Migrator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns a {@link MigrationInfo} object for each migration.\n     *\n     * The returned array is sorted by migration name.\n     */\n    async getMigrations() {\n        const executedMigrations = (await this.#doesTableExists(this.#migrationTable))\n            ? await this.#props.db\n                .withPlugin(this.#schemaPlugin)\n                .selectFrom(this.#migrationTable)\n                .select(['name', 'timestamp'])\n                .$narrowType()\n                .execute()\n            : [];\n        const migrations = await this.#resolveMigrations();\n        return migrations.map(({ name, ...migration }) => {\n            const executed = executedMigrations.find((it) => it.name === name);\n            return {\n                name,\n                migration,\n                executedAt: executed ? new Date(executed.timestamp) : undefined,\n            };\n        });\n    }\n    /**\n     * Runs all migrations that have not yet been run.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed. See the examples below.\n     *\n     * This method goes through all possible migrations provided by the provider and runs the\n     * ones whose names come alphabetically after the last migration that has been run. If the\n     * list of executed migrations doesn't match the beginning of the list of possible migrations\n     * an error is returned.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import * as Sqlite from 'better-sqlite3'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * const { error, results } = await migrator.migrateToLatest()\n     *\n     * results?.forEach((it) => {\n     *   if (it.status === 'Success') {\n     *     console.log(`migration \"${it.migrationName}\" was executed successfully`)\n     *   } else if (it.status === 'Error') {\n     *     console.error(`failed to execute migration \"${it.migrationName}\"`)\n     *   }\n     * })\n     *\n     * if (error) {\n     *   console.error('failed to run `migrateToLatest`')\n     *   console.error(error)\n     * }\n     * ```\n     */\n    async migrateToLatest() {\n        return this.#migrate(() => ({ direction: 'Up', step: Infinity }));\n    }\n    /**\n     * Migrate up/down to a specific migration.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo('some_migration')\n     * ```\n     *\n     * If you specify the name of the first migration, this method migrates\n     * down to the first migration, but doesn't run the `down` method of\n     * the first migration. In case you want to migrate all the way down,\n     * you can use a special constant `NO_MIGRATIONS`:\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator, NO_MIGRATIONS } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo(NO_MIGRATIONS)\n     * ```\n     */\n    async migrateTo(targetMigrationName) {\n        return this.#migrate(({ migrations, executedMigrations, pendingMigrations, }) => {\n            if (isObject(targetMigrationName) &&\n                targetMigrationName.__noMigrations__ === true) {\n                return { direction: 'Down', step: Infinity };\n            }\n            if (!migrations.find((m) => m.name === targetMigrationName)) {\n                throw new Error(`migration \"${targetMigrationName}\" doesn't exist`);\n            }\n            const executedIndex = executedMigrations.indexOf(targetMigrationName);\n            const pendingIndex = pendingMigrations.findIndex((m) => m.name === targetMigrationName);\n            if (executedIndex !== -1) {\n                return {\n                    direction: 'Down',\n                    step: executedMigrations.length - executedIndex - 1,\n                };\n            }\n            else if (pendingIndex !== -1) {\n                return { direction: 'Up', step: pendingIndex + 1 };\n            }\n            else {\n                throw new Error(`migration \"${targetMigrationName}\" isn't executed or pending`);\n            }\n        });\n    }\n    /**\n     * Migrate one step up.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateUp()\n     * ```\n     */\n    async migrateUp() {\n        return this.#migrate(() => ({ direction: 'Up', step: 1 }));\n    }\n    /**\n     * Migrate one step down.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateDown()\n     * ```\n     */\n    async migrateDown() {\n        return this.#migrate(() => ({ direction: 'Down', step: 1 }));\n    }\n    async #migrate(getMigrationDirectionAndStep) {\n        try {\n            await this.#ensureMigrationTablesExists();\n            return await this.#runMigrations(getMigrationDirectionAndStep);\n        }\n        catch (error) {\n            if (error instanceof MigrationResultSetError) {\n                return error.resultSet;\n            }\n            return { error };\n        }\n    }\n    get #migrationTableSchema() {\n        return this.#props.migrationTableSchema;\n    }\n    get #migrationTable() {\n        return this.#props.migrationTableName ?? DEFAULT_MIGRATION_TABLE;\n    }\n    get #migrationLockTable() {\n        return this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE;\n    }\n    get #allowUnorderedMigrations() {\n        return (this.#props.allowUnorderedMigrations ?? DEFAULT_ALLOW_UNORDERED_MIGRATIONS);\n    }\n    get #schemaPlugin() {\n        if (this.#migrationTableSchema) {\n            return new WithSchemaPlugin(this.#migrationTableSchema);\n        }\n        return new NoopPlugin();\n    }\n    async #ensureMigrationTablesExists() {\n        await this.#ensureMigrationTableSchemaExists();\n        await this.#ensureMigrationTableExists();\n        await this.#ensureMigrationLockTableExists();\n        await this.#ensureLockRowExists();\n    }\n    async #ensureMigrationTableSchemaExists() {\n        if (!this.#migrationTableSchema) {\n            // Use default schema. Nothing to do.\n            return;\n        }\n        if (!(await this.#doesSchemaExists())) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create schema`\n                // query doesn't throw if the schema already exits. That's why we check if\n                // the schema exist here and ignore the error if it does.\n                if (!(await this.#doesSchemaExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationTable))) {\n            try {\n                if (this.#migrationTableSchema) {\n                    await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n                }\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationTable)\n                    .addColumn('name', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    // The migration run time as ISO string. This is not a real date type as we\n                    // can't know which data type is supported by all future dialects.\n                    .addColumn('timestamp', 'varchar(255)', (col) => col.notNull()));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationLockTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationLockTable)\n                    .addColumn('id', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    .addColumn('is_locked', 'integer', (col) => col.notNull().defaultTo(0)));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureLockRowExists() {\n        if (!(await this.#doesLockRowExists())) {\n            try {\n                await this.#props.db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationLockTable)\n                    .values({ id: MIGRATION_LOCK_ID, is_locked: 0 })\n                    .execute();\n            }\n            catch (error) {\n                if (!(await this.#doesLockRowExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #doesSchemaExists() {\n        const schemas = await this.#props.db.introspection.getSchemas();\n        return schemas.some((it) => it.name === this.#migrationTableSchema);\n    }\n    async #doesTableExists(tableName) {\n        const schema = this.#migrationTableSchema;\n        const tables = await this.#props.db.introspection.getTables({\n            withInternalKyselyTables: true,\n        });\n        return tables.some((it) => it.name === tableName && (!schema || it.schema === schema));\n    }\n    async #doesLockRowExists() {\n        const lockRow = await this.#props.db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationLockTable)\n            .where('id', '=', MIGRATION_LOCK_ID)\n            .select('id')\n            .executeTakeFirst();\n        return !!lockRow;\n    }\n    async #runMigrations(getMigrationDirectionAndStep) {\n        const adapter = this.#props.db.getExecutor().adapter;\n        const lockOptions = freeze({\n            lockTable: this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE,\n            lockRowId: MIGRATION_LOCK_ID,\n            lockTableSchema: this.#props.migrationTableSchema,\n        });\n        const run = async (db) => {\n            try {\n                await adapter.acquireMigrationLock(db, lockOptions);\n                const state = await this.#getState(db);\n                if (state.migrations.length === 0) {\n                    return { results: [] };\n                }\n                const { direction, step } = getMigrationDirectionAndStep(state);\n                if (step <= 0) {\n                    return { results: [] };\n                }\n                if (direction === 'Down') {\n                    return await this.#migrateDown(db, state, step);\n                }\n                else if (direction === 'Up') {\n                    return await this.#migrateUp(db, state, step);\n                }\n                return { results: [] };\n            }\n            finally {\n                await adapter.releaseMigrationLock(db, lockOptions);\n            }\n        };\n        if (adapter.supportsTransactionalDdl && !this.#props.disableTransactions) {\n            return this.#props.db.transaction().execute(run);\n        }\n        else {\n            return this.#props.db.connection().execute(run);\n        }\n    }\n    async #getState(db) {\n        const migrations = await this.#resolveMigrations();\n        const executedMigrations = await this.#getExecutedMigrations(db);\n        this.#ensureNoMissingMigrations(migrations, executedMigrations);\n        if (!this.#allowUnorderedMigrations) {\n            this.#ensureMigrationsInOrder(migrations, executedMigrations);\n        }\n        const pendingMigrations = this.#getPendingMigrations(migrations, executedMigrations);\n        return freeze({\n            migrations,\n            executedMigrations,\n            lastMigration: getLast(executedMigrations),\n            pendingMigrations,\n        });\n    }\n    #getPendingMigrations(migrations, executedMigrations) {\n        return migrations.filter((migration) => {\n            return !executedMigrations.includes(migration.name);\n        });\n    }\n    async #resolveMigrations() {\n        const allMigrations = await this.#props.provider.getMigrations();\n        return Object.keys(allMigrations)\n            .sort()\n            .map((name) => ({\n            ...allMigrations[name],\n            name,\n        }));\n    }\n    async #getExecutedMigrations(db) {\n        const executedMigrations = await db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationTable)\n            .select(['name', 'timestamp'])\n            .$narrowType()\n            .execute();\n        const nameComparator = this.#props.nameComparator || ((a, b) => a.localeCompare(b));\n        return (executedMigrations\n            // https://github.com/kysely-org/kysely/issues/843\n            .sort((a, b) => {\n            if (a.timestamp === b.timestamp) {\n                return nameComparator(a.name, b.name);\n            }\n            return (new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n        })\n            .map((it) => it.name));\n    }\n    #ensureNoMissingMigrations(migrations, executedMigrations) {\n        // Ensure all executed migrations exist in the `migrations` list.\n        for (const executed of executedMigrations) {\n            if (!migrations.some((it) => it.name === executed)) {\n                throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);\n            }\n        }\n    }\n    #ensureMigrationsInOrder(migrations, executedMigrations) {\n        // Ensure the executed migrations are the first ones in the migration list.\n        for (let i = 0; i < executedMigrations.length; ++i) {\n            if (migrations[i].name !== executedMigrations[i]) {\n                throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);\n            }\n        }\n    }\n    async #migrateDown(db, state, step) {\n        const migrationsToRollback = state.executedMigrations\n            .slice()\n            .reverse()\n            .slice(0, step)\n            .map((name) => {\n            return state.migrations.find((it) => it.name === name);\n        });\n        const results = migrationsToRollback.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Down',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; ++i) {\n            const migration = migrationsToRollback[i];\n            try {\n                if (migration.down) {\n                    await migration.down(db);\n                    await db\n                        .withPlugin(this.#schemaPlugin)\n                        .deleteFrom(this.#migrationTable)\n                        .where('name', '=', migration.name)\n                        .execute();\n                    results[i] = {\n                        migrationName: migration.name,\n                        direction: 'Down',\n                        status: 'Success',\n                    };\n                }\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Down',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #migrateUp(db, state, step) {\n        const migrationsToRun = state.pendingMigrations.slice(0, step);\n        const results = migrationsToRun.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Up',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; i++) {\n            const migration = state.pendingMigrations[i];\n            try {\n                await migration.up(db);\n                await db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationTable)\n                    .values({\n                    name: migration.name,\n                    timestamp: new Date().toISOString(),\n                })\n                    .execute();\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Success',\n                };\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #createIfNotExists(qb) {\n        if (this.#props.db.getExecutor().adapter.supportsCreateIfNotExists) {\n            qb = qb.ifNotExists();\n        }\n        await qb.execute();\n    }\n}\nclass MigrationResultSetError extends Error {\n    #resultSet;\n    constructor(result) {\n        super();\n        this.#resultSet = result;\n    }\n    get resultSet() {\n        return this.#resultSet;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4062, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/expression/expression.js"],"sourcesContent":["/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;;;AAC3C;AACA;;;AACO,SAAS,aAAa,GAAG;IAC5B,OAAO,IAAA,+KAAQ,EAAC,QAAQ,oBAAoB,OAAO,IAAA,qNAAqB,EAAC;AAC7E;AACO,SAAS,oBAAoB,GAAG;IACnC,OAAQ,IAAA,+KAAQ,EAAC,QACb,gBAAgB,OAChB,IAAA,+KAAQ,EAAC,IAAI,KAAK,KAClB,IAAA,qNAAqB,EAAC;AAC9B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4083, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/expression/expression-wrapper.js"],"sourcesContent":["/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4258, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/expression/expression-builder.js"],"sourcesContent":["/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, parseTable, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { CastNode } from '../operation-node/cast-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        jsonPath() {\n            return new JSONPathBuilder(JSONPathNode.create());\n        },\n        table(table) {\n            return new ExpressionWrapper(parseTable(table));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpression(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        cast(expr, dataType) {\n            return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4424, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js"],"sourcesContent":["/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;;;;;AAC1D;AACA;AACA;;;;;;;IAEI;AADG,MAAM;IAET,IAAI,mBAAmB;QACnB,wLAAO,IAAI,EAAC;IAChB;IACA;;;;;;;KAOC,GACD,IAAI,UAAU;QACV,OAAO;IACX;IAIA,kBAAkB;QACd,OAAO,IAAA,2MAA8B,mLAAC,IAAI,EAAC;IAC/C;IALA,YAAY,SAAS,CAAE;QAfvB,wLAAA;;mBAAA,KAAA;;+LAgBS,mBAAoB;IAC7B;AAIJ;AACO,SAAS,0BAA0B,GAAG;IACzC,OAAQ,IAAA,+KAAQ,EAAC,QACb,IAAA,qNAAqB,EAAC,QACtB,IAAA,+KAAQ,EAAC,IAAI,gBAAgB;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4476, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dynamic/dynamic-table-builder.js"],"sourcesContent":["/// <reference types=\"./dynamic-table-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicTableBuilder {\n    #table;\n    get table() {\n        return this.#table;\n    }\n    constructor(table) {\n        this.#table = table;\n    }\n    as(alias) {\n        return new AliasedDynamicTableBuilder(this.#table, alias);\n    }\n}\nexport class AliasedDynamicTableBuilder {\n    #table;\n    #alias;\n    get table() {\n        return this.#table;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    constructor(table, alias) {\n        this.#table = table;\n        this.#alias = alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(parseTable(this.#table), IdentifierNode.create(this.#alias));\n    }\n}\nexport function isAliasedDynamicTableBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.table) &&\n        isString(obj.alias));\n}\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;;;;;;;AACtD;AACA;AACA;AACA;AACA;;;;;;;;;IAEI;AADG,MAAM;IAET,IAAI,QAAQ;QACR,wLAAO,IAAI,EAAC;IAChB;IAIA,GAAG,KAAK,EAAE;QACN,OAAO,IAAI,4MAA2B,IAAI,EAAC,SAAQ;IACvD;IALA,YAAY,KAAK,CAAE;QAJnB,wLAAA;;mBAAA,KAAA;;+LAKS,QAAS;IAClB;AAIJ;IAEI,uCACA;AAFG,MAAM;IAGT,IAAI,QAAQ;QACR,wLAAO,IAAI,EAAC;IAChB;IACA,IAAI,QAAQ;QACR,wLAAO,IAAI,EAAC;IAChB;IAKA,kBAAkB;QACd,OAAO,2LAAS,CAAC,MAAM,CAAC,IAAA,mLAAU,mLAAC,IAAI,EAAC,WAAS,qMAAc,CAAC,MAAM,kLAAC,IAAI,EAAC;IAChF;IANA,YAAY,KAAK,EAAE,KAAK,CAAE;QAR1B,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;+LAQS,SAAS;+LACT,QAAS;IAClB;AAIJ;AACO,SAAS,6BAA6B,GAAG;IAC5C,OAAQ,IAAA,+KAAQ,EAAC,QACb,IAAA,qNAAqB,EAAC,QACtB,IAAA,+KAAQ,EAAC,IAAI,KAAK,KAClB,IAAA,+KAAQ,EAAC,IAAI,KAAK;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4548, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dynamic/dynamic.js"],"sourcesContent":["/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nimport { DynamicTableBuilder } from './dynamic-table-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by TypeScript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput: PossibleColumns = 'birthdate';\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birthdate'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | null | undefined = person?.last_name\n     * const firstName: string | undefined = person?.first_name\n     * const birthDate: Date | null | undefined = person?.birthdate\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person?.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n    /**\n     * Creates a table reference to a table that's not fully known at compile time.\n     *\n     * The type `T` is allowed to be a union of multiple tables.\n     *\n     * <!-- siteExample(\"select\", \"Generic find query\", 130) -->\n     *\n     * A generic type-safe helper function for finding a row by a column value:\n     *\n     * ```ts\n     * import { SelectType } from 'kysely'\n     * import { Database } from 'type-editor'\n     *\n     * async function getRowByColumn<\n     *   T extends keyof Database,\n     *   C extends keyof Database[T] & string,\n     *   V extends SelectType<Database[T][C]>,\n     * >(t: T, c: C, v: V) {\n     *   // We need to use the dynamic module since the table name\n     *   // is not known at compile time.\n     *   const { table, ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom(table(t).as('t'))\n     *     .selectAll()\n     *     .where(ref(c), '=', v)\n     *     .orderBy('t.id')\n     *     .executeTakeFirstOrThrow()\n     * }\n     *\n     * const person = await getRowByColumn('person', 'first_name', 'Arnold')\n     * ```\n     */\n    table(table) {\n        return new DynamicTableBuilder(table);\n    }\n}\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;;AACxC;AACA;;;AACO,MAAM;IACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAoFC,GACD,IAAI,SAAS,EAAE;QACX,OAAO,IAAI,iNAAuB,CAAC;IACvC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCC,GACD,MAAM,KAAK,EAAE;QACT,OAAO,IAAI,yMAAmB,CAAC;IACnC;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4685, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-executor/query-executor-base.js"],"sourcesContent":["/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { provideControlledConnection } from '../util/provide-controlled-connection.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            if ('numUpdatedOrDeletedRows' in result) {\n                logOnce('kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`.');\n            }\n            return await this.#transformResult(result, compiledQuery.queryId);\n        });\n    }\n    async *stream(compiledQuery, chunkSize) {\n        const { connection, release } = await provideControlledConnection(this);\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, compiledQuery.queryId);\n            }\n        }\n        finally {\n            release();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n"],"names":[],"mappings":"AAAA,oDAAoD;;;;;;;;;;AACpD;AACA;AACA;;;;;;;;;AACA,MAAM,aAAa,IAAA,6KAAM,EAAC,EAAE;IAExB,wCA8CM;AA/CH,MAAM;IAKT,IAAI,UAAU;QACV,wLAAO,IAAI,EAAC;IAChB;IACA,eAAe,IAAI,EAAE,OAAO,EAAE;QAC1B,KAAK,MAAM,2LAAU,IAAI,EAAC,UAAU;YAChC,MAAM,kBAAkB,OAAO,cAAc,CAAC;gBAAE;gBAAM;YAAQ;YAC9D,2DAA2D;YAC3D,+CAA+C;YAC/C,IAAI,gBAAgB,IAAI,KAAK,KAAK,IAAI,EAAE;gBACpC,OAAO;YACX,OACK;gBACD,MAAM,IAAI,MAAM;oBACX;oBACA;oBACA,0BAAmC,OAAV,KAAK,IAAI;oBAClC,qBAAyC,OAArB,gBAAgB,IAAI;iBAC5C,CAAC,IAAI,CAAC;YACX;QACJ;QACA,OAAO;IACX;IACA,MAAM,aAAa,aAAa,EAAE;QAC9B,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO;YACvC,MAAM,SAAS,MAAM,WAAW,YAAY,CAAC;YAC7C,IAAI,6BAA6B,QAAQ;gBACrC,IAAA,0KAAO,EAAC;YACZ;YACA,OAAO,MAAM,kLAAA,IAAI,EAAC,kBAAA,sBAAL,IAAI,EAAkB,QAAQ,cAAc,OAAO;QACpE;IACJ;IACA,OAAO,OAAO,aAAa,EAAE,SAAS,EAAE;QACpC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,sNAA2B,EAAC,IAAI;QACtE,IAAI;YACA,WAAW,MAAM,UAAU,WAAW,WAAW,CAAC,eAAe,WAAY;gBACzE,MAAM,MAAM,kLAAA,IAAI,EAAC,kBAAA,sBAAL,IAAI,EAAkB,QAAQ,cAAc,OAAO;YACnE;QACJ,SACQ;YACJ;QACJ;IACJ;IA5CA,YAAY,UAAU,UAAU,CAAE;QA6ClC,yLAAM;QA9CN,wLAAA;;mBAAA,KAAA;;+LAES,UAAW;IACpB;AAiDJ;AANI,eAAA,gBAAuB,MAAM,EAAE,OAAO;IAClC,KAAK,MAAM,2LAAU,IAAI,EAAC,UAAU;QAChC,SAAS,MAAM,OAAO,eAAe,CAAC;YAAE;YAAQ;QAAQ;IAC5D;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4774, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js"],"sourcesContent":["/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n"],"names":[],"mappings":"AAAA,oDAAoD;;;;;;;AACpD;;AAMO,MAAM,0BAA0B,+MAAiB;IACpD,IAAI,UAAU;QACV,MAAM,IAAI,MAAM;IACpB;IACA,eAAe;QACX,MAAM,IAAI,MAAM;IACpB;IACA,oBAAoB;QAChB,MAAM,IAAI,MAAM;IACpB;IACA,yBAAyB;QACrB,MAAM,IAAI,MAAM;IACpB;IACA,WAAW,MAAM,EAAE;QACf,OAAO,IAAI,kBAAkB;eAAI,IAAI,CAAC,OAAO;YAAE;SAAO;IAC1D;IACA,YAAY,OAAO,EAAE;QACjB,OAAO,IAAI,kBAAkB;eAAI,IAAI,CAAC,OAAO;eAAK;SAAQ;IAC9D;IACA,kBAAkB,MAAM,EAAE;QACtB,OAAO,IAAI,kBAAkB;YAAC;eAAW,IAAI,CAAC,OAAO;SAAC;IAC1D;IACA,iBAAiB;QACb,OAAO,IAAI,kBAAkB,EAAE;IACnC;AACJ;AACO,MAAM,sBAAsB,IAAI","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4823, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-executor/default-query-executor.js"],"sourcesContent":["/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\nexport class DefaultQueryExecutor extends QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node, queryId) {\n        return this.#compiler.compileQuery(node, queryId);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;;;;AACvD;;;;;IAEI,yCACA,wCACA;AAHG,MAAM,6BAA6B,+MAAiB;IAUvD,IAAI,UAAU;QACV,wLAAO,IAAI,EAAC;IAChB;IACA,aAAa,IAAI,EAAE,OAAO,EAAE;QACxB,OAAO,iLAAA,IAAI,EAAC,WAAU,YAAY,CAAC,MAAM;IAC7C;IACA,kBAAkB,QAAQ,EAAE;QACxB,OAAO,iLAAA,IAAI,EAAC,qBAAoB,iBAAiB,CAAC;IACtD;IACA,YAAY,OAAO,EAAE;QACjB,OAAO,IAAI,sMAAqB,IAAI,EAAC,6LAAW,IAAI,EAAC,4LAAU,IAAI,EAAC,sBAAqB;eAAI,IAAI,CAAC,OAAO;eAAK;SAAQ;IAC1H;IACA,WAAW,MAAM,EAAE;QACf,OAAO,IAAI,sMAAqB,IAAI,EAAC,6LAAW,IAAI,EAAC,4LAAU,IAAI,EAAC,sBAAqB;eAAI,IAAI,CAAC,OAAO;YAAE;SAAO;IACtH;IACA,kBAAkB,MAAM,EAAE;QACtB,OAAO,IAAI,sMAAqB,IAAI,EAAC,6LAAW,IAAI,EAAC,4LAAU,IAAI,EAAC,sBAAqB;YAAC;eAAW,IAAI,CAAC,OAAO;SAAC;IACtH;IACA,uBAAuB,kBAAkB,EAAE;QACvC,OAAO,IAAI,sMAAqB,IAAI,EAAC,6LAAW,IAAI,EAAC,WAAU,oBAAoB;eAAI,IAAI,CAAC,OAAO;SAAC;IACxG;IACA,iBAAiB;QACb,OAAO,IAAI,sMAAqB,IAAI,EAAC,6LAAW,IAAI,EAAC,4LAAU,IAAI,EAAC,sBAAqB,EAAE;IAC/F;IA7BA,YAAY,QAAQ,EAAE,OAAO,EAAE,kBAAkB,EAAE,UAAU,EAAE,CAAE;QAC7D,KAAK,CAAC,UAJV,wLAAA;;mBAAA,KAAA;YACA,wLAAA;;mBAAA,KAAA;YACA,wLAAA;;mBAAA,KAAA;;+LAGS,WAAY;+LACZ,UAAW;+LACX,qBAAsB;IAC/B;AAyBJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4893, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/query-creator.js"],"sourcesContent":["/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpressionOrList, parseAliasedTable, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nimport { MergeQueryBuilder } from './query-builder/merge-query-builder.js';\nimport { MergeQueryNode } from './operation-node/merge-query-node.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Creates a `select` query builder for the given table or tables.\n     *\n     * The tables passed to this method are built as the query's `from` clause.\n     *\n     * ### Examples\n     *\n     * Create a select query for one table:\n     *\n     * ```ts\n     * db.selectFrom('person').selectAll()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"person\"\n     * ```\n     *\n     * Create a select query for one table with an alias:\n     *\n     * ```ts\n     * const persons = await db.selectFrom('person as p')\n     *   .select(['p.id', 'first_name'])\n     *   .execute()\n     *\n     * console.log(persons[0].id)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"id\", \"first_name\" from \"person\" as \"p\"\n     * ```\n     *\n     * Create a select query from a subquery:\n     *\n     * ```ts\n     * const persons = await db.selectFrom(\n     *     (eb) => eb.selectFrom('person').select('person.id as identifier').as('p')\n     *   )\n     *   .select('p.identifier')\n     *   .execute()\n     *\n     * console.log(persons[0].identifier)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"identifier\",\n     * from (\n     *   select \"person\".\"id\" as \"identifier\" from \"person\"\n     * ) as p\n     * ```\n     *\n     * Create a select query from raw sql:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db\n     *   .selectFrom(sql<{ one: number }>`(select 1 as one)`.as('q'))\n     *   .select('q.one')\n     *   .execute()\n     *\n     * console.log(items[0].one)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"q\".\"one\",\n     * from (\n     *   select 1 as one\n     * ) as q\n     * ```\n     *\n     * When you use the `sql` tag you need to also provide the result type of the\n     * raw snippet / query so that Kysely can figure out what columns are\n     * available for the rest of the query.\n     *\n     * The `selectFrom` method also accepts an array for multiple tables. All\n     * the above examples can also be used in an array.\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db.selectFrom([\n     *     'person as p',\n     *     db.selectFrom('pet').select('pet.species').as('a'),\n     *     sql<{ one: number }>`(select 1 as one)`.as('q')\n     *   ])\n     *   .select(['p.id', 'a.species', 'q.one'])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".id, \"a\".\"species\", \"q\".\"one\"\n     * from\n     *   \"person\" as \"p\",\n     *   (select \"pet\".\"species\" from \"pet\") as a,\n     *   (select 1 as one) as \"q\"\n     * ```\n     */\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a \"replace into\" query.\n     *\n     * This is only supported by some dialects like MySQL or SQLite.\n     *\n     * Similar to MySQL's {@link InsertQueryBuilder.onDuplicateKeyUpdate} that deletes\n     * and inserts values on collision instead of updating existing rows.\n     *\n     * An alias of SQLite's {@link InsertQueryBuilder.orReplace}.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * replace into `person` (`first_name`, `last_name`) values (?, ?)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    /**\n     * Creates a delete query.\n     *\n     * See the {@link DeleteQueryBuilder.where} method for examples on how to specify\n     * a where clause for the delete operation.\n     *\n     * The return value of the query is an instance of {@link DeleteResult}.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"delete\", \"Single row\", 10) -->\n     *\n     * Delete a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom('person')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numDeletedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * delete from \"person\" where \"person\".\"id\" = $1\n     * ```\n     *\n     * Some databases such as MySQL support deleting from multiple tables:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom(['person', 'pet'])\n     *   .using('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `person`, `pet`\n     * using `person`\n     * inner join `pet` on `pet`.`owner_id` = `person`.`id`\n     * where `person`.`id` = ?\n     * ```\n     */\n    deleteFrom(from) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates an update query.\n     *\n     * See the {@link UpdateQueryBuilder.where} method for examples on how to specify\n     * a where clause for the update operation.\n     *\n     * See the {@link UpdateQueryBuilder.set} method for examples on how to\n     * specify the updates.\n     *\n     * The return value of the query is an {@link UpdateResult}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Jennifer' })\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     */\n    updateTable(tables) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a merge query.\n     *\n     * The return value of the query is a {@link MergeResult}.\n     *\n     * See the {@link MergeQueryBuilder.using} method for examples on how to specify\n     * the other table.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"merge\", \"Source row existence\", 10) -->\n     *\n     * Update a target column based on the existence of a source row:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('person as target')\n     *   .using('pet as source', 'source.owner_id', 'target.id')\n     *   .whenMatchedAnd('target.has_pets', '!=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'Y' })\n     *   .whenNotMatchedBySourceAnd('target.has_pets', '=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'N' })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.numChangedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\"\n     * on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * when matched and \"has_pets\" != $1\n     * then update set \"has_pets\" = $2\n     * when not matched by source and \"has_pets\" = $3\n     * then update set \"has_pets\" = $4\n     * ```\n     *\n     * <!-- siteExample(\"merge\", \"Temporary changes table\", 20) -->\n     *\n     * Merge new entries from a temporary changes table:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('wine as target')\n     *   .using(\n     *     'wine_stock_change as source',\n     *     'source.wine_name',\n     *     'target.name',\n     *   )\n     *   .whenNotMatchedAnd('source.stock_delta', '>', 0)\n     *   .thenInsertValues(({ ref }) => ({\n     *     name: ref('source.wine_name'),\n     *     stock: ref('source.stock_delta'),\n     *   }))\n     *   .whenMatchedAnd(\n     *     (eb) => eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *     '>',\n     *     0,\n     *   )\n     *   .thenUpdateSet('stock', (eb) =>\n     *     eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *   )\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"wine\" as \"target\"\n     * using \"wine_stock_change\" as \"source\"\n     * on \"source\".\"wine_name\" = \"target\".\"name\"\n     * when not matched and \"source\".\"stock_delta\" > $1\n     * then insert (\"name\", \"stock\") values (\"source\".\"wine_name\", \"source\".\"stock_delta\")\n     * when matched and \"target\".\"stock\" + \"source\".\"stock_delta\" > $2\n     * then update set \"stock\" = \"target\".\"stock\" + \"source\".\"stock_delta\"\n     * when matched\n     * then delete\n     * ```\n     */\n    mergeInto(targetTable) {\n        return new MergeQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"cte\", \"Simple selects\", 10) -->\n     *\n     * Common table expressions (CTE) are a great way to modularize complex queries.\n     * Essentially they allow you to run multiple separate queries within a\n     * single roundtrip to the DB.\n     *\n     * Since CTEs are a part of the main query, query optimizers inside DB\n     * engines are able to optimize the overall query. For example, postgres\n     * is able to inline the CTEs inside the using queries if it decides it's\n     * faster.\n     *\n     * ```ts\n     * const result = await db\n     *   // Create a CTE called `jennifers` that selects all\n     *   // persons named 'Jennifer'.\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   // Select all rows from the `jennifers` CTE and\n     *   // further filter it.\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   // Finally select all adult jennifers that are\n     *   // also younger than 60.\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * <!-- siteExample(\"cte\", \"Inserts, updates and deletions\", 20) -->\n     *\n     * Some databases like postgres also allow you to run other queries than selects\n     * in CTEs. On these databases CTEs are extremely powerful:\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (db) => db\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       age: 35,\n     *     })\n     *     .returning('id')\n     *   )\n     *   .with('new_pet', (db) => db\n     *     .insertInto('pet')\n     *     .values({\n     *       name: 'Doggo',\n     *       species: 'dog',\n     *       is_favorite: true,\n     *       // Use the id of the person we just inserted.\n     *       owner_id: db\n     *         .selectFrom('new_person')\n     *         .select('id')\n     *     })\n     *     .returning('id')\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .select([\n     *     'new_person.id as person_id',\n     *     'new_pet.id as pet_id'\n     *   ])\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0007-schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5534, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/raw-builder/raw-builder.js"],"sourcesContent":["/// <reference types=\"./raw-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nclass RawBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isRawBuilder() {\n        return true;\n    }\n    as(alias) {\n        return new AliasedRawBuilderImpl(this, alias);\n    }\n    $castTo() {\n        return new RawBuilderImpl({ ...this.#props });\n    }\n    $notNull() {\n        return new RawBuilderImpl(this.#props);\n    }\n    withPlugin(plugin) {\n        return new RawBuilderImpl({\n            ...this.#props,\n            plugins: this.#props.plugins !== undefined\n                ? freeze([...this.#props.plugins, plugin])\n                : freeze([plugin]),\n        });\n    }\n    toOperationNode() {\n        return this.#toOperationNode(this.#getExecutor());\n    }\n    compile(executorProvider) {\n        return this.#compile(this.#getExecutor(executorProvider));\n    }\n    async execute(executorProvider) {\n        const executor = this.#getExecutor(executorProvider);\n        return executor.executeQuery(this.#compile(executor));\n    }\n    #getExecutor(executorProvider) {\n        const executor = executorProvider !== undefined\n            ? executorProvider.getExecutor()\n            : NOOP_QUERY_EXECUTOR;\n        return this.#props.plugins !== undefined\n            ? executor.withPlugins(this.#props.plugins)\n            : executor;\n    }\n    #toOperationNode(executor) {\n        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);\n    }\n    #compile(executor) {\n        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);\n    }\n}\nexport function createRawBuilder(props) {\n    return new RawBuilderImpl(props);\n}\nclass AliasedRawBuilderImpl {\n    #rawBuilder;\n    #alias;\n    constructor(rawBuilder, alias) {\n        this.#rawBuilder = rawBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#rawBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get rawBuilder() {\n        return this.#rawBuilder;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#rawBuilder.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;;;;;;AAC5C;AACA;AACA;AACA;AACA;;;;;;;;;;;IAEI,sCAqCA,4CAQA,gDAGA;AAjDJ,MAAM;IAKF,IAAI,iBAAiB;QACjB,OAAO;IACX;IACA,IAAI,eAAe;QACf,OAAO;IACX;IACA,GAAG,KAAK,EAAE;QACN,OAAO,IAAI,sBAAsB,IAAI,EAAE;IAC3C;IACA,UAAU;QACN,OAAO,IAAI,eAAe;gMAAK,IAAI,EAAC,OAAR;QAAe;IAC/C;IACA,WAAW;QACP,OAAO,IAAI,gMAAe,IAAI,EAAC;IACnC;IACA,WAAW,MAAM,EAAE;QACf,OAAO,IAAI,eAAe;gMACnB,IAAI,EAAC,OAAR;YACA,SAAS,iLAAA,IAAI,EAAC,QAAO,OAAO,KAAK,YAC3B,IAAA,6KAAM,EAAC;mBAAI,iLAAA,IAAI,EAAC,QAAO,OAAO;gBAAE;aAAO,IACvC,IAAA,6KAAM,EAAC;gBAAC;aAAO;QACzB;IACJ;IACA,kBAAkB;QACd,OAAO,kLAAA,IAAI,EAAC,kBAAA,sBAAL,IAAI,EAAkB,kLAAA,IAAI,EAAC,cAAA,kBAAL,IAAI;IACrC;IACA,QAAQ,gBAAgB,EAAE;QACtB,OAAO,kLAAA,IAAI,EAAC,UAAA,cAAL,IAAI,EAAU,kLAAA,IAAI,EAAC,cAAA,kBAAL,IAAI,EAAc;IAC3C;IACA,MAAM,QAAQ,gBAAgB,EAAE;QAC5B,MAAM,WAAW,kLAAA,IAAI,EAAC,cAAA,kBAAL,IAAI,EAAc;QACnC,OAAO,SAAS,YAAY,CAAC,kLAAA,IAAI,EAAC,UAAA,cAAL,IAAI,EAAU;IAC/C;IAnCA,YAAY,KAAK,CAAE;QAoCnB,yLAAA;QAQA,yLAAA;QAGA,yLAAA;QAhDA,wLAAA;;mBAAA,KAAA;;+LAES,QAAS,IAAA,6KAAM,EAAC;IACzB;AAgDJ;AAdI,SAAA,YAAa,gBAAgB;IACzB,MAAM,WAAW,qBAAqB,YAChC,iBAAiB,WAAW,KAC5B,iNAAmB;IACzB,OAAO,iLAAA,IAAI,EAAC,QAAO,OAAO,KAAK,YACzB,SAAS,WAAW,CAAC,iLAAA,IAAI,EAAC,QAAO,OAAO,IACxC;AACV;AACA,SAAA,gBAAiB,QAAQ;IACrB,OAAO,SAAS,cAAc,CAAC,iLAAA,IAAI,EAAC,QAAO,OAAO,EAAE,iLAAA,IAAI,EAAC,QAAO,OAAO;AAC3E;AACA,SAAA,QAAS,QAAQ;IACb,OAAO,SAAS,YAAY,CAAC,kLAAA,IAAI,EAAC,kBAAA,sBAAL,IAAI,EAAkB,WAAW,iLAAA,IAAI,EAAC,QAAO,OAAO;AACrF;AAEG,SAAS,iBAAiB,KAAK;IAClC,OAAO,IAAI,eAAe;AAC9B;IAEI,2CACA;AAFJ,MAAM;IAOF,IAAI,aAAa;QACb,wLAAO,IAAI,EAAC;IAChB;IACA,IAAI,QAAQ;QACR,wLAAO,IAAI,EAAC;IAChB;IACA,IAAI,aAAa;QACb,wLAAO,IAAI,EAAC;IAChB;IACA,kBAAkB;QACd,OAAO,2LAAS,CAAC,MAAM,CAAC,iLAAA,IAAI,EAAC,aAAY,eAAe,IAAI,IAAA,qNAAqB,mLAAC,IAAI,EAAC,WACjF,iLAAA,IAAI,EAAC,QAAO,eAAe,KAC3B,qMAAc,CAAC,MAAM,kLAAC,IAAI,EAAC;IACrC;IAjBA,YAAY,UAAU,EAAE,KAAK,CAAE;QAF/B,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;+LAES,aAAc;+LACd,QAAS;IAClB;AAeJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5654, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/raw-builder/sql.js"],"sourcesContent":["/// <reference types=\"./sql.d.ts\" />\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseValueExpression } from '../parser/value-parser.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createRawBuilder } from './raw-builder.js';\nexport const sql = Object.assign((sqlFragments, ...parameters) => {\n    return createRawBuilder({\n        queryId: createQueryId(),\n        rawNode: RawNode.create(sqlFragments, parameters?.map(parseParameter) ?? []),\n    });\n}, {\n    ref(columnReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseStringReference(columnReference)),\n        });\n    },\n    val(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseValueExpression(value)),\n        });\n    },\n    value(value) {\n        return this.val(value);\n    },\n    table(tableReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseTable(tableReference)),\n        });\n    },\n    id(...ids) {\n        const fragments = new Array(ids.length + 1).fill('.');\n        fragments[0] = '';\n        fragments[fragments.length - 1] = '';\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.create(fragments, ids.map(IdentifierNode.create)),\n        });\n    },\n    lit(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(ValueNode.createImmediate(value)),\n        });\n    },\n    literal(value) {\n        return this.lit(value);\n    },\n    raw(sql) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithSql(sql),\n        });\n    },\n    join(array, separator = sql `, `) {\n        const nodes = new Array(Math.max(2 * array.length - 1, 0));\n        const sep = separator.toOperationNode();\n        for (let i = 0; i < array.length; ++i) {\n            nodes[2 * i] = parseParameter(array[i]);\n            if (i !== array.length - 1) {\n                nodes[2 * i + 1] = sep;\n            }\n        }\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChildren(nodes),\n        });\n    },\n});\nfunction parseParameter(param) {\n    if (isOperationNodeSource(param)) {\n        return param.toOperationNode();\n    }\n    return parseValueExpression(param);\n}\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AACO,MAAM,MAAM,OAAO,MAAM,CAAC,SAAC;qCAAiB;QAAA;;QAGL;IAF1C,OAAO,IAAA,gMAAgB,EAAC;QACpB,SAAS,IAAA,gLAAa;QACtB,SAAS,uLAAO,CAAC,MAAM,CAAC,cAAc,CAAA,kBAAA,uBAAA,iCAAA,WAAY,GAAG,CAAC,6BAAhB,6BAAA,kBAAmC,EAAE;IAC/E;AACJ,GAAG;IACC,KAAI,eAAe;QACf,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,eAAe,CAAC,IAAA,iMAAoB,EAAC;QAC1D;IACJ;IACA,KAAI,KAAK;QACL,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,eAAe,CAAC,IAAA,6LAAoB,EAAC;QAC1D;IACJ;IACA,OAAM,KAAK;QACP,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,OAAM,cAAc;QAChB,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,eAAe,CAAC,IAAA,mLAAU,EAAC;QAChD;IACJ;IACA;QAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,MAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YAAG,IAAH,QAAA,SAAA,CAAA,KAAM;;QACL,MAAM,YAAY,IAAI,MAAM,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC;QACjD,SAAS,CAAC,EAAE,GAAG;QACf,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE,GAAG;QAClC,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,MAAM,CAAC,WAAW,IAAI,GAAG,CAAC,qMAAc,CAAC,MAAM;QACpE;IACJ;IACA,KAAI,KAAK;QACL,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,eAAe,CAAC,2LAAS,CAAC,eAAe,CAAC;QAC/D;IACJ;IACA,SAAQ,KAAK;QACT,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB;IACA,KAAI,GAAG;QACH,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,aAAa,CAAC;QACnC;IACJ;IACA,MAAK,KAAK;YAAE,YAAA,iEAAY;QACpB,MAAM,QAAQ,IAAI,MAAM,KAAK,GAAG,CAAC,IAAI,MAAM,MAAM,GAAG,GAAG;QACvD,MAAM,MAAM,UAAU,eAAe;QACrC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,EAAE,EAAG;YACnC,KAAK,CAAC,IAAI,EAAE,GAAG,eAAe,KAAK,CAAC,EAAE;YACtC,IAAI,MAAM,MAAM,MAAM,GAAG,GAAG;gBACxB,KAAK,CAAC,IAAI,IAAI,EAAE,GAAG;YACvB;QACJ;QACA,OAAO,IAAA,gMAAgB,EAAC;YACpB,SAAS,IAAA,gLAAa;YACtB,SAAS,uLAAO,CAAC,kBAAkB,CAAC;QACxC;IACJ;AACJ;AACA,SAAS,eAAe,KAAK;IACzB,IAAI,IAAA,qNAAqB,EAAC,QAAQ;QAC9B,OAAO,MAAM,eAAe;IAChC;IACA,OAAO,IAAA,6LAAoB,EAAC;AAChC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5772, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/driver/default-connection-provider.js"],"sourcesContent":["/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n"],"names":[],"mappings":"AAAA,4DAA4D;;;;;;;;;;;IAExD;AADG,MAAM;IAKT,MAAM,kBAAkB,QAAQ,EAAE;QAC9B,MAAM,aAAa,MAAM,iLAAA,IAAI,EAAC,SAAQ,iBAAiB;QACvD,IAAI;YACA,OAAO,MAAM,SAAS;QAC1B,SACQ;YACJ,MAAM,iLAAA,IAAI,EAAC,SAAQ,iBAAiB,CAAC;QACzC;IACJ;IAXA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,SAAU;IACnB;AAUJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5805, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/driver/runtime-driver.js"],"sourcesContent":["/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    savepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.savepoint) {\n            return this.#driver.savepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `savepoint` method is not supported by this driver');\n    }\n    rollbackToSavepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.rollbackToSavepoint) {\n            return this.#driver.rollbackToSavepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `rollbackToSavepoint` method is not supported by this driver');\n    }\n    releaseSavepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.releaseSavepoint) {\n            return this.#driver.releaseSavepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `releaseSavepoint` method is not supported by this driver');\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        const streamQuery = connection.streamQuery;\n        const dis = this;\n        connection.executeQuery = async (compiledQuery) => {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                caughtError = error;\n                await dis.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await dis.#logQuery(compiledQuery, startTime);\n                }\n            }\n        };\n        connection.streamQuery = async function* (compiledQuery, chunkSize) {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                for await (const result of streamQuery.call(connection, compiledQuery, chunkSize)) {\n                    yield result;\n                }\n            }\n            catch (error) {\n                caughtError = error;\n                await dis.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await dis.#logQuery(compiledQuery, startTime, true);\n                }\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime, isStream = false) {\n        await this.#log.query(() => ({\n            level: 'query',\n            isStream,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5999, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/driver/single-connection-provider.js"],"sourcesContent":["/// <reference types=\"./single-connection-provider.d.ts\" />\nconst ignoreError = () => { };\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise.catch(ignoreError);\n        }\n        // `#runningPromise` must be set to undefined before it's\n        // resolved or rejected. Otherwise the while loop above\n        // will misbehave.\n        this.#runningPromise = this.#run(consumer).finally(() => {\n            this.#runningPromise = undefined;\n        });\n        return this.#runningPromise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n"],"names":[],"mappings":"AAAA,2DAA2D;;;;;;;;;;;;;;;AAC3D,MAAM,cAAc,KAAQ;IAExB,2CACA,+CAkBM;AApBH,MAAM;IAMT,MAAM,kBAAkB,QAAQ,EAAE;QAC9B,uLAAO,IAAI,EAAC,iBAAiB;YACzB,MAAM,iLAAA,IAAI,EAAC,iBAAgB,KAAK,CAAC;QACrC;QACA,yDAAyD;QACzD,uDAAuD;QACvD,kBAAkB;+LACb,iBAAkB,kLAAA,IAAI,EAAC,MAAA,UAAL,IAAI,EAAM,UAAU,OAAO,CAAC;mMAC1C,iBAAkB;QAC3B;QACA,wLAAO,IAAI,EAAC;IAChB;IAdA,YAAY,UAAU,CAAE;QAexB,8DAA8D;QAC9D,4BAA4B;QAC5B,yLAAM;QAnBN,wLAAA;;mBAAA,KAAA;;QACA,wLAAA;;mBAAA,KAAA;;+LAES,aAAc;IACvB;AAkBJ;AAHI,eAAA,IAAW,MAAM;IACb,OAAO,MAAM,wLAAO,IAAI,EAAC;AAC7B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6051, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/driver/driver.js"],"sourcesContent":["/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ACCESS_MODES = ['read only', 'read write'];\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n    'snapshot',\n];\nexport function validateTransactionSettings(settings) {\n    if (settings.accessMode &&\n        !TRANSACTION_ACCESS_MODES.includes(settings.accessMode)) {\n        throw new Error(`invalid transaction access mode ${settings.accessMode}`);\n    }\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n"],"names":[],"mappings":"AAAA,uCAAuC;;;;;;;;;AAChC,MAAM,2BAA2B;IAAC;IAAa;CAAa;AAC5D,MAAM,+BAA+B;IACxC;IACA;IACA;IACA;IACA;CACH;AACM,SAAS,4BAA4B,QAAQ;IAChD,IAAI,SAAS,UAAU,IACnB,CAAC,yBAAyB,QAAQ,CAAC,SAAS,UAAU,GAAG;QACzD,MAAM,IAAI,MAAM,AAAC,mCAAsD,OAApB,SAAS,UAAU;IAC1E;IACA,IAAI,SAAS,cAAc,IACvB,CAAC,6BAA6B,QAAQ,CAAC,SAAS,cAAc,GAAG;QACjE,MAAM,IAAI,MAAM,AAAC,uCAA8D,OAAxB,SAAS,cAAc;IAClF;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6083, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/kysely.js"],"sourcesContent":["/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject, isUndefined } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { validateTransactionSettings, } from './driver/driver.js';\nimport { createFunctionModule, } from './query-builder/function-module.js';\nimport { Log } from './util/log.js';\nimport { createQueryId } from './util/query-id.js';\nimport { isCompilable } from './util/compilable.js';\nimport { CaseBuilder } from './query-builder/case-builder.js';\nimport { CaseNode } from './operation-node/case-node.js';\nimport { parseExpression } from './parser/expression-parser.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { provideControlledConnection, } from './util/provide-controlled-connection.js';\nimport { logOnce } from './util/log-once.js';\n// @ts-ignore\nSymbol.asyncDispose ??= Symbol('Symbol.asyncDispose');\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains its own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has a \"person\" table:\n *\n * ```ts\n * import * as Sqlite from 'better-sqlite3'\n * import { type Generated, Kysely, SqliteDialect } from 'kysely'\n *\n * interface Database {\n *   person: {\n *     id: Generated<number>\n *     first_name: string\n *     last_name: string | null\n *   }\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new CaseBuilder({\n            node: CaseNode.create(isUndefined(value) ? undefined : parseExpression(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write somewhat type-safe function\n     * calls.\n     *\n     * ```ts\n     * const { count } = db.fn\n     *\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select([\n     *     'id',\n     *     count('pet.id').as('person_count'),\n     *   ])\n     *   .groupBy('person.id')\n     *   .having(count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"person_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     *\n     * Why \"somewhat\" type-safe? Because the function calls are not bound to the\n     * current query context. They allow you to reference columns and tables that\n     * are not in the current query. E.g. remove the `innerJoin` from the previous\n     * query and TypeScript won't even complain.\n     *\n     * If you want to make the function calls fully type-safe, you can use the\n     * {@link ExpressionBuilder.fn} getter for a query context-aware, stricter {@link FunctionModule}.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     */\n    get fn() {\n        return createFunctionModule();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws an exception,\n     * 1. the exception is caught,\n     * 2. the transaction is rolled back, and\n     * 3. the exception is thrown again.\n     * Otherwise the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * To run a controlled transaction, allowing you to commit and rollback manually,\n     * use {@link startTransaction} instead.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an exception is thrown inside\n     * the callback passed to the `execute` method,\n     * 1. the exception is caught,\n     * 2. the transaction is rolled back, and\n     * 3. the exception is thrown again.\n     * Otherwise the transaction is committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     *\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     *\n     * async function doStuff(kysely: typeof db) {\n     *   // ...\n     * }\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Creates a {@link ControlledTransactionBuilder} that can be used to run queries inside a controlled transaction.\n     *\n     * The returned {@link ControlledTransactionBuilder} can be used to configure the transaction.\n     * The {@link ControlledTransactionBuilder.execute} method can then be called\n     * to start the transaction and return a {@link ControlledTransaction}.\n     *\n     * A {@link ControlledTransaction} allows you to commit and rollback manually,\n     * execute savepoint commands. It extends {@link Transaction} which extends {@link Kysely},\n     * so you can run queries inside the transaction. Once the transaction is committed,\n     * or rolled back, it can't be used anymore - all queries will throw an error.\n     * This is to prevent accidentally running queries outside the transaction - where\n     * atomicity is not guaranteed anymore.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Controlled transaction\", 11) -->\n     *\n     * A controlled transaction allows you to commit and rollback manually, execute\n     * savepoint commands, and queries in general.\n     *\n     * In this example we start a transaction, use it to insert two rows and then commit\n     * the transaction. If an error is thrown, we catch it and rollback the transaction.\n     *\n     * ```ts\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   const catto = await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirstOrThrow()\n     *\n     *   await trx.commit().execute()\n     *\n     *   // ...\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     * ```\n     *\n     * <!-- siteExample(\"transactions\", \"Controlled transaction /w savepoints\", 12) -->\n     *\n     * A controlled transaction allows you to commit and rollback manually, execute\n     * savepoint commands, and queries in general.\n     *\n     * In this example we start a transaction, insert a person, create a savepoint,\n     * try inserting a toy and a pet, and if an error is thrown, we rollback to the\n     * savepoint. Eventually we release the savepoint, insert an audit record and\n     * commit the transaction. If an error is thrown, we catch it and rollback the\n     * transaction.\n     *\n     * ```ts\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   const jennifer = await trx\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     *   try {\n     *     const catto = await trxAfterJennifer\n     *       .insertInto('pet')\n     *       .values({\n     *         owner_id: jennifer.id,\n     *         name: 'Catto',\n     *         species: 'cat',\n     *       })\n     *       .returning('id')\n     *       .executeTakeFirstOrThrow()\n     *\n     *     await trxAfterJennifer\n     *       .insertInto('toy')\n     *       .values({ name: 'Bone', price: 1.99, pet_id: catto.id })\n     *       .execute()\n     *   } catch (error) {\n     *     await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     *   }\n     *\n     *   await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()\n     *\n     *   await trx.insertInto('audit').values({ action: 'added Jennifer' }).execute()\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     * ```\n     */\n    startTransaction() {\n        return new ControlledTransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     *\n     * async function doStuff(kysely: typeof db) {\n     *   // ...\n     * }\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0004-splitting-query-building-and-execution.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, \n    // TODO: remove this in the future. deprecated in  0.28.x\n    queryId) {\n        if (queryId !== undefined) {\n            logOnce('Passing `queryId` in `db.executeQuery` is deprecated and will result in a compile-time error in the future.');\n        }\n        const compiledQuery = isCompilable(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery);\n    }\n    async [Symbol.asyncDispose]() {\n        await this.destroy();\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setAccessMode(accessMode) {\n        return new TransactionBuilder({\n            ...this.#props,\n            accessMode,\n        });\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, accessMode, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel, accessMode };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            let transactionBegun = false;\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                transactionBegun = true;\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                if (transactionBegun) {\n                    await this.#props.driver.rollbackTransaction(connection);\n                }\n                throw error;\n            }\n        });\n    }\n}\nexport class ControlledTransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setAccessMode(accessMode) {\n        return new ControlledTransactionBuilder({\n            ...this.#props,\n            accessMode,\n        });\n    }\n    setIsolationLevel(isolationLevel) {\n        return new ControlledTransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute() {\n        const { isolationLevel, accessMode, ...props } = this.#props;\n        const settings = { isolationLevel, accessMode };\n        validateTransactionSettings(settings);\n        const connection = await provideControlledConnection(this.#props.executor);\n        await this.#props.driver.beginTransaction(connection.connection, settings);\n        return new ControlledTransaction({\n            ...props,\n            connection,\n            executor: this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection.connection)),\n        });\n    }\n}\nexport class ControlledTransaction extends Transaction {\n    #props;\n    #compileQuery;\n    #state;\n    constructor(props) {\n        const state = { isCommitted: false, isRolledBack: false };\n        props = {\n            ...props,\n            executor: new NotCommittedOrRolledBackAssertingExecutor(props.executor, state),\n        };\n        const { connection, ...transactionProps } = props;\n        super(transactionProps);\n        this.#props = freeze(props);\n        this.#state = state;\n        const queryId = createQueryId();\n        this.#compileQuery = (node) => props.executor.compileQuery(node, queryId);\n    }\n    get isCommitted() {\n        return this.#state.isCommitted;\n    }\n    get isRolledBack() {\n        return this.#state.isRolledBack;\n    }\n    /**\n     * Commits the transaction.\n     *\n     * See {@link rollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   await doSomething(trx)\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     *\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    commit() {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.commitTransaction(this.#props.connection.connection);\n            this.#state.isCommitted = true;\n            this.#props.connection.release();\n        });\n    }\n    /**\n     * Rolls back the transaction.\n     *\n     * See {@link commit} and {@link rollbackToSavepoint}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   await doSomething(trx)\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     *\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    rollback() {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.rollbackTransaction(this.#props.connection.connection);\n            this.#state.isRolledBack = true;\n            this.#props.connection.release();\n        });\n    }\n    /**\n     * Creates a savepoint with a given name.\n     *\n     * See {@link rollbackToSavepoint} and {@link releaseSavepoint}.\n     *\n     * For a type-safe experience, you should use the returned instance from now on.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    savepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.savepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    /**\n     * Rolls back to a savepoint with a given name.\n     *\n     * See {@link savepoint} and {@link releaseSavepoint}.\n     *\n     * You must use the same instance returned by {@link savepoint}, or\n     * escape the type-check by using `as any`.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    rollbackToSavepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.rollbackToSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    /**\n     * Releases a savepoint with a given name.\n     *\n     * See {@link savepoint} and {@link rollbackToSavepoint}.\n     *\n     * You must use the same instance returned by {@link savepoint}, or\n     * escape the type-check by using `as any`.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()\n     *\n     * await doSomethingElse(trx)\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * async function doSomethingElse(kysely: Kysely<Database>) {}\n     * ```\n     */\n    releaseSavepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.releaseSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    withPlugin(plugin) {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    withSchema(schema) {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new ControlledTransaction({ ...this.#props });\n    }\n}\nexport class Command {\n    #cb;\n    constructor(cb) {\n        this.#cb = cb;\n    }\n    /**\n     * Executes the command.\n     */\n    async execute() {\n        return await this.#cb();\n    }\n}\nfunction assertNotCommittedOrRolledBack(state) {\n    if (state.isCommitted) {\n        throw new Error('Transaction is already committed');\n    }\n    if (state.isRolledBack) {\n        throw new Error('Transaction is already rolled back');\n    }\n}\n/**\n * An executor wrapper that asserts that the transaction state is not committed\n * or rolled back when a query is executed.\n *\n * @internal\n */\nclass NotCommittedOrRolledBackAssertingExecutor {\n    #executor;\n    #state;\n    constructor(executor, state) {\n        if (executor instanceof NotCommittedOrRolledBackAssertingExecutor) {\n            this.#executor = executor.#executor;\n        }\n        else {\n            this.#executor = executor;\n        }\n        this.#state = state;\n    }\n    get adapter() {\n        return this.#executor.adapter;\n    }\n    get plugins() {\n        return this.#executor.plugins;\n    }\n    transformQuery(node, queryId) {\n        return this.#executor.transformQuery(node, queryId);\n    }\n    compileQuery(node, queryId) {\n        return this.#executor.compileQuery(node, queryId);\n    }\n    provideConnection(consumer) {\n        return this.#executor.provideConnection(consumer);\n    }\n    executeQuery(compiledQuery) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return this.#executor.executeQuery(compiledQuery);\n    }\n    stream(compiledQuery, chunkSize) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return this.#executor.stream(compiledQuery, chunkSize);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withConnectionProvider(connectionProvider), this.#state);\n    }\n    withPlugin(plugin) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugin(plugin), this.#state);\n    }\n    withPlugins(plugins) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugins(plugins), this.#state);\n    }\n    withPluginAtFront(plugin) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPluginAtFront(plugin), this.#state);\n    }\n    withoutPlugins() {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withoutPlugins(), this.#state);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}