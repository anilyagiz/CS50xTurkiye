(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "E",
    ()=>ENV,
    "a",
    ()=>isProduction,
    "b",
    ()=>isDevelopment,
    "c",
    ()=>getBooleanEnvVar,
    "e",
    ()=>env,
    "g",
    ()=>getEnvVar,
    "i",
    ()=>isTest
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
const _envShim = /* @__PURE__ */ Object.create(null);
const _getEnv = (useShim)=>{
    var _globalThis_process, //@ts-expect-error
    _globalThis_Deno;
    return ((_globalThis_process = globalThis.process) === null || _globalThis_process === void 0 ? void 0 : _globalThis_process.env) || ((_globalThis_Deno = globalThis.Deno) === null || _globalThis_Deno === void 0 ? void 0 : _globalThis_Deno.env.toObject()) || //@ts-expect-error
    globalThis.__env__ || (useShim ? _envShim : globalThis);
};
const env = new Proxy(_envShim, {
    get (_, prop) {
        const env2 = _getEnv();
        var _env2_prop;
        return (_env2_prop = env2[prop]) !== null && _env2_prop !== void 0 ? _env2_prop : _envShim[prop];
    },
    has (_, prop) {
        const env2 = _getEnv();
        return prop in env2 || prop in _envShim;
    },
    set (_, prop, value) {
        const env2 = _getEnv(true);
        env2[prop] = value;
        return true;
    },
    deleteProperty (_, prop) {
        if (!prop) {
            return false;
        }
        const env2 = _getEnv(true);
        delete env2[prop];
        return true;
    },
    ownKeys () {
        const env2 = _getEnv(true);
        return Object.keys(env2);
    }
});
function toBoolean(val) {
    return val ? val !== "false" : false;
}
const nodeENV = typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env && ("TURBOPACK compile-time value", "development") || "";
const isProduction = nodeENV === "production";
const isDevelopment = nodeENV === "dev" || nodeENV === "development";
const isTest = ()=>nodeENV === "test" || toBoolean(env.TEST);
function getEnvVar(key, fallback) {
    if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env) {
        var _process_env_key;
        return (_process_env_key = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env[key]) !== null && _process_env_key !== void 0 ? _process_env_key : fallback;
    }
    if (typeof Deno !== "undefined") {
        var _Deno_env_get;
        return (_Deno_env_get = Deno.env.get(key)) !== null && _Deno_env_get !== void 0 ? _Deno_env_get : fallback;
    }
    if (typeof Bun !== "undefined") {
        var _Bun_env_key;
        return (_Bun_env_key = Bun.env[key]) !== null && _Bun_env_key !== void 0 ? _Bun_env_key : fallback;
    }
    return fallback;
}
function getBooleanEnvVar(key) {
    let fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    const value = getEnvVar(key);
    if (!value) return fallback;
    return value !== "0" && value.toLowerCase() !== "false" && value !== "";
}
const ENV = {
    get BETTER_AUTH_TELEMETRY_ENDPOINT () {
        return getEnvVar("BETTER_AUTH_TELEMETRY_ENDPOINT", "https://telemetry.better-auth.com/v1/track");
    }
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CkGsgrvv.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "u",
    ()=>useAuthQuery
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$atom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/nanostores/atom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$lifecycle$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/nanostores/lifecycle/index.js [app-client] (ecmascript)");
;
const isServer = typeof window === "undefined";
const useAuthQuery = (initializedAtom, path, $fetch, options)=>{
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$atom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atom"])({
        data: null,
        error: null,
        isPending: true,
        isRefetching: false,
        refetch: (queryParams)=>{
            return fn(queryParams);
        }
    });
    const fn = (queryParams)=>{
        const opts = typeof options === "function" ? options({
            data: value.get().data,
            error: value.get().error,
            isPending: value.get().isPending
        }) : options;
        $fetch(path, {
            ...opts,
            query: {
                ...opts === null || opts === void 0 ? void 0 : opts.query,
                ...queryParams === null || queryParams === void 0 ? void 0 : queryParams.query
            },
            async onSuccess (context) {
                var _opts_onSuccess;
                value.set({
                    data: context.data,
                    error: null,
                    isPending: false,
                    isRefetching: false,
                    refetch: value.value.refetch
                });
                await (opts === null || opts === void 0 ? void 0 : (_opts_onSuccess = opts.onSuccess) === null || _opts_onSuccess === void 0 ? void 0 : _opts_onSuccess.call(opts, context));
            },
            async onError (context) {
                var _request_retry, _opts_onError;
                const { request } = context;
                const retryAttempts = typeof request.retry === "number" ? request.retry : (_request_retry = request.retry) === null || _request_retry === void 0 ? void 0 : _request_retry.attempts;
                const retryAttempt = request.retryAttempt || 0;
                if (retryAttempts && retryAttempt < retryAttempts) return;
                value.set({
                    error: context.error,
                    data: null,
                    isPending: false,
                    isRefetching: false,
                    refetch: value.value.refetch
                });
                await (opts === null || opts === void 0 ? void 0 : (_opts_onError = opts.onError) === null || _opts_onError === void 0 ? void 0 : _opts_onError.call(opts, context));
            },
            async onRequest (context) {
                var _opts_onRequest;
                const currentValue = value.get();
                value.set({
                    isPending: currentValue.data === null,
                    data: currentValue.data,
                    error: null,
                    isRefetching: true,
                    refetch: value.value.refetch
                });
                await (opts === null || opts === void 0 ? void 0 : (_opts_onRequest = opts.onRequest) === null || _opts_onRequest === void 0 ? void 0 : _opts_onRequest.call(opts, context));
            }
        }).catch((error)=>{
            value.set({
                error,
                data: null,
                isPending: false,
                isRefetching: false,
                refetch: value.value.refetch
            });
        });
    };
    initializedAtom = Array.isArray(initializedAtom) ? initializedAtom : [
        initializedAtom
    ];
    let isMounted = false;
    for (const initAtom of initializedAtom){
        initAtom.subscribe(()=>{
            if (isServer) {
                return;
            }
            if (isMounted) {
                fn();
            } else {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$lifecycle$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["onMount"])(value, ()=>{
                    setTimeout(()=>{
                        fn();
                    }, 0);
                    isMounted = true;
                    return ()=>{
                        value.off();
                        initAtom.off();
                    };
                });
            }
        });
    }
    return value;
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "B",
    ()=>BetterAuthError,
    "M",
    ()=>MissingDependencyError
]);
class BetterAuthError extends Error {
    constructor(message, cause){
        super(message);
        this.name = "BetterAuthError";
        this.message = message;
        this.cause = cause;
        this.stack = "";
    }
}
class MissingDependencyError extends BetterAuthError {
    constructor(pkgName){
        super('The package "'.concat(pkgName, '" is required. Make sure it is installed.'), pkgName);
    }
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>getDate
]);
const getDate = function(span) {
    let unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "ms";
    return new Date(Date.now() + (unit === "sec" ? span * 1e3 : span));
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>logger,
    "c",
    ()=>createLogger,
    "l",
    ()=>levels,
    "s",
    ()=>shouldPublishLog
]);
const levels = [
    "info",
    "success",
    "warn",
    "error",
    "debug"
];
function shouldPublishLog(currentLogLevel, logLevel) {
    return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);
}
const colors = {
    reset: "\x1B[0m",
    bright: "\x1B[1m",
    dim: "\x1B[2m",
    fg: {
        red: "\x1B[31m",
        green: "\x1B[32m",
        yellow: "\x1B[33m",
        blue: "\x1B[34m",
        magenta: "\x1B[35m"
    }
};
const levelColors = {
    info: colors.fg.blue,
    success: colors.fg.green,
    warn: colors.fg.yellow,
    error: colors.fg.red,
    debug: colors.fg.magenta
};
const formatMessage = (level, message)=>{
    const timestamp = /* @__PURE__ */ new Date().toISOString();
    return "".concat(colors.dim).concat(timestamp).concat(colors.reset, " ").concat(levelColors[level]).concat(level.toUpperCase()).concat(colors.reset, " ").concat(colors.bright, "[Better Auth]:").concat(colors.reset, " ").concat(message);
};
const createLogger = (options)=>{
    const enabled = (options === null || options === void 0 ? void 0 : options.disabled) !== true;
    var _options_level;
    const logLevel = (_options_level = options === null || options === void 0 ? void 0 : options.level) !== null && _options_level !== void 0 ? _options_level : "error";
    const LogFunc = function(level, message) {
        let args = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        if (!enabled || !shouldPublishLog(logLevel, level)) {
            return;
        }
        const formattedMessage = formatMessage(level, message);
        if (!options || typeof options.log !== "function") {
            if (level === "error") {
                console.error(formattedMessage, ...args);
            } else if (level === "warn") {
                console.warn(formattedMessage, ...args);
            } else {
                console.log(formattedMessage, ...args);
            }
            return;
        }
        options.log(level === "success" ? "info" : level, message, ...args);
    };
    const logger2 = Object.fromEntries(levels.map((level)=>[
            level,
            function() {
                for(var _len = arguments.length, _tmp = new Array(_len), _key = 0; _key < _len; _key++){
                    _tmp[_key] = arguments[_key];
                }
                let [message, ...args] = _tmp;
                return LogFunc(level, message, args);
            }
        ]));
    return {
        ...logger2,
        get level () {
            return logLevel;
        }
    };
};
const logger = createLogger();
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "s",
    ()=>safeJSONParse
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
;
function safeJSONParse(data) {
    function reviver(_, value) {
        if (typeof value === "string") {
            const iso8601Regex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$/;
            if (iso8601Regex.test(value)) {
                const date = new Date(value);
                if (!isNaN(date.getTime())) {
                    return date;
                }
            }
        }
        return value;
    }
    try {
        if (typeof data !== "string") {
            return data;
        }
        return JSON.parse(data, reviver);
    } catch (e) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].error("Error parsing JSON", {
            error: e
        });
        return null;
    }
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CuS_eDdK.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>getBaseURL,
    "b",
    ()=>getHost,
    "c",
    ()=>getProtocol,
    "g",
    ()=>getOrigin
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
;
;
function checkHasPath(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.pathname !== "/";
    } catch (error) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Invalid base URL: ".concat(url, ". Please provide a valid base URL."));
    }
}
function withPath(url) {
    let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "/api/auth";
    const hasPath = checkHasPath(url);
    if (hasPath) {
        return url;
    }
    path = path.startsWith("/") ? path : "/".concat(path);
    return "".concat(url.replace(/\/+$/, "")).concat(path);
}
function getBaseURL(url, path, request) {
    if (url) {
        return withPath(url, path);
    }
    const fromEnv = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].NEXT_PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].NUXT_PUBLIC_BETTER_AUTH_URL || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].NUXT_PUBLIC_AUTH_URL || (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BASE_URL !== "/" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BASE_URL : void 0);
    if (fromEnv) {
        return withPath(fromEnv, path);
    }
    const fromRequest = request === null || request === void 0 ? void 0 : request.headers.get("x-forwarded-host");
    const fromRequestProto = request === null || request === void 0 ? void 0 : request.headers.get("x-forwarded-proto");
    if (fromRequest && fromRequestProto) {
        return withPath("".concat(fromRequestProto, "://").concat(fromRequest), path);
    }
    if (request) {
        const url2 = getOrigin(request.url);
        if (!url2) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Could not get origin from request. Please provide a valid base URL.");
        }
        return withPath(url2, path);
    }
    if (typeof window !== "undefined" && window.location) {
        return withPath(window.location.origin, path);
    }
    return void 0;
}
function getOrigin(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.origin;
    } catch (error) {
        return null;
    }
}
function getProtocol(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.protocol;
    } catch (error) {
        return null;
    }
}
function getHost(url) {
    try {
        const parsedUrl = new URL(url);
        return parsedUrl.host;
    } catch (error) {
        return url;
    }
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>parseCookies,
    "b",
    ()=>setCookieCache,
    "c",
    ()=>createCookieGetter,
    "d",
    ()=>deleteSessionCookie,
    "e",
    ()=>setCookieToHeader,
    "f",
    ()=>getSessionCookie,
    "g",
    ()=>getCookies,
    "h",
    ()=>getCookieCache,
    "m",
    ()=>ms,
    "p",
    ()=>parseSetCookieHeader,
    "s",
    ()=>setSessionCookie
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CuS_eDdK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
//#region src/index.ts
const s = 1e3;
const m = s * 60;
const h = m * 60;
const d = h * 24;
const w = d * 7;
const y = d * 365.25;
const mo = y / 12;
function ms(value, options) {
    if (typeof value === "string") return parse(value);
    else if (typeof value === "number") return format(value);
    throw new Error("Value provided to ms() must be a string or number. value=".concat(JSON.stringify(value)));
}
/**
* Parse the given string and return milliseconds.
*
* @param str - A string to parse to milliseconds
* @returns The parsed value in milliseconds, or `NaN` if the string can't be
* parsed
*/ function parse(str) {
    if (typeof str !== "string" || str.length === 0 || str.length > 100) throw new Error("Value provided to ms.parse() must be a string with length between 1 and 99. value=".concat(JSON.stringify(str)));
    const match = RegExp("^(?<value>-?\\d*\\.?\\d+) *(?<unit>milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|months?|mo|years?|yrs?|y)?$", "i").exec(str);
    if (!(match === null || match === void 0 ? void 0 : match.groups)) return NaN;
    const { value, unit = "ms" } = match.groups;
    const n = parseFloat(value);
    const matchUnit = unit.toLowerCase();
    /* istanbul ignore next - istanbul doesn't understand, but thankfully the TypeScript the exhaustiveness check in the default case keeps us type safe here */ switch(matchUnit){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "months":
        case "month":
        case "mo":
            return n * mo;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            throw new Error('Unknown unit "'.concat(matchUnit, '" provided to ms.parse(). value=').concat(JSON.stringify(str)));
    }
}
/**
* Short format for `ms`.
*/ function fmtShort(ms$1) {
    const msAbs = Math.abs(ms$1);
    if (msAbs >= y) return "".concat(Math.round(ms$1 / y), "y");
    if (msAbs >= mo) return "".concat(Math.round(ms$1 / mo), "mo");
    if (msAbs >= w) return "".concat(Math.round(ms$1 / w), "w");
    if (msAbs >= d) return "".concat(Math.round(ms$1 / d), "d");
    if (msAbs >= h) return "".concat(Math.round(ms$1 / h), "h");
    if (msAbs >= m) return "".concat(Math.round(ms$1 / m), "m");
    if (msAbs >= s) return "".concat(Math.round(ms$1 / s), "s");
    return "".concat(ms$1, "ms");
}
/**
* Format the given integer as a string.
*
* @param ms - milliseconds
* @param options - Options for the conversion
* @returns The formatted string
*/ function format(ms$1, options) {
    if (typeof ms$1 !== "number" || !Number.isFinite(ms$1)) throw new Error("Value provided to ms.format() must be of type number.");
    return fmtShort(ms$1);
}
function parseSetCookieHeader(setCookie) {
    const cookies = /* @__PURE__ */ new Map();
    const cookieArray = setCookie.split(", ");
    cookieArray.forEach((cookieString)=>{
        const parts = cookieString.split(";").map((part)=>part.trim());
        const [nameValue, ...attributes] = parts;
        const [name, ...valueParts] = nameValue.split("=");
        const value = valueParts.join("=");
        if (!name || value === void 0) {
            return;
        }
        const attrObj = {
            value
        };
        attributes.forEach((attribute)=>{
            const [attrName, ...attrValueParts] = attribute.split("=");
            const attrValue = attrValueParts.join("=");
            const normalizedAttrName = attrName.trim().toLowerCase();
            switch(normalizedAttrName){
                case "max-age":
                    attrObj["max-age"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;
                    break;
                case "expires":
                    attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;
                    break;
                case "domain":
                    attrObj.domain = attrValue ? attrValue.trim() : void 0;
                    break;
                case "path":
                    attrObj.path = attrValue ? attrValue.trim() : void 0;
                    break;
                case "secure":
                    attrObj.secure = true;
                    break;
                case "httponly":
                    attrObj.httponly = true;
                    break;
                case "samesite":
                    attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;
                    break;
                default:
                    attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;
                    break;
            }
        });
        cookies.set(name, attrObj);
    });
    return cookies;
}
function setCookieToHeader(headers) {
    return (context)=>{
        const setCookieHeader = context.response.headers.get("set-cookie");
        if (!setCookieHeader) {
            return;
        }
        const cookieMap = /* @__PURE__ */ new Map();
        const existingCookiesHeader = headers.get("cookie") || "";
        existingCookiesHeader.split(";").forEach((cookie)=>{
            const [name, ...rest] = cookie.trim().split("=");
            if (name && rest.length > 0) {
                cookieMap.set(name, rest.join("="));
            }
        });
        const setCookieHeaders = setCookieHeader.split(",");
        setCookieHeaders.forEach((header)=>{
            const cookies = parseSetCookieHeader(header);
            cookies.forEach((value, name)=>{
                cookieMap.set(name, value.value);
            });
        });
        const updatedCookies = Array.from(cookieMap.entries()).map((param)=>{
            let [name, value] = param;
            return "".concat(name, "=").concat(value);
        }).join("; ");
        headers.set("cookie", updatedCookies);
    };
}
function createCookieGetter(options) {
    var _options_advanced, _options_advanced1, _options_advanced_crossSubDomainCookies, _options_advanced2, _options_advanced_crossSubDomainCookies1, _options_advanced3;
    const secure = ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : _options_advanced.useSecureCookies) !== void 0 ? (_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : _options_advanced1.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith("https://") ? true : false : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"];
    const secureCookiePrefix = secure ? "__Secure-" : "";
    const crossSubdomainEnabled = !!((_options_advanced2 = options.advanced) === null || _options_advanced2 === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies = _options_advanced2.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies === void 0 ? void 0 : _options_advanced_crossSubDomainCookies.enabled);
    const domain = crossSubdomainEnabled ? ((_options_advanced3 = options.advanced) === null || _options_advanced3 === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies1 = _options_advanced3.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies1 === void 0 ? void 0 : _options_advanced_crossSubDomainCookies1.domain) || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;
    if (crossSubdomainEnabled && !domain) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("baseURL is required when crossSubdomainCookies are enabled");
    }
    function createCookie(cookieName) {
        let overrideAttributes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options_advanced, _options_advanced_cookies_cookieName, _options_advanced_cookies, _options_advanced1, _options_advanced_cookies_cookieName1, _options_advanced_cookies1, _options_advanced2, _options_advanced3;
        const prefix = ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : _options_advanced.cookiePrefix) || "better-auth";
        const name = ((_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_cookies = _options_advanced1.cookies) === null || _options_advanced_cookies === void 0 ? void 0 : (_options_advanced_cookies_cookieName = _options_advanced_cookies[cookieName]) === null || _options_advanced_cookies_cookieName === void 0 ? void 0 : _options_advanced_cookies_cookieName.name) || "".concat(prefix, ".").concat(cookieName);
        const attributes = (_options_advanced2 = options.advanced) === null || _options_advanced2 === void 0 ? void 0 : (_options_advanced_cookies1 = _options_advanced2.cookies) === null || _options_advanced_cookies1 === void 0 ? void 0 : (_options_advanced_cookies_cookieName1 = _options_advanced_cookies1[cookieName]) === null || _options_advanced_cookies_cookieName1 === void 0 ? void 0 : _options_advanced_cookies_cookieName1.attributes;
        return {
            name: "".concat(secureCookiePrefix).concat(name),
            attributes: {
                secure: !!secureCookiePrefix,
                sameSite: "lax",
                path: "/",
                httpOnly: true,
                ...crossSubdomainEnabled ? {
                    domain
                } : {},
                ...(_options_advanced3 = options.advanced) === null || _options_advanced3 === void 0 ? void 0 : _options_advanced3.defaultCookieAttributes,
                ...overrideAttributes,
                ...attributes
            }
        };
    }
    return createCookie;
}
function getCookies(options) {
    var _options_session, _options_session_cookieCache, _options_session1;
    const createCookie = createCookieGetter(options);
    const sessionMaxAge = ((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.expiresIn) || ms("7d") / 1e3;
    const sessionToken = createCookie("session_token", {
        maxAge: sessionMaxAge
    });
    const sessionData = createCookie("session_data", {
        maxAge: ((_options_session1 = options.session) === null || _options_session1 === void 0 ? void 0 : (_options_session_cookieCache = _options_session1.cookieCache) === null || _options_session_cookieCache === void 0 ? void 0 : _options_session_cookieCache.maxAge) || 60 * 5
    });
    const dontRememberToken = createCookie("dont_remember");
    return {
        sessionToken: {
            name: sessionToken.name,
            options: sessionToken.attributes
        },
        /**
     * This cookie is used to store the session data in the cookie
     * This is useful for when you want to cache the session in the cookie
     */ sessionData: {
            name: sessionData.name,
            options: sessionData.attributes
        },
        dontRememberToken: {
            name: dontRememberToken.name,
            options: dontRememberToken.attributes
        }
    };
}
async function setCookieCache(ctx, session) {
    var _ctx_context_options_session_cookieCache, _ctx_context_options_session;
    const shouldStoreSessionDataInCookie = (_ctx_context_options_session = ctx.context.options.session) === null || _ctx_context_options_session === void 0 ? void 0 : (_ctx_context_options_session_cookieCache = _ctx_context_options_session.cookieCache) === null || _ctx_context_options_session_cookieCache === void 0 ? void 0 : _ctx_context_options_session_cookieCache.enabled;
    if (shouldStoreSessionDataInCookie) {
        const filteredSession = Object.entries(session.session).reduce((acc, param)=>{
            let [key, value] = param;
            var _ctx_context_options_session_additionalFields, _ctx_context_options_session;
            const fieldConfig = (_ctx_context_options_session = ctx.context.options.session) === null || _ctx_context_options_session === void 0 ? void 0 : (_ctx_context_options_session_additionalFields = _ctx_context_options_session.additionalFields) === null || _ctx_context_options_session_additionalFields === void 0 ? void 0 : _ctx_context_options_session_additionalFields[key];
            if (!fieldConfig || fieldConfig.returned !== false) {
                acc[key] = value;
            }
            return acc;
        }, {});
        const sessionData = {
            session: filteredSession,
            user: session.user
        };
        const expiresAtDate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.context.authCookies.sessionData.options.maxAge || 60, "sec").getTime();
        const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64Url"].encode(JSON.stringify({
            session: sessionData,
            expiresAt: expiresAtDate,
            signature: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHMAC"])("SHA-256", "base64urlnopad").sign(ctx.context.secret, JSON.stringify({
                ...sessionData,
                expiresAt: expiresAtDate
            }))
        }), {
            padding: false
        });
        if (data.length > 4093) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");
        }
        ctx.setCookie(ctx.context.authCookies.sessionData.name, data, ctx.context.authCookies.sessionData.options);
    }
}
async function setSessionCookie(ctx, session, dontRememberMe, overrides) {
    const dontRememberMeCookie = await ctx.getSignedCookie(ctx.context.authCookies.dontRememberToken.name, ctx.context.secret);
    dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;
    const options = ctx.context.authCookies.sessionToken.options;
    const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;
    await ctx.setSignedCookie(ctx.context.authCookies.sessionToken.name, session.session.token, ctx.context.secret, {
        ...options,
        maxAge,
        ...overrides
    });
    if (dontRememberMe) {
        await ctx.setSignedCookie(ctx.context.authCookies.dontRememberToken.name, "true", ctx.context.secret, ctx.context.authCookies.dontRememberToken.options);
    }
    await setCookieCache(ctx, session);
    ctx.context.setNewSession(session);
    if (ctx.context.options.secondaryStorage) {
        var _ctx_context_secondaryStorage;
        await ((_ctx_context_secondaryStorage = ctx.context.secondaryStorage) === null || _ctx_context_secondaryStorage === void 0 ? void 0 : _ctx_context_secondaryStorage.set(session.session.token, JSON.stringify({
            user: session.user,
            session: session.session
        }), Math.floor((new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3)));
    }
}
function deleteSessionCookie(ctx, skipDontRememberMe) {
    ctx.setCookie(ctx.context.authCookies.sessionToken.name, "", {
        ...ctx.context.authCookies.sessionToken.options,
        maxAge: 0
    });
    ctx.setCookie(ctx.context.authCookies.sessionData.name, "", {
        ...ctx.context.authCookies.sessionData.options,
        maxAge: 0
    });
    if (!skipDontRememberMe) {
        ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, "", {
            ...ctx.context.authCookies.dontRememberToken.options,
            maxAge: 0
        });
    }
}
function parseCookies(cookieHeader) {
    const cookies = cookieHeader.split("; ");
    const cookieMap = /* @__PURE__ */ new Map();
    cookies.forEach((cookie)=>{
        const [name, value] = cookie.split("=");
        cookieMap.set(name, value);
    });
    return cookieMap;
}
const getSessionCookie = (request, config)=>{
    if (config === null || config === void 0 ? void 0 : config.cookiePrefix) {
        if (config.cookieName) {
            config.cookiePrefix = "".concat(config.cookiePrefix, "-");
        } else {
            config.cookiePrefix = "".concat(config.cookiePrefix, ".");
        }
    }
    const headers = "headers" in request ? request.headers : request;
    const req = request instanceof Request ? request : void 0;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(req === null || req === void 0 ? void 0 : req.url, config === null || config === void 0 ? void 0 : config.path, req);
    const cookies = headers.get("cookie");
    if (!cookies) {
        return null;
    }
    const { cookieName = "session_token", cookiePrefix = "better-auth." } = config || {};
    const name = "".concat(cookiePrefix).concat(cookieName);
    const secureCookieName = "__Secure-".concat(name);
    const parsedCookie = parseCookies(cookies);
    const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);
    if (sessionToken) {
        return sessionToken;
    }
    return null;
};
const getCookieCache = async (request, config)=>{
    const headers = request instanceof Headers ? request : request.headers;
    const cookies = headers.get("cookie");
    if (!cookies) {
        return null;
    }
    const { cookieName = "session_data", cookiePrefix = "better-auth" } = config || {};
    const name = (config === null || config === void 0 ? void 0 : config.isSecure) !== void 0 ? config.isSecure ? "__Secure-".concat(cookiePrefix, ".").concat(cookieName) : "".concat(cookiePrefix, ".").concat(cookieName) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"] ? "__Secure-".concat(cookiePrefix, ".").concat(cookieName) : "".concat(cookiePrefix, ".").concat(cookieName);
    const parsedCookie = parseCookies(cookies);
    const sessionData = parsedCookie.get(name);
    if (sessionData) {
        const sessionDataPayload = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["binary"].decode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64Url"].decode(sessionData)));
        if (!sessionDataPayload) {
            return null;
        }
        const secret = (config === null || config === void 0 ? void 0 : config.secret) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BETTER_AUTH_SECRET;
        if (!secret) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable");
        }
        const isValid = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHMAC"])("SHA-256", "base64urlnopad").verify(secret, JSON.stringify({
            ...sessionDataPayload.session,
            expiresAt: sessionDataPayload.expiresAt
        }), sessionDataPayload.signature);
        if (!isValid) {
            return null;
        }
        return sessionDataPayload.session;
    }
    return null;
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "B",
    ()=>BASE_ERROR_CODES,
    "a",
    ()=>createAuthEndpoint,
    "b",
    ()=>getSession,
    "c",
    ()=>createAuthMiddleware,
    "d",
    ()=>revokeSessions,
    "e",
    ()=>revokeSession,
    "f",
    ()=>freshSessionMiddleware,
    "g",
    ()=>getSessionFromCtx,
    "h",
    ()=>getSessionQuerySchema,
    "i",
    ()=>requestOnlySessionMiddleware,
    "l",
    ()=>listSessions,
    "o",
    ()=>optionsMiddleware,
    "r",
    ()=>revokeOtherSessions,
    "s",
    ()=>sessionMiddleware
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
const optionsMiddleware = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMiddleware"])(async ()=>{
    return {};
});
const createAuthMiddleware = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMiddleware"].create({
    use: [
        optionsMiddleware,
        /**
     * Only use for post hooks
     */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMiddleware"])(async ()=>{
            return {};
        })
    ]
});
const createAuthEndpoint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEndpoint"].create({
    use: [
        optionsMiddleware
    ]
});
const BASE_ERROR_CODES = {
    USER_NOT_FOUND: "User not found",
    FAILED_TO_CREATE_USER: "Failed to create user",
    FAILED_TO_CREATE_SESSION: "Failed to create session",
    FAILED_TO_UPDATE_USER: "Failed to update user",
    FAILED_TO_GET_SESSION: "Failed to get session",
    INVALID_PASSWORD: "Invalid password",
    INVALID_EMAIL: "Invalid email",
    INVALID_EMAIL_OR_PASSWORD: "Invalid email or password",
    SOCIAL_ACCOUNT_ALREADY_LINKED: "Social account already linked",
    PROVIDER_NOT_FOUND: "Provider not found",
    INVALID_TOKEN: "Invalid token",
    ID_TOKEN_NOT_SUPPORTED: "id_token not supported",
    FAILED_TO_GET_USER_INFO: "Failed to get user info",
    USER_EMAIL_NOT_FOUND: "User email not found",
    EMAIL_NOT_VERIFIED: "Email not verified",
    PASSWORD_TOO_SHORT: "Password too short",
    PASSWORD_TOO_LONG: "Password too long",
    USER_ALREADY_EXISTS: "User already exists. Use another email.",
    EMAIL_CAN_NOT_BE_UPDATED: "Email can not be updated",
    CREDENTIAL_ACCOUNT_NOT_FOUND: "Credential account not found",
    SESSION_EXPIRED: "Session expired. Re-authenticate to perform this action.",
    FAILED_TO_UNLINK_LAST_ACCOUNT: "You can't unlink your last account",
    ACCOUNT_NOT_FOUND: "Account not found",
    USER_ALREADY_HAS_PASSWORD: "User already has a password. Provide that to delete the account."
};
const getSessionQuerySchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    /**
     * If cookie cache is enabled, it will disable the cache
     * and fetch the session from the database
     */ disableCookieCache: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].boolean().meta({
        description: "Disable cookie cache and fetch session from database"
    }).optional(),
    disableRefresh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].boolean().meta({
        description: "Disable session refresh. Useful for checking session status, without updating the session"
    }).optional()
}));
const getSession = ()=>createAuthEndpoint("/get-session", {
        method: "GET",
        query: getSessionQuerySchema,
        requireHeaders: true,
        metadata: {
            openapi: {
                description: "Get the current session",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        session: {
                                            $ref: "#/components/schemas/Session"
                                        },
                                        user: {
                                            $ref: "#/components/schemas/User"
                                        }
                                    },
                                    required: [
                                        "session",
                                        "user"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        try {
            var _ctx_context_options_session_cookieCache, _ctx_context_options_session, _ctx_query, _ctx_query1, _ctx_query2, _ctx_context_options_session1;
            const sessionCookieToken = await ctx.getSignedCookie(ctx.context.authCookies.sessionToken.name, ctx.context.secret);
            if (!sessionCookieToken) {
                return null;
            }
            const sessionDataCookie = ctx.getCookie(ctx.context.authCookies.sessionData.name);
            const sessionDataPayload = sessionDataCookie ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["binary"].decode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64Url"].decode(sessionDataCookie))) : null;
            if (sessionDataPayload) {
                const isValid = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHMAC"])("SHA-256", "base64urlnopad").verify(ctx.context.secret, JSON.stringify({
                    ...sessionDataPayload.session,
                    expiresAt: sessionDataPayload.expiresAt
                }), sessionDataPayload.signature);
                if (!isValid) {
                    const dataCookie = ctx.context.authCookies.sessionData.name;
                    ctx.setCookie(dataCookie, "", {
                        maxAge: 0
                    });
                    return ctx.json(null);
                }
            }
            const dontRememberMe = await ctx.getSignedCookie(ctx.context.authCookies.dontRememberToken.name, ctx.context.secret);
            if ((sessionDataPayload === null || sessionDataPayload === void 0 ? void 0 : sessionDataPayload.session) && ((_ctx_context_options_session = ctx.context.options.session) === null || _ctx_context_options_session === void 0 ? void 0 : (_ctx_context_options_session_cookieCache = _ctx_context_options_session.cookieCache) === null || _ctx_context_options_session_cookieCache === void 0 ? void 0 : _ctx_context_options_session_cookieCache.enabled) && !((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.disableCookieCache)) {
                const session2 = sessionDataPayload.session;
                const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();
                if (!hasExpired) {
                    ctx.context.session = session2;
                    return ctx.json(session2);
                } else {
                    const dataCookie = ctx.context.authCookies.sessionData.name;
                    ctx.setCookie(dataCookie, "", {
                        maxAge: 0
                    });
                }
            }
            const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);
            ctx.context.session = session;
            if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(ctx);
                if (session) {
                    await ctx.context.internalAdapter.deleteSession(session.session.token);
                }
                return ctx.json(null);
            }
            if (dontRememberMe || ((_ctx_query1 = ctx.query) === null || _ctx_query1 === void 0 ? void 0 : _ctx_query1.disableRefresh)) {
                return ctx.json(session);
            }
            const expiresIn = ctx.context.sessionConfig.expiresIn;
            const updateAge = ctx.context.sessionConfig.updateAge;
            const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;
            const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();
            if (shouldBeUpdated && (!((_ctx_query2 = ctx.query) === null || _ctx_query2 === void 0 ? void 0 : _ctx_query2.disableRefresh) || !((_ctx_context_options_session1 = ctx.context.options.session) === null || _ctx_context_options_session1 === void 0 ? void 0 : _ctx_context_options_session1.disableSessionRefresh))) {
                const updatedSession = await ctx.context.internalAdapter.updateSession(session.session.token, {
                    expiresAt: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.context.sessionConfig.expiresIn, "sec"),
                    updatedAt: /* @__PURE__ */ new Date()
                });
                if (!updatedSession) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(ctx);
                    return ctx.json(null, {
                        status: 401
                    });
                }
                const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;
                await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
                    session: updatedSession,
                    user: session.user
                }, false, {
                    maxAge
                });
                return ctx.json({
                    session: updatedSession,
                    user: session.user
                });
            }
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])(ctx, session);
            return ctx.json(session);
        } catch (error) {
            ctx.context.logger.error("INTERNAL_SERVER_ERROR", error);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION
            });
        }
    });
const getSessionFromCtx = async (ctx, config)=>{
    if (ctx.context.session) {
        return ctx.context.session;
    }
    const session = await getSession()({
        ...ctx,
        asResponse: false,
        headers: ctx.headers,
        returnHeaders: false,
        query: {
            ...config,
            ...ctx.query
        }
    }).catch((e)=>{
        return null;
    });
    ctx.context.session = session;
    return session;
};
const sessionMiddleware = createAuthMiddleware(async (ctx)=>{
    const session = await getSessionFromCtx(ctx);
    if (!(session === null || session === void 0 ? void 0 : session.session)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
    }
    return {
        session
    };
});
const requestOnlySessionMiddleware = createAuthMiddleware(async (ctx)=>{
    const session = await getSessionFromCtx(ctx);
    if (!(session === null || session === void 0 ? void 0 : session.session) && (ctx.request || ctx.headers)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
    }
    return {
        session
    };
});
const freshSessionMiddleware = createAuthMiddleware(async (ctx)=>{
    var _session_session_updatedAt;
    const session = await getSessionFromCtx(ctx);
    if (!(session === null || session === void 0 ? void 0 : session.session)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
    }
    if (ctx.context.sessionConfig.freshAge === 0) {
        return {
            session
        };
    }
    const freshAge = ctx.context.sessionConfig.freshAge;
    const lastUpdated = ((_session_session_updatedAt = session.session.updatedAt) === null || _session_session_updatedAt === void 0 ? void 0 : _session_session_updatedAt.valueOf()) || session.session.createdAt.valueOf();
    const now = Date.now();
    const isFresh = now - lastUpdated < freshAge * 1e3;
    if (!isFresh) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
            message: "Session is not fresh"
        });
    }
    return {
        session
    };
});
const listSessions = ()=>createAuthEndpoint("/list-sessions", {
        method: "GET",
        use: [
            sessionMiddleware
        ],
        requireHeaders: true,
        metadata: {
            openapi: {
                description: "List all active sessions for the user",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        $ref: "#/components/schemas/Session"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        try {
            const sessions = await ctx.context.internalAdapter.listSessions(ctx.context.session.user.id);
            const activeSessions = sessions.filter((session)=>{
                return session.expiresAt > /* @__PURE__ */ new Date();
            });
            return ctx.json(activeSessions);
        } catch (e) {
            ctx.context.logger.error(e);
            throw ctx.error("INTERNAL_SERVER_ERROR");
        }
    });
const revokeSession = createAuthEndpoint("/revoke-session", {
    method: "POST",
    body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
        token: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The token to revoke"
        })
    }),
    use: [
        sessionMiddleware
    ],
    requireHeaders: true,
    metadata: {
        openapi: {
            description: "Revoke a single session",
            requestBody: {
                content: {
                    "application/json": {
                        schema: {
                            type: "object",
                            properties: {
                                token: {
                                    type: "string",
                                    description: "The token to revoke"
                                }
                            },
                            required: [
                                "token"
                            ]
                        }
                    }
                }
            },
            responses: {
                "200": {
                    description: "Success",
                    content: {
                        "application/json": {
                            schema: {
                                type: "object",
                                properties: {
                                    status: {
                                        type: "boolean",
                                        description: "Indicates if the session was revoked successfully"
                                    }
                                },
                                required: [
                                    "status"
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
}, async (ctx)=>{
    const token = ctx.body.token;
    const findSession = await ctx.context.internalAdapter.findSession(token);
    if (!findSession) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "Session not found"
        });
    }
    if (findSession.session.userId !== ctx.context.session.user.id) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
    }
    try {
        await ctx.context.internalAdapter.deleteSession(token);
    } catch (error) {
        ctx.context.logger.error(error && typeof error === "object" && "name" in error ? error.name : "", error);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR");
    }
    return ctx.json({
        status: true
    });
});
const revokeSessions = createAuthEndpoint("/revoke-sessions", {
    method: "POST",
    use: [
        sessionMiddleware
    ],
    requireHeaders: true,
    metadata: {
        openapi: {
            description: "Revoke all sessions for the user",
            responses: {
                "200": {
                    description: "Success",
                    content: {
                        "application/json": {
                            schema: {
                                type: "object",
                                properties: {
                                    status: {
                                        type: "boolean",
                                        description: "Indicates if all sessions were revoked successfully"
                                    }
                                },
                                required: [
                                    "status"
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
}, async (ctx)=>{
    try {
        await ctx.context.internalAdapter.deleteSessions(ctx.context.session.user.id);
    } catch (error) {
        ctx.context.logger.error(error && typeof error === "object" && "name" in error ? error.name : "", error);
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR");
    }
    return ctx.json({
        status: true
    });
});
const revokeOtherSessions = createAuthEndpoint("/revoke-other-sessions", {
    method: "POST",
    requireHeaders: true,
    use: [
        sessionMiddleware
    ],
    metadata: {
        openapi: {
            description: "Revoke all other sessions for the user except the current one",
            responses: {
                "200": {
                    description: "Success",
                    content: {
                        "application/json": {
                            schema: {
                                type: "object",
                                properties: {
                                    status: {
                                        type: "boolean",
                                        description: "Indicates if all other sessions were revoked successfully"
                                    }
                                },
                                required: [
                                    "status"
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
}, async (ctx)=>{
    const session = ctx.context.session;
    if (!session.user) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
    }
    const sessions = await ctx.context.internalAdapter.listSessions(session.user.id);
    const activeSessions = sessions.filter((session2)=>{
        return session2.expiresAt > /* @__PURE__ */ new Date();
    });
    const otherSessions = activeSessions.filter((session2)=>session2.token !== ctx.context.session.session.token);
    await Promise.all(otherSessions.map((session2)=>ctx.context.internalAdapter.deleteSession(session2.token)));
    return ctx.json({
        status: true
    });
});
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>generateRandomString
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
;
const generateRandomString = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRandomStringGenerator"])("a-z", "0-9", "A-Z", "-_");
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>generateId
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
;
const generateId = (size)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRandomStringGenerator"])("a-z", "A-Z", "0-9")(size || 32);
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>accountSchema,
    "b",
    ()=>parseUserOutput,
    "c",
    ()=>coreSchema,
    "d",
    ()=>parseAccountOutput,
    "e",
    ()=>parseSessionOutput,
    "f",
    ()=>parseInputData,
    "g",
    ()=>getAllFields,
    "h",
    ()=>parseUserInput,
    "i",
    ()=>parseAdditionalUserInput,
    "j",
    ()=>parseAccountInput,
    "k",
    ()=>parseSessionInput,
    "m",
    ()=>mergeSchema,
    "p",
    ()=>parseOutputData,
    "s",
    ()=>sessionSchema,
    "u",
    ()=>userSchema,
    "v",
    ()=>verificationSchema
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
;
;
const coreSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().default(()=>/* @__PURE__ */ new Date()),
    updatedAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().default(()=>/* @__PURE__ */ new Date())
});
const accountSchema = coreSchema.extend({
    providerId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    accountId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string(),
    accessToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    refreshToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    idToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    /**
   * Access token expires at
   */ accessTokenExpiresAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().nullish(),
    /**
   * Refresh token expires at
   */ refreshTokenExpiresAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().nullish(),
    /**
   * The scopes that the user has authorized
   */ scope: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    /**
   * Password is only stored in the credential provider
   */ password: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish()
});
const userSchema = coreSchema.extend({
    email: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().transform((val)=>val.toLowerCase()),
    emailVerified: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().default(false),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    image: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish()
});
const sessionSchema = coreSchema.extend({
    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string(),
    expiresAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"](),
    token: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    ipAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    userAgent: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish()
});
const verificationSchema = coreSchema.extend({
    value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    expiresAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"](),
    identifier: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()
});
function parseOutputData(data, schema) {
    const fields = schema.fields;
    const parsedData = {};
    for(const key in data){
        const field = fields[key];
        if (!field) {
            parsedData[key] = data[key];
            continue;
        }
        if (field.returned === false) {
            continue;
        }
        parsedData[key] = data[key];
    }
    return parsedData;
}
function getAllFields(options, table) {
    var _options_user, _options_session;
    let schema = {
        ...table === "user" ? (_options_user = options.user) === null || _options_user === void 0 ? void 0 : _options_user.additionalFields : {},
        ...table === "session" ? (_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.additionalFields : {}
    };
    for (const plugin of options.plugins || []){
        if (plugin.schema && plugin.schema[table]) {
            schema = {
                ...schema,
                ...plugin.schema[table].fields
            };
        }
    }
    return schema;
}
function parseUserOutput(options, user) {
    const schema = getAllFields(options, "user");
    return parseOutputData(user, {
        fields: schema
    });
}
function parseAccountOutput(options, account) {
    const schema = getAllFields(options, "account");
    return parseOutputData(account, {
        fields: schema
    });
}
function parseSessionOutput(options, session) {
    const schema = getAllFields(options, "session");
    return parseOutputData(session, {
        fields: schema
    });
}
function parseInputData(data, schema) {
    const action = schema.action || "create";
    const fields = schema.fields;
    const parsedData = {};
    for(const key in fields){
        if (key in data) {
            var _fields_key_validator, _fields_key_transform;
            if (fields[key].input === false) {
                if (fields[key].defaultValue) {
                    parsedData[key] = fields[key].defaultValue;
                    continue;
                }
                continue;
            }
            if (((_fields_key_validator = fields[key].validator) === null || _fields_key_validator === void 0 ? void 0 : _fields_key_validator.input) && data[key] !== void 0) {
                parsedData[key] = fields[key].validator.input.parse(data[key]);
                continue;
            }
            if (((_fields_key_transform = fields[key].transform) === null || _fields_key_transform === void 0 ? void 0 : _fields_key_transform.input) && data[key] !== void 0) {
                var _fields_key_transform1;
                parsedData[key] = (_fields_key_transform1 = fields[key].transform) === null || _fields_key_transform1 === void 0 ? void 0 : _fields_key_transform1.input(data[key]);
                continue;
            }
            parsedData[key] = data[key];
            continue;
        }
        if (fields[key].defaultValue && action === "create") {
            parsedData[key] = fields[key].defaultValue;
            continue;
        }
        if (fields[key].required && action === "create") {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "".concat(key, " is required")
            });
        }
    }
    return parsedData;
}
function parseUserInput(options, user, action) {
    const schema = getAllFields(options, "user");
    return parseInputData(user || {}, {
        fields: schema,
        action
    });
}
function parseAdditionalUserInput(options, user) {
    const schema = getAllFields(options, "user");
    return parseInputData(user || {}, {
        fields: schema
    });
}
function parseAccountInput(options, account) {
    const schema = getAllFields(options, "account");
    return parseInputData(account, {
        fields: schema
    });
}
function parseSessionInput(options, session) {
    const schema = getAllFields(options, "session");
    return parseInputData(session, {
        fields: schema
    });
}
function mergeSchema(schema, newSchema) {
    if (!newSchema) {
        return schema;
    }
    for(const table in newSchema){
        var _newSchema_table;
        const newModelName = (_newSchema_table = newSchema[table]) === null || _newSchema_table === void 0 ? void 0 : _newSchema_table.modelName;
        if (newModelName) {
            schema[table].modelName = newModelName;
        }
        for(const field in schema[table].fields){
            var _newSchema_table_fields, _newSchema_table1;
            const newField = (_newSchema_table1 = newSchema[table]) === null || _newSchema_table1 === void 0 ? void 0 : (_newSchema_table_fields = _newSchema_table1.fields) === null || _newSchema_table_fields === void 0 ? void 0 : _newSchema_table_fields[field];
            if (!newField) {
                continue;
            }
            schema[table].fields[field].fieldName = newField;
        }
    }
    return schema;
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DQunmJlF.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>clientSideHasPermission,
    "h",
    ()=>hasPermission
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/organization/access/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
let cacheAllRoles = /* @__PURE__ */ new Map();
const hasPermission = async (input, ctx)=>{
    var _input_options_dynamicAccessControl;
    let acRoles = {
        ...input.options.roles || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultRoles"]
    };
    if (ctx && input.organizationId && ((_input_options_dynamicAccessControl = input.options.dynamicAccessControl) === null || _input_options_dynamicAccessControl === void 0 ? void 0 : _input_options_dynamicAccessControl.enabled) && input.options.ac && !input.useMemoryCache) {
        const roles = await ctx.context.adapter.findMany({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: input.organizationId
                }
            ]
        });
        for (const { role, permission: permissionsString } of roles){
            if (role in acRoles) continue;
            const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).safeParse(JSON.parse(permissionsString));
            if (!result.success) {
                ctx.context.logger.error("[hasPermission] Invalid permissions for role " + role, {
                    permissions: JSON.parse(permissionsString)
                });
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                    message: "Invalid permissions for role " + role
                });
            }
            acRoles[role] = input.options.ac.newRole(result.data);
        }
    }
    if (input.useMemoryCache) {
        acRoles = cacheAllRoles.get(input.organizationId) || acRoles;
    }
    cacheAllRoles.set(input.organizationId, acRoles);
    return hasPermissionFn(input, acRoles);
};
const clientSideHasPermission = async (input)=>{
    const acRoles = input.options.roles || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultRoles"];
    return hasPermissionFn(input, acRoles);
};
const hasPermissionFn = (input, acRoles)=>{
    if (!input.permissions && !input.permission) return false;
    const roles = input.role.split(",");
    const creatorRole = input.options.creatorRole || "owner";
    const isCreator = roles.includes(creatorRole);
    const allowCreatorsAllPermissions = input.allowCreatorAllPermissions || false;
    if (isCreator && allowCreatorsAllPermissions) return true;
    for (const role of roles){
        const _role = acRoles[role];
        var _input_permissions;
        const result = _role === null || _role === void 0 ? void 0 : _role.authorize((_input_permissions = input.permissions) !== null && _input_permissions !== void 0 ? _input_permissions : input.permission);
        if (result === null || result === void 0 ? void 0 : result.success) {
            return true;
        }
    }
    return false;
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.Ddw8bVyV.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "t",
    ()=>twoFactorClient
]);
const twoFactorClient = (options)=>{
    return {
        id: "two-factor",
        $InferServerPlugin: {},
        atomListeners: [
            {
                matcher: (path)=>path.startsWith("/two-factor/"),
                signal: "$sessionSignal"
            }
        ],
        pathMethods: {
            "/two-factor/disable": "POST",
            "/two-factor/enable": "POST",
            "/two-factor/send-otp": "POST",
            "/two-factor/generate-backup-codes": "POST"
        },
        fetchPlugins: [
            {
                id: "two-factor",
                name: "two-factor",
                hooks: {
                    async onSuccess (context) {
                        var _context_data;
                        if ((_context_data = context.data) === null || _context_data === void 0 ? void 0 : _context_data.twoFactorRedirect) {
                            if (options === null || options === void 0 ? void 0 : options.onTwoFactorRedirect) {
                                await options.onTwoFactorRedirect();
                            }
                        }
                    }
                }
            }
        ]
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.bkwPl2G4.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "h",
    ()=>hasPermission
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$admin$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/admin/access/index.mjs [app-client] (ecmascript)");
;
const hasPermission = (input)=>{
    var _input_options_adminUserIds, _input_options, _input_options1, _input_options2;
    if (input.userId && ((_input_options = input.options) === null || _input_options === void 0 ? void 0 : (_input_options_adminUserIds = _input_options.adminUserIds) === null || _input_options_adminUserIds === void 0 ? void 0 : _input_options_adminUserIds.includes(input.userId))) {
        return true;
    }
    if (!input.permissions && !input.permission) {
        return false;
    }
    const roles = (input.role || ((_input_options1 = input.options) === null || _input_options1 === void 0 ? void 0 : _input_options1.defaultRole) || "user").split(",");
    const acRoles = ((_input_options2 = input.options) === null || _input_options2 === void 0 ? void 0 : _input_options2.roles) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$admin$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultRoles"];
    for (const role of roles){
        const _role = acRoles[role];
        var _input_permission;
        const result = _role === null || _role === void 0 ? void 0 : _role.authorize((_input_permission = input.permission) !== null && _input_permission !== void 0 ? _input_permission : input.permissions);
        if (result === null || result === void 0 ? void 0 : result.success) {
            return true;
        }
    }
    return false;
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BpA03GIs.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "d",
    ()=>deviceAuthorizationClient
]);
const deviceAuthorizationClient = ()=>{
    return {
        id: "device-authorization",
        $InferServerPlugin: {},
        pathMethods: {
            "/device/code": "POST",
            "/device/token": "POST",
            "/device": "GET",
            "/device/approve": "POST",
            "/device/deny": "POST"
        }
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "p",
    ()=>parseJSON
]);
const PROTO_POLLUTION_PATTERNS = {
    proto: /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/,
    constructor: /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/,
    protoShort: /"__proto__"\s*:/,
    constructorShort: /"constructor"\s*:/
};
const JSON_SIGNATURE = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
const SPECIAL_VALUES = {
    true: true,
    false: false,
    null: null,
    undefined: void 0,
    nan: Number.NaN,
    infinity: Number.POSITIVE_INFINITY,
    "-infinity": Number.NEGATIVE_INFINITY
};
const ISO_DATE_REGEX = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d{1,7}))?(?:Z|([+-])(\d{2}):(\d{2}))$/;
function isValidDate(date) {
    return date instanceof Date && !isNaN(date.getTime());
}
function parseISODate(value) {
    const match = ISO_DATE_REGEX.exec(value);
    if (!match) return null;
    const [, year, month, day, hour, minute, second, ms, offsetSign, offsetHour, offsetMinute] = match;
    let date = new Date(Date.UTC(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10), parseInt(hour, 10), parseInt(minute, 10), parseInt(second, 10), ms ? parseInt(ms.padEnd(3, "0"), 10) : 0));
    if (offsetSign) {
        const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === "+" ? -1 : 1);
        date.setUTCMinutes(date.getUTCMinutes() + offset);
    }
    return isValidDate(date) ? date : null;
}
function betterJSONParse(value) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { strict = false, warnings = false, reviver, parseDates = true } = options;
    if (typeof value !== "string") {
        return value;
    }
    const trimmed = value.trim();
    if (trimmed[0] === '"' && trimmed.endsWith('"') && !trimmed.slice(1, -1).includes('"')) {
        return trimmed.slice(1, -1);
    }
    const lowerValue = trimmed.toLowerCase();
    if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {
        return SPECIAL_VALUES[lowerValue];
    }
    if (!JSON_SIGNATURE.test(trimmed)) {
        if (strict) {
            throw new SyntaxError("[better-json] Invalid JSON");
        }
        return value;
    }
    const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some((param)=>{
        let [key, pattern] = param;
        const matches = pattern.test(trimmed);
        if (matches && warnings) {
            console.warn("[better-json] Detected potential prototype pollution attempt using ".concat(key, " pattern"));
        }
        return matches;
    });
    if (hasProtoPattern && strict) {
        throw new Error("[better-json] Potential prototype pollution attempt detected");
    }
    try {
        const secureReviver = (key, value2)=>{
            if (key === "__proto__" || key === "constructor" && value2 && typeof value2 === "object" && "prototype" in value2) {
                if (warnings) {
                    console.warn('[better-json] Dropping "'.concat(key, '" key to prevent prototype pollution'));
                }
                return void 0;
            }
            if (parseDates && typeof value2 === "string") {
                const date = parseISODate(value2);
                if (date) {
                    return date;
                }
            }
            return reviver ? reviver(key, value2) : value2;
        };
        return JSON.parse(trimmed, secureReviver);
    } catch (error) {
        if (strict) {
            throw error;
        }
        return value;
    }
}
function parseJSON(value) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        strict: true
    };
    return betterJSONParse(value, options);
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.D7Ni8r_z.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>createDynamicPathProxy,
    "g",
    ()=>getClientConfig
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$fetch$2f$fetch$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-fetch/fetch/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CuS_eDdK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$atom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/nanostores/atom/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CkGsgrvv$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CkGsgrvv.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs [app-client] (ecmascript)");
;
;
;
;
;
const redirectPlugin = {
    id: "redirect",
    name: "Redirect",
    hooks: {
        onSuccess (context) {
            var _context_data, _context_data1;
            if (((_context_data = context.data) === null || _context_data === void 0 ? void 0 : _context_data.url) && ((_context_data1 = context.data) === null || _context_data1 === void 0 ? void 0 : _context_data1.redirect)) {
                if (typeof window !== "undefined" && window.location) {
                    if (window.location) {
                        try {
                            window.location.href = context.data.url;
                        } catch (e) {}
                    }
                }
            }
        }
    }
};
function getSessionAtom($fetch) {
    const $signal = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$nanostores$2f$atom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["atom"])(false);
    const session = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CkGsgrvv$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["u"])($signal, "/get-session", $fetch, {
        method: "GET"
    });
    return {
        session,
        $sessionSignal: $signal
    };
}
const getClientConfig = (options)=>{
    var _options_plugins, _options_fetchOptions, _options_fetchOptions1, _options_fetchOptions2, _options_fetchOptions3;
    const isCredentialsSupported = "credentials" in Request.prototype;
    const baseURL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(options === null || options === void 0 ? void 0 : options.baseURL, options === null || options === void 0 ? void 0 : options.basePath);
    const pluginsFetchPlugins = (options === null || options === void 0 ? void 0 : (_options_plugins = options.plugins) === null || _options_plugins === void 0 ? void 0 : _options_plugins.flatMap((plugin)=>plugin.fetchPlugins).filter((pl)=>pl !== void 0)) || [];
    const lifeCyclePlugin = {
        id: "lifecycle-hooks",
        name: "lifecycle-hooks",
        hooks: {
            onSuccess: options === null || options === void 0 ? void 0 : (_options_fetchOptions = options.fetchOptions) === null || _options_fetchOptions === void 0 ? void 0 : _options_fetchOptions.onSuccess,
            onError: options === null || options === void 0 ? void 0 : (_options_fetchOptions1 = options.fetchOptions) === null || _options_fetchOptions1 === void 0 ? void 0 : _options_fetchOptions1.onError,
            onRequest: options === null || options === void 0 ? void 0 : (_options_fetchOptions2 = options.fetchOptions) === null || _options_fetchOptions2 === void 0 ? void 0 : _options_fetchOptions2.onRequest,
            onResponse: options === null || options === void 0 ? void 0 : (_options_fetchOptions3 = options.fetchOptions) === null || _options_fetchOptions3 === void 0 ? void 0 : _options_fetchOptions3.onResponse
        }
    };
    const { onSuccess, onError, onRequest, onResponse, ...restOfFetchOptions } = (options === null || options === void 0 ? void 0 : options.fetchOptions) || {};
    const $fetch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$fetch$2f$fetch$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createFetch"])({
        baseURL,
        ...isCredentialsSupported ? {
            credentials: "include"
        } : {},
        method: "GET",
        jsonParser (text) {
            if (!text) {
                return null;
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["p"])(text, {
                strict: false
            });
        },
        customFetchImpl: fetch,
        ...restOfFetchOptions,
        plugins: [
            lifeCyclePlugin,
            ...restOfFetchOptions.plugins || [],
            ...(options === null || options === void 0 ? void 0 : options.disableDefaultFetchPlugins) ? [] : [
                redirectPlugin
            ],
            ...pluginsFetchPlugins
        ]
    });
    const { $sessionSignal, session } = getSessionAtom($fetch);
    const plugins = (options === null || options === void 0 ? void 0 : options.plugins) || [];
    let pluginsActions = {};
    let pluginsAtoms = {
        $sessionSignal,
        session
    };
    let pluginPathMethods = {
        "/sign-out": "POST",
        "/revoke-sessions": "POST",
        "/revoke-other-sessions": "POST",
        "/delete-user": "POST"
    };
    const atomListeners = [
        {
            signal: "$sessionSignal",
            matcher (path) {
                return path === "/sign-out" || path === "/update-user" || path.startsWith("/sign-in") || path.startsWith("/sign-up") || path === "/delete-user" || path === "/verify-email";
            }
        }
    ];
    for (const plugin of plugins){
        if (plugin.getAtoms) {
            var _plugin_getAtoms;
            Object.assign(pluginsAtoms, (_plugin_getAtoms = plugin.getAtoms) === null || _plugin_getAtoms === void 0 ? void 0 : _plugin_getAtoms.call(plugin, $fetch));
        }
        if (plugin.pathMethods) {
            Object.assign(pluginPathMethods, plugin.pathMethods);
        }
        if (plugin.atomListeners) {
            atomListeners.push(...plugin.atomListeners);
        }
    }
    const $store = {
        notify: (signal)=>{
            pluginsAtoms[signal].set(!pluginsAtoms[signal].get());
        },
        listen: (signal, listener)=>{
            pluginsAtoms[signal].subscribe(listener);
        },
        atoms: pluginsAtoms
    };
    for (const plugin of plugins){
        if (plugin.getActions) {
            var _plugin_getActions;
            Object.assign(pluginsActions, (_plugin_getActions = plugin.getActions) === null || _plugin_getActions === void 0 ? void 0 : _plugin_getActions.call(plugin, $fetch, $store, options));
        }
    }
    return {
        pluginsActions,
        pluginsAtoms,
        pluginPathMethods,
        atomListeners,
        $fetch,
        $store
    };
};
function isAtom(value) {
    return typeof value === "object" && value !== null && "get" in value && typeof value.get === "function" && "lc" in value && typeof value.lc === "number";
}
function getMethod(path, knownPathMethods, args) {
    const method = knownPathMethods[path];
    const { fetchOptions, query, ...body } = args || {};
    if (method) {
        return method;
    }
    if (fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.method) {
        return fetchOptions.method;
    }
    if (body && Object.keys(body).length > 0) {
        return "POST";
    }
    return "GET";
}
function createDynamicPathProxy(routes, client, knownPathMethods, atoms, atomListeners) {
    function createProxy() {
        let path = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        return new Proxy(function() {}, {
            get (target, prop) {
                if (prop === "then" || prop === "catch" || prop === "finally") {
                    return void 0;
                }
                const fullPath = [
                    ...path,
                    prop
                ];
                let current = routes;
                for (const segment of fullPath){
                    if (current && typeof current === "object" && segment in current) {
                        current = current[segment];
                    } else {
                        current = void 0;
                        break;
                    }
                }
                if (typeof current === "function") {
                    return current;
                }
                if (isAtom(current)) {
                    return current;
                }
                return createProxy(fullPath);
            },
            apply: async (_, __, args)=>{
                const routePath = "/" + path.map((segment)=>segment.replace(/[A-Z]/g, (letter)=>"-".concat(letter.toLowerCase()))).join("/");
                const arg = args[0] || {};
                const fetchOptions = args[1] || {};
                const { query, fetchOptions: argFetchOptions, ...body } = arg;
                const options = {
                    ...fetchOptions,
                    ...argFetchOptions
                };
                const method = getMethod(routePath, knownPathMethods, arg);
                return await client(routePath, {
                    ...options,
                    body: method === "GET" ? void 0 : {
                        ...body,
                        ...(options === null || options === void 0 ? void 0 : options.body) || {}
                    },
                    query: query || (options === null || options === void 0 ? void 0 : options.query),
                    method,
                    async onSuccess (context) {
                        var _options_onSuccess;
                        await (options === null || options === void 0 ? void 0 : (_options_onSuccess = options.onSuccess) === null || _options_onSuccess === void 0 ? void 0 : _options_onSuccess.call(options, context));
                        const matches = atomListeners === null || atomListeners === void 0 ? void 0 : atomListeners.find((s)=>s.matcher(routePath));
                        if (!matches) return;
                        const signal = atoms[matches.signal];
                        if (!signal) return;
                        const val = signal.get();
                        setTimeout(()=>{
                            signal.set(!val);
                        }, 10);
                    }
                });
            }
        });
    }
    return createProxy();
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>getAuthTables
]);
const getAuthTables = (options)=>{
    var _options_rateLimit, _options_rateLimit1, _options_rateLimit_fields, _options_rateLimit2, _options_rateLimit_fields1, _options_rateLimit3, _options_rateLimit_fields2, _options_rateLimit4, _options_session, _options_session_fields, _options_session1, _options_session_fields1, _options_session2, _options_session_fields2, _options_session3, _options_session_fields3, _options_session4, _options_session_fields4, _options_session5, _options_session_fields5, _options_session6, _options_session_fields6, _options_session7, _options_user, _options_session8, _options_user1, _options_user_fields, _options_user2, _options_user_fields1, _options_user3, _options_user_fields2, _options_user4, _options_user_fields3, _options_user5, _options_user_fields4, _options_user6, _options_user_fields5, _options_user7, _options_user8, _options_session9, _options_account, _options_account_fields, _options_account1, _options_account_fields1, _options_account2, _options_user9, _options_account_fields2, _options_account3, _options_account_fields3, _options_account4, _options_account_fields4, _options_account5, _options_account_fields5, _options_account6, _options_account_fields6, _options_account7, _options_account_fields7, _options_account8, _options_account_fields8, _options_account9, _options_account_fields9, _options_account10, _options_account_fields10, _options_account11, _options_account_fields11, _options_account12, _options_verification, _options_verification_fields, _options_verification1, _options_verification_fields1, _options_verification2, _options_verification_fields2, _options_verification3, _options_verification_fields3, _options_verification4, _options_verification_fields4, _options_verification5;
    var _options_plugins;
    const pluginSchema = ((_options_plugins = options.plugins) !== null && _options_plugins !== void 0 ? _options_plugins : []).reduce((acc, plugin)=>{
        const schema = plugin.schema;
        if (!schema) return acc;
        for (const [key, value] of Object.entries(schema)){
            var _acc_key;
            acc[key] = {
                fields: {
                    ...(_acc_key = acc[key]) === null || _acc_key === void 0 ? void 0 : _acc_key.fields,
                    ...value.fields
                },
                modelName: value.modelName || key
            };
        }
        return acc;
    }, {});
    const shouldAddRateLimitTable = ((_options_rateLimit = options.rateLimit) === null || _options_rateLimit === void 0 ? void 0 : _options_rateLimit.storage) === "database";
    const rateLimitTable = {
        rateLimit: {
            modelName: ((_options_rateLimit1 = options.rateLimit) === null || _options_rateLimit1 === void 0 ? void 0 : _options_rateLimit1.modelName) || "rateLimit",
            fields: {
                key: {
                    type: "string",
                    fieldName: ((_options_rateLimit2 = options.rateLimit) === null || _options_rateLimit2 === void 0 ? void 0 : (_options_rateLimit_fields = _options_rateLimit2.fields) === null || _options_rateLimit_fields === void 0 ? void 0 : _options_rateLimit_fields.key) || "key"
                },
                count: {
                    type: "number",
                    fieldName: ((_options_rateLimit3 = options.rateLimit) === null || _options_rateLimit3 === void 0 ? void 0 : (_options_rateLimit_fields1 = _options_rateLimit3.fields) === null || _options_rateLimit_fields1 === void 0 ? void 0 : _options_rateLimit_fields1.count) || "count"
                },
                lastRequest: {
                    type: "number",
                    bigint: true,
                    fieldName: ((_options_rateLimit4 = options.rateLimit) === null || _options_rateLimit4 === void 0 ? void 0 : (_options_rateLimit_fields2 = _options_rateLimit4.fields) === null || _options_rateLimit_fields2 === void 0 ? void 0 : _options_rateLimit_fields2.lastRequest) || "lastRequest"
                }
            }
        }
    };
    const { user, session, account, ...pluginTables } = pluginSchema;
    const sessionTable = {
        session: {
            modelName: ((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.modelName) || "session",
            fields: {
                expiresAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_session1 = options.session) === null || _options_session1 === void 0 ? void 0 : (_options_session_fields = _options_session1.fields) === null || _options_session_fields === void 0 ? void 0 : _options_session_fields.expiresAt) || "expiresAt"
                },
                token: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_session2 = options.session) === null || _options_session2 === void 0 ? void 0 : (_options_session_fields1 = _options_session2.fields) === null || _options_session_fields1 === void 0 ? void 0 : _options_session_fields1.token) || "token",
                    unique: true
                },
                createdAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_session3 = options.session) === null || _options_session3 === void 0 ? void 0 : (_options_session_fields2 = _options_session3.fields) === null || _options_session_fields2 === void 0 ? void 0 : _options_session_fields2.createdAt) || "createdAt",
                    defaultValue: ()=>/* @__PURE__ */ new Date()
                },
                updatedAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_session4 = options.session) === null || _options_session4 === void 0 ? void 0 : (_options_session_fields3 = _options_session4.fields) === null || _options_session_fields3 === void 0 ? void 0 : _options_session_fields3.updatedAt) || "updatedAt",
                    onUpdate: ()=>/* @__PURE__ */ new Date()
                },
                ipAddress: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_session5 = options.session) === null || _options_session5 === void 0 ? void 0 : (_options_session_fields4 = _options_session5.fields) === null || _options_session_fields4 === void 0 ? void 0 : _options_session_fields4.ipAddress) || "ipAddress"
                },
                userAgent: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_session6 = options.session) === null || _options_session6 === void 0 ? void 0 : (_options_session_fields5 = _options_session6.fields) === null || _options_session_fields5 === void 0 ? void 0 : _options_session_fields5.userAgent) || "userAgent"
                },
                userId: {
                    type: "string",
                    fieldName: ((_options_session7 = options.session) === null || _options_session7 === void 0 ? void 0 : (_options_session_fields6 = _options_session7.fields) === null || _options_session_fields6 === void 0 ? void 0 : _options_session_fields6.userId) || "userId",
                    references: {
                        model: ((_options_user = options.user) === null || _options_user === void 0 ? void 0 : _options_user.modelName) || "user",
                        field: "id",
                        onDelete: "cascade"
                    },
                    required: true
                },
                ...session === null || session === void 0 ? void 0 : session.fields,
                ...(_options_session8 = options.session) === null || _options_session8 === void 0 ? void 0 : _options_session8.additionalFields
            },
            order: 2
        }
    };
    return {
        user: {
            modelName: ((_options_user1 = options.user) === null || _options_user1 === void 0 ? void 0 : _options_user1.modelName) || "user",
            fields: {
                name: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_user2 = options.user) === null || _options_user2 === void 0 ? void 0 : (_options_user_fields = _options_user2.fields) === null || _options_user_fields === void 0 ? void 0 : _options_user_fields.name) || "name",
                    sortable: true
                },
                email: {
                    type: "string",
                    unique: true,
                    required: true,
                    fieldName: ((_options_user3 = options.user) === null || _options_user3 === void 0 ? void 0 : (_options_user_fields1 = _options_user3.fields) === null || _options_user_fields1 === void 0 ? void 0 : _options_user_fields1.email) || "email",
                    sortable: true
                },
                emailVerified: {
                    type: "boolean",
                    defaultValue: false,
                    required: true,
                    fieldName: ((_options_user4 = options.user) === null || _options_user4 === void 0 ? void 0 : (_options_user_fields2 = _options_user4.fields) === null || _options_user_fields2 === void 0 ? void 0 : _options_user_fields2.emailVerified) || "emailVerified"
                },
                image: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_user5 = options.user) === null || _options_user5 === void 0 ? void 0 : (_options_user_fields3 = _options_user5.fields) === null || _options_user_fields3 === void 0 ? void 0 : _options_user_fields3.image) || "image"
                },
                createdAt: {
                    type: "date",
                    defaultValue: ()=>/* @__PURE__ */ new Date(),
                    required: true,
                    fieldName: ((_options_user6 = options.user) === null || _options_user6 === void 0 ? void 0 : (_options_user_fields4 = _options_user6.fields) === null || _options_user_fields4 === void 0 ? void 0 : _options_user_fields4.createdAt) || "createdAt"
                },
                updatedAt: {
                    type: "date",
                    defaultValue: ()=>/* @__PURE__ */ new Date(),
                    onUpdate: ()=>/* @__PURE__ */ new Date(),
                    required: true,
                    fieldName: ((_options_user7 = options.user) === null || _options_user7 === void 0 ? void 0 : (_options_user_fields5 = _options_user7.fields) === null || _options_user_fields5 === void 0 ? void 0 : _options_user_fields5.updatedAt) || "updatedAt"
                },
                ...user === null || user === void 0 ? void 0 : user.fields,
                ...(_options_user8 = options.user) === null || _options_user8 === void 0 ? void 0 : _options_user8.additionalFields
            },
            order: 1
        },
        //only add session table if it's not stored in secondary storage
        ...!options.secondaryStorage || ((_options_session9 = options.session) === null || _options_session9 === void 0 ? void 0 : _options_session9.storeSessionInDatabase) ? sessionTable : {},
        account: {
            modelName: ((_options_account = options.account) === null || _options_account === void 0 ? void 0 : _options_account.modelName) || "account",
            fields: {
                accountId: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_account1 = options.account) === null || _options_account1 === void 0 ? void 0 : (_options_account_fields = _options_account1.fields) === null || _options_account_fields === void 0 ? void 0 : _options_account_fields.accountId) || "accountId"
                },
                providerId: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_account2 = options.account) === null || _options_account2 === void 0 ? void 0 : (_options_account_fields1 = _options_account2.fields) === null || _options_account_fields1 === void 0 ? void 0 : _options_account_fields1.providerId) || "providerId"
                },
                userId: {
                    type: "string",
                    references: {
                        model: ((_options_user9 = options.user) === null || _options_user9 === void 0 ? void 0 : _options_user9.modelName) || "user",
                        field: "id",
                        onDelete: "cascade"
                    },
                    required: true,
                    fieldName: ((_options_account3 = options.account) === null || _options_account3 === void 0 ? void 0 : (_options_account_fields2 = _options_account3.fields) === null || _options_account_fields2 === void 0 ? void 0 : _options_account_fields2.userId) || "userId"
                },
                accessToken: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_account4 = options.account) === null || _options_account4 === void 0 ? void 0 : (_options_account_fields3 = _options_account4.fields) === null || _options_account_fields3 === void 0 ? void 0 : _options_account_fields3.accessToken) || "accessToken"
                },
                refreshToken: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_account5 = options.account) === null || _options_account5 === void 0 ? void 0 : (_options_account_fields4 = _options_account5.fields) === null || _options_account_fields4 === void 0 ? void 0 : _options_account_fields4.refreshToken) || "refreshToken"
                },
                idToken: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_account6 = options.account) === null || _options_account6 === void 0 ? void 0 : (_options_account_fields5 = _options_account6.fields) === null || _options_account_fields5 === void 0 ? void 0 : _options_account_fields5.idToken) || "idToken"
                },
                accessTokenExpiresAt: {
                    type: "date",
                    required: false,
                    fieldName: ((_options_account7 = options.account) === null || _options_account7 === void 0 ? void 0 : (_options_account_fields6 = _options_account7.fields) === null || _options_account_fields6 === void 0 ? void 0 : _options_account_fields6.accessTokenExpiresAt) || "accessTokenExpiresAt"
                },
                refreshTokenExpiresAt: {
                    type: "date",
                    required: false,
                    fieldName: ((_options_account8 = options.account) === null || _options_account8 === void 0 ? void 0 : (_options_account_fields7 = _options_account8.fields) === null || _options_account_fields7 === void 0 ? void 0 : _options_account_fields7.accessTokenExpiresAt) || "refreshTokenExpiresAt"
                },
                scope: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_account9 = options.account) === null || _options_account9 === void 0 ? void 0 : (_options_account_fields8 = _options_account9.fields) === null || _options_account_fields8 === void 0 ? void 0 : _options_account_fields8.scope) || "scope"
                },
                password: {
                    type: "string",
                    required: false,
                    fieldName: ((_options_account10 = options.account) === null || _options_account10 === void 0 ? void 0 : (_options_account_fields9 = _options_account10.fields) === null || _options_account_fields9 === void 0 ? void 0 : _options_account_fields9.password) || "password"
                },
                createdAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_account11 = options.account) === null || _options_account11 === void 0 ? void 0 : (_options_account_fields10 = _options_account11.fields) === null || _options_account_fields10 === void 0 ? void 0 : _options_account_fields10.createdAt) || "createdAt",
                    defaultValue: ()=>/* @__PURE__ */ new Date()
                },
                updatedAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_account12 = options.account) === null || _options_account12 === void 0 ? void 0 : (_options_account_fields11 = _options_account12.fields) === null || _options_account_fields11 === void 0 ? void 0 : _options_account_fields11.updatedAt) || "updatedAt",
                    onUpdate: ()=>/* @__PURE__ */ new Date()
                },
                ...account === null || account === void 0 ? void 0 : account.fields
            },
            order: 3
        },
        verification: {
            modelName: ((_options_verification = options.verification) === null || _options_verification === void 0 ? void 0 : _options_verification.modelName) || "verification",
            fields: {
                identifier: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_verification1 = options.verification) === null || _options_verification1 === void 0 ? void 0 : (_options_verification_fields = _options_verification1.fields) === null || _options_verification_fields === void 0 ? void 0 : _options_verification_fields.identifier) || "identifier"
                },
                value: {
                    type: "string",
                    required: true,
                    fieldName: ((_options_verification2 = options.verification) === null || _options_verification2 === void 0 ? void 0 : (_options_verification_fields1 = _options_verification2.fields) === null || _options_verification_fields1 === void 0 ? void 0 : _options_verification_fields1.value) || "value"
                },
                expiresAt: {
                    type: "date",
                    required: true,
                    fieldName: ((_options_verification3 = options.verification) === null || _options_verification3 === void 0 ? void 0 : (_options_verification_fields2 = _options_verification3.fields) === null || _options_verification_fields2 === void 0 ? void 0 : _options_verification_fields2.expiresAt) || "expiresAt"
                },
                createdAt: {
                    type: "date",
                    required: true,
                    defaultValue: ()=>/* @__PURE__ */ new Date(),
                    fieldName: ((_options_verification4 = options.verification) === null || _options_verification4 === void 0 ? void 0 : (_options_verification_fields3 = _options_verification4.fields) === null || _options_verification_fields3 === void 0 ? void 0 : _options_verification_fields3.createdAt) || "createdAt"
                },
                updatedAt: {
                    type: "date",
                    required: true,
                    defaultValue: ()=>/* @__PURE__ */ new Date(),
                    onUpdate: ()=>/* @__PURE__ */ new Date(),
                    fieldName: ((_options_verification5 = options.verification) === null || _options_verification5 === void 0 ? void 0 : (_options_verification_fields4 = _options_verification5.fields) === null || _options_verification_fields4 === void 0 ? void 0 : _options_verification_fields4.updatedAt) || "updatedAt"
                }
            },
            order: 4
        },
        ...pluginTables,
        ...shouldAddRateLimitTable ? rateLimitTable : {}
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BuBqXPUp.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>createAdapter
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function withApplyDefault(value, field, action) {
    if (action === "update") {
        if (value === void 0 && field.onUpdate !== void 0) {
            if (typeof field.onUpdate === "function") {
                return field.onUpdate();
            }
            return field.onUpdate;
        }
        return value;
    }
    if (value === void 0 || value === null) {
        if (field.defaultValue !== void 0) {
            if (typeof field.defaultValue === "function") {
                return field.defaultValue();
            }
            return field.defaultValue;
        }
    }
    return value;
}
let debugLogs = [];
let transactionId = -1;
const colors = {
    reset: "\x1B[0m",
    bright: "\x1B[1m",
    dim: "\x1B[2m",
    fg: {
        yellow: "\x1B[33m",
        magenta: "\x1B[35m"
    },
    bg: {
        black: "\x1B[40m"
    }
};
const createAdapter = (param)=>{
    let { adapter, config: cfg } = param;
    return (options)=>{
        var _options_advanced_database, _options_advanced, _config_debugLogs;
        var _cfg_supportsBooleans, _cfg_supportsDates, _cfg_supportsJSON, _cfg_adapterName, _cfg_supportsNumericIds;
        const config = {
            ...cfg,
            supportsBooleans: (_cfg_supportsBooleans = cfg.supportsBooleans) !== null && _cfg_supportsBooleans !== void 0 ? _cfg_supportsBooleans : true,
            supportsDates: (_cfg_supportsDates = cfg.supportsDates) !== null && _cfg_supportsDates !== void 0 ? _cfg_supportsDates : true,
            supportsJSON: (_cfg_supportsJSON = cfg.supportsJSON) !== null && _cfg_supportsJSON !== void 0 ? _cfg_supportsJSON : false,
            adapterName: (_cfg_adapterName = cfg.adapterName) !== null && _cfg_adapterName !== void 0 ? _cfg_adapterName : cfg.adapterId,
            supportsNumericIds: (_cfg_supportsNumericIds = cfg.supportsNumericIds) !== null && _cfg_supportsNumericIds !== void 0 ? _cfg_supportsNumericIds : true
        };
        if (((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId) === true && config.supportsNumericIds === false) {
            throw new Error("[".concat(config.adapterName, '] Your database or database adapter does not support numeric ids. Please disable "useNumberId" in your config.'));
        }
        const schema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options);
        const getDefaultFieldName = (param)=>{
            let { field, model: unsafe_model } = param;
            var _schema_model;
            if (field === "id" || field === "_id") {
                return "id";
            }
            const model = getDefaultModelName(unsafe_model);
            let f = (_schema_model = schema[model]) === null || _schema_model === void 0 ? void 0 : _schema_model.fields[field];
            if (!f) {
                var _schema_model1;
                f = Object.values((_schema_model1 = schema[model]) === null || _schema_model1 === void 0 ? void 0 : _schema_model1.fields).find((f2)=>f2.fieldName === field);
            }
            if (!f) {
                debugLog("Field ".concat(field, " not found in model ").concat(model));
                debugLog("Schema:", schema);
                throw new Error("Field ".concat(field, " not found in model ").concat(model));
            }
            return field;
        };
        const getDefaultModelName = (model)=>{
            if (config.usePlural && model.charAt(model.length - 1) === "s") {
                let pluralessModel = model.slice(0, -1);
                let m2 = schema[pluralessModel] ? pluralessModel : void 0;
                if (!m2) {
                    var _Object_entries_find;
                    m2 = (_Object_entries_find = Object.entries(schema).find((param)=>{
                        let [_, f] = param;
                        return f.modelName === pluralessModel;
                    })) === null || _Object_entries_find === void 0 ? void 0 : _Object_entries_find[0];
                }
                if (m2) {
                    return m2;
                }
            }
            let m = schema[model] ? model : void 0;
            if (!m) {
                var _Object_entries_find1;
                m = (_Object_entries_find1 = Object.entries(schema).find((param)=>{
                    let [_, f] = param;
                    return f.modelName === model;
                })) === null || _Object_entries_find1 === void 0 ? void 0 : _Object_entries_find1[0];
            }
            if (!m) {
                debugLog('Model "'.concat(model, '" not found in schema'));
                debugLog("Schema:", schema);
                throw new Error('Model "'.concat(model, '" not found in schema'));
            }
            return m;
        };
        const getModelName = (model)=>{
            const defaultModelKey = getDefaultModelName(model);
            const usePlural = config && config.usePlural;
            const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;
            if (useCustomModelName) {
                return usePlural ? "".concat(schema[defaultModelKey].modelName, "s") : schema[defaultModelKey].modelName;
            }
            return usePlural ? "".concat(model, "s") : model;
        };
        function getFieldName(param) {
            let { model: model_name, field: field_name } = param;
            var _schema_model_fields_field, _schema_model;
            const model = getDefaultModelName(model_name);
            const field = getDefaultFieldName({
                model,
                field: field_name
            });
            return ((_schema_model = schema[model]) === null || _schema_model === void 0 ? void 0 : (_schema_model_fields_field = _schema_model.fields[field]) === null || _schema_model_fields_field === void 0 ? void 0 : _schema_model_fields_field.fieldName) || field;
        }
        const debugLog = function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            if (config.debugLogs === true || typeof config.debugLogs === "object") {
                var _config_debugLogs_logCondition, _config_debugLogs;
                if (typeof config.debugLogs === "object" && "isRunningAdapterTests" in config.debugLogs) {
                    if (config.debugLogs.isRunningAdapterTests) {
                        args.shift();
                        debugLogs.push(args);
                    }
                    return;
                }
                if (typeof config.debugLogs === "object" && config.debugLogs.logCondition && !((_config_debugLogs_logCondition = (_config_debugLogs = config.debugLogs).logCondition) === null || _config_debugLogs_logCondition === void 0 ? void 0 : _config_debugLogs_logCondition.call(_config_debugLogs))) {
                    return;
                }
                if (typeof args[0] === "object" && "method" in args[0]) {
                    const method = args.shift().method;
                    if (typeof config.debugLogs === "object") {
                        if (method === "create" && !config.debugLogs.create) {
                            return;
                        } else if (method === "update" && !config.debugLogs.update) {
                            return;
                        } else if (method === "updateMany" && !config.debugLogs.updateMany) {
                            return;
                        } else if (method === "findOne" && !config.debugLogs.findOne) {
                            return;
                        } else if (method === "findMany" && !config.debugLogs.findMany) {
                            return;
                        } else if (method === "delete" && !config.debugLogs.delete) {
                            return;
                        } else if (method === "deleteMany" && !config.debugLogs.deleteMany) {
                            return;
                        } else if (method === "count" && !config.debugLogs.count) {
                            return;
                        }
                    }
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].info("[".concat(config.adapterName, "]"), ...args);
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].info("[".concat(config.adapterName, "]"), ...args);
                }
            }
        };
        const idField = (param)=>{
            let { customModelName, forceAllowId } = param;
            var _options_advanced_database, _options_advanced, _options_advanced_database1, _options_advanced1;
            const shouldGenerateId = !config.disableIdGeneration && !((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId) && !forceAllowId;
            const model = getDefaultModelName(customModelName !== null && customModelName !== void 0 ? customModelName : "id");
            return {
                type: ((_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_database1 = _options_advanced1.database) === null || _options_advanced_database1 === void 0 ? void 0 : _options_advanced_database1.useNumberId) ? "number" : "string",
                required: shouldGenerateId ? true : false,
                ...shouldGenerateId ? {
                    defaultValue () {
                        var _options_advanced_database, _options_advanced, _options_advanced_database1, _options_advanced1, _options_advanced2;
                        if (config.disableIdGeneration) return void 0;
                        const useNumberId = (_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId;
                        let generateId$1 = (_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_database1 = _options_advanced1.database) === null || _options_advanced_database1 === void 0 ? void 0 : _options_advanced_database1.generateId;
                        if (((_options_advanced2 = options.advanced) === null || _options_advanced2 === void 0 ? void 0 : _options_advanced2.generateId) !== void 0) {
                            var _options_advanced3;
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].warn("Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.");
                            generateId$1 = (_options_advanced3 = options.advanced) === null || _options_advanced3 === void 0 ? void 0 : _options_advanced3.generateId;
                        }
                        if (generateId$1 === false || useNumberId) return void 0;
                        if (generateId$1) {
                            return generateId$1({
                                model
                            });
                        }
                        if (config.customIdGenerator) {
                            return config.customIdGenerator({
                                model
                            });
                        }
                        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])();
                    }
                } : {}
            };
        };
        const getFieldAttributes = (param)=>{
            let { model, field } = param;
            const defaultModelName = getDefaultModelName(model);
            const defaultFieldName = getDefaultFieldName({
                field,
                model
            });
            const fields = schema[defaultModelName].fields;
            fields.id = idField({
                customModelName: defaultModelName
            });
            return fields[defaultFieldName];
        };
        const adapterInstance = adapter({
            options,
            schema,
            debugLog,
            getFieldName,
            getModelName,
            getDefaultModelName,
            getDefaultFieldName,
            getFieldAttributes
        });
        const transformInput = async (data, unsafe_model, action, forceAllowId)=>{
            var _options_advanced_database, _options_advanced;
            const transformedData = {};
            const fields = schema[unsafe_model].fields;
            var _config_mapKeysTransformInput;
            const newMappedKeys = (_config_mapKeysTransformInput = config.mapKeysTransformInput) !== null && _config_mapKeysTransformInput !== void 0 ? _config_mapKeysTransformInput : {};
            if (!config.disableIdGeneration && !((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId)) {
                fields.id = idField({
                    customModelName: unsafe_model,
                    forceAllowId: forceAllowId && "id" in data
                });
            }
            for(const field in fields){
                var _fieldAttributes_transform, _fieldAttributes_transform1, _fieldAttributes_references, _options_advanced_database1, _options_advanced1;
                const value = data[field];
                const fieldAttributes = fields[field];
                let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;
                if (value === void 0 && (fieldAttributes.defaultValue === void 0 && !((_fieldAttributes_transform = fieldAttributes.transform) === null || _fieldAttributes_transform === void 0 ? void 0 : _fieldAttributes_transform.input) && !(action === "update" && fieldAttributes.onUpdate) || action === "update" && !fieldAttributes.onUpdate)) {
                    continue;
                }
                let newValue = withApplyDefault(value, fieldAttributes, action);
                if ((_fieldAttributes_transform1 = fieldAttributes.transform) === null || _fieldAttributes_transform1 === void 0 ? void 0 : _fieldAttributes_transform1.input) {
                    newValue = await fieldAttributes.transform.input(newValue);
                }
                if (((_fieldAttributes_references = fieldAttributes.references) === null || _fieldAttributes_references === void 0 ? void 0 : _fieldAttributes_references.field) === "id" && ((_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_database1 = _options_advanced1.database) === null || _options_advanced_database1 === void 0 ? void 0 : _options_advanced_database1.useNumberId)) {
                    if (Array.isArray(newValue)) {
                        newValue = newValue.map(Number);
                    } else {
                        newValue = Number(newValue);
                    }
                } else if (config.supportsJSON === false && typeof newValue === "object" && fieldAttributes.type === "json") {
                    newValue = JSON.stringify(newValue);
                } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === "date") {
                    newValue = newValue.toISOString();
                } else if (config.supportsBooleans === false && typeof newValue === "boolean") {
                    newValue = newValue ? 1 : 0;
                }
                if (config.customTransformInput) {
                    newValue = config.customTransformInput({
                        data: newValue,
                        action,
                        field: newFieldName,
                        fieldAttributes,
                        model: unsafe_model,
                        schema,
                        options
                    });
                }
                if (newValue !== void 0) {
                    transformedData[newFieldName] = newValue;
                }
            }
            return transformedData;
        };
        const transformOutput = async function(data, unsafe_model) {
            let select = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
            var _Object_entries_find, _options_advanced_database, _options_advanced;
            if (!data) return null;
            var _config_mapKeysTransformOutput;
            const newMappedKeys = (_config_mapKeysTransformOutput = config.mapKeysTransformOutput) !== null && _config_mapKeysTransformOutput !== void 0 ? _config_mapKeysTransformOutput : {};
            const transformedData = {};
            const tableSchema = schema[unsafe_model].fields;
            const idKey = (_Object_entries_find = Object.entries(newMappedKeys).find((param)=>{
                let [_, v] = param;
                return v === "id";
            })) === null || _Object_entries_find === void 0 ? void 0 : _Object_entries_find[0];
            tableSchema[idKey !== null && idKey !== void 0 ? idKey : "id"] = {
                type: ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId) ? "number" : "string"
            };
            for(const key in tableSchema){
                if (select.length && !select.includes(key)) {
                    continue;
                }
                const field = tableSchema[key];
                if (field) {
                    var _Object_entries_find1, _field_transform, _field_references;
                    const originalKey = field.fieldName || key;
                    let newValue = data[((_Object_entries_find1 = Object.entries(newMappedKeys).find((param)=>{
                        let [_, v] = param;
                        return v === originalKey;
                    })) === null || _Object_entries_find1 === void 0 ? void 0 : _Object_entries_find1[0]) || originalKey];
                    if ((_field_transform = field.transform) === null || _field_transform === void 0 ? void 0 : _field_transform.output) {
                        newValue = await field.transform.output(newValue);
                    }
                    let newFieldName = newMappedKeys[key] || key;
                    if (originalKey === "id" || ((_field_references = field.references) === null || _field_references === void 0 ? void 0 : _field_references.field) === "id") {
                        if (typeof newValue !== "undefined") newValue = String(newValue);
                    } else if (config.supportsJSON === false && typeof newValue === "string" && field.type === "json") {
                        newValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(newValue);
                    } else if (config.supportsDates === false && typeof newValue === "string" && field.type === "date") {
                        newValue = new Date(newValue);
                    } else if (config.supportsBooleans === false && typeof newValue === "number" && field.type === "boolean") {
                        newValue = newValue === 1;
                    }
                    if (config.customTransformOutput) {
                        newValue = config.customTransformOutput({
                            data: newValue,
                            field: newFieldName,
                            fieldAttributes: field,
                            select,
                            model: unsafe_model,
                            schema,
                            options
                        });
                    }
                    transformedData[newFieldName] = newValue;
                }
            }
            return transformedData;
        };
        const transformWhereClause = (param)=>{
            let { model, where } = param;
            if (!where) return void 0;
            var _config_mapKeysTransformInput;
            const newMappedKeys = (_config_mapKeysTransformInput = config.mapKeysTransformInput) !== null && _config_mapKeysTransformInput !== void 0 ? _config_mapKeysTransformInput : {};
            return where.map((w)=>{
                var _fieldAttr_references;
                const { field: unsafe_field, value, operator = "eq", connector = "AND" } = w;
                if (operator === "in") {
                    if (!Array.isArray(value)) {
                        throw new Error("Value must be an array");
                    }
                }
                const defaultModelName = getDefaultModelName(model);
                const defaultFieldName = getDefaultFieldName({
                    field: unsafe_field,
                    model
                });
                const fieldName = newMappedKeys[defaultFieldName] || getFieldName({
                    field: defaultFieldName,
                    model: defaultModelName
                });
                const fieldAttr = getFieldAttributes({
                    field: defaultFieldName,
                    model: defaultModelName
                });
                if (defaultFieldName === "id" || ((_fieldAttr_references = fieldAttr.references) === null || _fieldAttr_references === void 0 ? void 0 : _fieldAttr_references.field) === "id") {
                    var _options_advanced_database, _options_advanced;
                    if ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId) {
                        if (Array.isArray(value)) {
                            return {
                                operator,
                                connector,
                                field: fieldName,
                                value: value.map(Number)
                            };
                        }
                        return {
                            operator,
                            connector,
                            field: fieldName,
                            value: Number(value)
                        };
                    }
                }
                return {
                    operator,
                    connector,
                    field: fieldName,
                    value
                };
            });
        };
        var _adapterInstance_options;
        return {
            create: async (param)=>{
                let { data: unsafeData, model: unsafeModel, select, forceAllowId = false } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                if ("id" in unsafeData && !forceAllowId) {
                    var _err_stack;
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].warn("[".concat(config.adapterName, "] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the `forceAllowId` parameter. The id will be ignored."));
                    const err = new Error();
                    const stack = (_err_stack = err.stack) === null || _err_stack === void 0 ? void 0 : _err_stack.split("\n").filter((_, i)=>i !== 1).join("\n").replace("Error:", "Create method with `id` being called at:");
                    console.log(stack);
                    unsafeData.id = void 0;
                }
                debugLog({
                    method: "create"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 4)), "".concat(formatMethod("create"), " ").concat(formatAction("Unsafe Input"), ":"), {
                    model,
                    data: unsafeData
                });
                const data = await transformInput(unsafeData, unsafeModel, "create", forceAllowId);
                debugLog({
                    method: "create"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 4)), "".concat(formatMethod("create"), " ").concat(formatAction("Parsed Input"), ":"), {
                    model,
                    data
                });
                const res = await adapterInstance.create({
                    data,
                    model
                });
                debugLog({
                    method: "create"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(3, 4)), "".concat(formatMethod("create"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    res
                });
                const transformed = await transformOutput(res, unsafeModel, select);
                debugLog({
                    method: "create"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(4, 4)), "".concat(formatMethod("create"), " ").concat(formatAction("Parsed Result"), ":"), {
                    model,
                    data: transformed
                });
                return transformed;
            },
            update: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere, update: unsafeData } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "update"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 4)), "".concat(formatMethod("update"), " ").concat(formatAction("Unsafe Input"), ":"), {
                    model,
                    data: unsafeData
                });
                const data = await transformInput(unsafeData, unsafeModel, "update");
                debugLog({
                    method: "update"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 4)), "".concat(formatMethod("update"), " ").concat(formatAction("Parsed Input"), ":"), {
                    model,
                    data
                });
                const res = await adapterInstance.update({
                    model,
                    where,
                    update: data
                });
                debugLog({
                    method: "update"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(3, 4)), "".concat(formatMethod("update"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    data: res
                });
                const transformed = await transformOutput(res, unsafeModel);
                debugLog({
                    method: "update"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(4, 4)), "".concat(formatMethod("update"), " ").concat(formatAction("Parsed Result"), ":"), {
                    model,
                    data: transformed
                });
                return transformed;
            },
            updateMany: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere, update: unsafeData } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "updateMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 4)), "".concat(formatMethod("updateMany"), " ").concat(formatAction("Unsafe Input"), ":"), {
                    model,
                    data: unsafeData
                });
                const data = await transformInput(unsafeData, unsafeModel, "update");
                debugLog({
                    method: "updateMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 4)), "".concat(formatMethod("updateMany"), " ").concat(formatAction("Parsed Input"), ":"), {
                    model,
                    data
                });
                const updatedCount = await adapterInstance.updateMany({
                    model,
                    where,
                    update: data
                });
                debugLog({
                    method: "updateMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(3, 4)), "".concat(formatMethod("updateMany"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    data: updatedCount
                });
                debugLog({
                    method: "updateMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(4, 4)), "".concat(formatMethod("updateMany"), " ").concat(formatAction("Parsed Result"), ":"), {
                    model,
                    data: updatedCount
                });
                return updatedCount;
            },
            findOne: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere, select } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "findOne"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 3)), "".concat(formatMethod("findOne"), ":"), {
                    model,
                    where,
                    select
                });
                const res = await adapterInstance.findOne({
                    model,
                    where,
                    select
                });
                debugLog({
                    method: "findOne"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 3)), "".concat(formatMethod("findOne"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    data: res
                });
                const transformed = await transformOutput(res, unsafeModel, select);
                debugLog({
                    method: "findOne"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(3, 3)), "".concat(formatMethod("findOne"), " ").concat(formatAction("Parsed Result"), ":"), {
                    model,
                    data: transformed
                });
                return transformed;
            },
            findMany: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere, limit: unsafeLimit, sortBy, offset } = param;
                var _options_advanced_database, _options_advanced;
                transactionId++;
                let thisTransactionId = transactionId;
                var _ref;
                const limit = (_ref = unsafeLimit !== null && unsafeLimit !== void 0 ? unsafeLimit : (_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.defaultFindManyLimit) !== null && _ref !== void 0 ? _ref : 100;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "findMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 3)), "".concat(formatMethod("findMany"), ":"), {
                    model,
                    where,
                    limit,
                    sortBy,
                    offset
                });
                const res = await adapterInstance.findMany({
                    model,
                    where,
                    limit,
                    sortBy,
                    offset
                });
                debugLog({
                    method: "findMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 3)), "".concat(formatMethod("findMany"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    data: res
                });
                const transformed = await Promise.all(res.map(async (r)=>await transformOutput(r, unsafeModel)));
                debugLog({
                    method: "findMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(3, 3)), "".concat(formatMethod("findMany"), " ").concat(formatAction("Parsed Result"), ":"), {
                    model,
                    data: transformed
                });
                return transformed;
            },
            delete: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "delete"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 2)), "".concat(formatMethod("delete"), ":"), {
                    model,
                    where
                });
                await adapterInstance.delete({
                    model,
                    where
                });
                debugLog({
                    method: "delete"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 2)), "".concat(formatMethod("delete"), " ").concat(formatAction("DB Result"), ":"), {
                    model
                });
            },
            deleteMany: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "deleteMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 2)), "".concat(formatMethod("deleteMany"), " ").concat(formatAction("DeleteMany"), ":"), {
                    model,
                    where
                });
                const res = await adapterInstance.deleteMany({
                    model,
                    where
                });
                debugLog({
                    method: "deleteMany"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 2)), "".concat(formatMethod("deleteMany"), " ").concat(formatAction("DB Result"), ":"), {
                    model,
                    data: res
                });
                return res;
            },
            count: async (param)=>{
                let { model: unsafeModel, where: unsafeWhere } = param;
                transactionId++;
                let thisTransactionId = transactionId;
                const model = getModelName(unsafeModel);
                const where = transformWhereClause({
                    model: unsafeModel,
                    where: unsafeWhere
                });
                debugLog({
                    method: "count"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(1, 2)), "".concat(formatMethod("count"), ":"), {
                    model,
                    where
                });
                const res = await adapterInstance.count({
                    model,
                    where
                });
                debugLog({
                    method: "count"
                }, "".concat(formatTransactionId(thisTransactionId), " ").concat(formatStep(2, 2)), "".concat(formatMethod("count"), ":"), {
                    model,
                    data: res
                });
                return res;
            },
            createSchema: adapterInstance.createSchema ? async (_, file)=>{
                var _options_session;
                const tables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options);
                if (options.secondaryStorage && !((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase)) {
                    delete tables.session;
                }
                if (options.rateLimit && options.rateLimit.storage === "database" && // rate-limit will default to enabled in production,
                // and given storage is database, it will try to use the rate-limit table,
                // so we should make sure to generate rate-limit table schema
                (typeof options.rateLimit.enabled === "undefined" || // and of course if they forcefully set to true, then they want rate-limit,
                // thus we should also generate rate-limit table schema
                options.rateLimit.enabled === true)) {
                    var _options_rateLimit_fields, _options_rateLimit_fields1, _options_rateLimit_fields2;
                    var _options_rateLimit_modelName, _options_rateLimit_fields_key, _options_rateLimit_fields_count, _options_rateLimit_fields_lastRequest;
                    tables.ratelimit = {
                        modelName: (_options_rateLimit_modelName = options.rateLimit.modelName) !== null && _options_rateLimit_modelName !== void 0 ? _options_rateLimit_modelName : "ratelimit",
                        fields: {
                            key: {
                                type: "string",
                                unique: true,
                                required: true,
                                fieldName: (_options_rateLimit_fields_key = (_options_rateLimit_fields = options.rateLimit.fields) === null || _options_rateLimit_fields === void 0 ? void 0 : _options_rateLimit_fields.key) !== null && _options_rateLimit_fields_key !== void 0 ? _options_rateLimit_fields_key : "key"
                            },
                            count: {
                                type: "number",
                                required: true,
                                fieldName: (_options_rateLimit_fields_count = (_options_rateLimit_fields1 = options.rateLimit.fields) === null || _options_rateLimit_fields1 === void 0 ? void 0 : _options_rateLimit_fields1.count) !== null && _options_rateLimit_fields_count !== void 0 ? _options_rateLimit_fields_count : "count"
                            },
                            lastRequest: {
                                type: "number",
                                required: true,
                                bigint: true,
                                defaultValue: ()=>Date.now(),
                                fieldName: (_options_rateLimit_fields_lastRequest = (_options_rateLimit_fields2 = options.rateLimit.fields) === null || _options_rateLimit_fields2 === void 0 ? void 0 : _options_rateLimit_fields2.lastRequest) !== null && _options_rateLimit_fields_lastRequest !== void 0 ? _options_rateLimit_fields_lastRequest : "lastRequest"
                            }
                        }
                    };
                }
                return adapterInstance.createSchema({
                    file,
                    tables
                });
            } : void 0,
            options: {
                adapterConfig: config,
                ...(_adapterInstance_options = adapterInstance.options) !== null && _adapterInstance_options !== void 0 ? _adapterInstance_options : {}
            },
            id: config.adapterId,
            // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.
            // This would then be used during our adapter-tests to help print debug logs if a test fails.
            //@ts-expect-error - ^^
            ...((_config_debugLogs = config.debugLogs) === null || _config_debugLogs === void 0 ? void 0 : _config_debugLogs.isRunningAdapterTests) ? {
                adapterTestDebugLogs: {
                    resetDebugLogs () {
                        debugLogs = [];
                    },
                    printDebugLogs () {
                        const separator = "─".repeat(80);
                        let log = debugLogs.reverse().map((log2)=>{
                            log2[0] = "\n".concat(log2[0]);
                            return [
                                ...log2,
                                "\n"
                            ];
                        }).reduce((prev, curr)=>{
                            return [
                                ...curr,
                                ...prev
                            ];
                        }, [
                            "\n".concat(separator)
                        ]);
                        console.log(...log);
                    }
                }
            } : {}
        };
    };
};
function formatTransactionId(transactionId2) {
    return "".concat(colors.fg.magenta, "#").concat(transactionId2).concat(colors.reset);
}
function formatStep(step, total) {
    return "".concat(colors.bg.black).concat(colors.fg.yellow, "[").concat(step, "/").concat(total, "]").concat(colors.reset);
}
function formatMethod(method) {
    return "".concat(colors.bright).concat(method).concat(colors.reset);
}
function formatAction(action) {
    return "".concat(colors.dim, "(").concat(action, ")").concat(colors.reset);
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BuBqXPUp.mjs [app-client] (ecmascript) <export c as createAdapter>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createAdapter",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BuBqXPUp.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.O2VtDkDK.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>getIp
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
;
function getIp(req, options) {
    var _options_advanced_ipAddress, _options_advanced, _options_advanced_ipAddress1, _options_advanced1;
    if ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_ipAddress = _options_advanced.ipAddress) === null || _options_advanced_ipAddress === void 0 ? void 0 : _options_advanced_ipAddress.disableIpTracking) {
        return null;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])()) {
        return "127.0.0.1";
    }
    const headers = "headers" in req ? req.headers : req;
    const defaultHeaders = [
        "x-forwarded-for"
    ];
    const ipHeaders = ((_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_ipAddress1 = _options_advanced1.ipAddress) === null || _options_advanced_ipAddress1 === void 0 ? void 0 : _options_advanced_ipAddress1.ipAddressHeaders) || defaultHeaders;
    for (const key of ipHeaders){
        const value = "get" in headers ? headers.get(key) : headers[key];
        if (typeof value === "string") {
            const ip = value.split(",")[0].trim();
            if (isValidIP(ip)) {
                return ip;
            }
        }
    }
    return null;
}
function isValidIP(ip) {
    const ipv4Regex = /^(\d{1,3}\.){3}\d{1,3}$/;
    if (ipv4Regex.test(ip)) {
        const parts = ip.split(".").map(Number);
        return parts.every((part)=>part >= 0 && part <= 255);
    }
    const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;
    return ipv6Regex.test(ip);
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B8b3lep0.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>createKyselyAdapter,
    "g",
    ()=>getKyselyDatabaseType,
    "k",
    ()=>kyselyAdapter
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$sqlite$2f$sqlite$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$mysql$2f$mysql$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$postgres$2f$postgres$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$mssql$2f$mssql$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$kysely$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/kysely.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BuBqXPUp.mjs [app-client] (ecmascript)");
;
;
function getKyselyDatabaseType(db) {
    if (!db) {
        return null;
    }
    if ("dialect" in db) {
        return getKyselyDatabaseType(db.dialect);
    }
    if ("createDriver" in db) {
        if (db instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$sqlite$2f$sqlite$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SqliteDialect"]) {
            return "sqlite";
        }
        if (db instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$mysql$2f$mysql$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MysqlDialect"]) {
            return "mysql";
        }
        if (db instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$postgres$2f$postgres$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PostgresDialect"]) {
            return "postgres";
        }
        if (db instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$mssql$2f$mssql$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MssqlDialect"]) {
            return "mssql";
        }
    }
    if ("aggregate" in db) {
        return "sqlite";
    }
    if ("getConnection" in db) {
        return "mysql";
    }
    if ("connect" in db) {
        return "postgres";
    }
    if ("fileControl" in db) {
        return "sqlite";
    }
    if ("open" in db && "close" in db && "prepare" in db) {
        return "sqlite";
    }
    return null;
}
const createKyselyAdapter = async (config)=>{
    const db = config.database;
    if (!db) {
        return {
            kysely: null,
            databaseType: null
        };
    }
    if ("db" in db) {
        return {
            kysely: db.db,
            databaseType: db.type
        };
    }
    if ("dialect" in db) {
        return {
            kysely: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$kysely$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Kysely"]({
                dialect: db.dialect
            }),
            databaseType: db.type
        };
    }
    let dialect = void 0;
    const databaseType = getKyselyDatabaseType(db);
    if ("createDriver" in db) {
        dialect = db;
    }
    if ("aggregate" in db && !("createSession" in db)) {
        dialect = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$sqlite$2f$sqlite$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SqliteDialect"]({
            database: db
        });
    }
    if ("getConnection" in db) {
        dialect = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$mysql$2f$mysql$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MysqlDialect"](db);
    }
    if ("connect" in db) {
        dialect = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$dialect$2f$postgres$2f$postgres$2d$dialect$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PostgresDialect"]({
            pool: db
        });
    }
    if ("fileControl" in db) {
        const { BunSqliteDialect } = await __turbopack_context__.A("[project]/node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs [app-client] (ecmascript, async loader)");
        dialect = new BunSqliteDialect({
            database: db
        });
    }
    if ("createSession" in db && typeof window === "undefined") {
        let DatabaseSync = void 0;
        try {
            ({ DatabaseSync } = await Promise.resolve().then(()=>__turbopack_context__.x('node:sqlite', ()=>require('node:sqlite'), true)));
        } catch (error) {
            if (error !== null && typeof error === "object" && "code" in error && error.code !== "ERR_UNKNOWN_BUILTIN_MODULE") {
                throw error;
            }
        }
        if (DatabaseSync && db instanceof DatabaseSync) {
            const { NodeSqliteDialect } = await __turbopack_context__.A("[project]/node_modules/better-auth/dist/chunks/node-sqlite-dialect.mjs [app-client] (ecmascript, async loader)");
            dialect = new NodeSqliteDialect({
                database: db
            });
        }
    }
    return {
        kysely: dialect ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$kysely$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Kysely"]({
            dialect
        }) : null,
        databaseType
    };
};
const kyselyAdapter = (db, config)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])({
        config: {
            adapterId: "kysely",
            adapterName: "Kysely Adapter",
            usePlural: config === null || config === void 0 ? void 0 : config.usePlural,
            debugLogs: config === null || config === void 0 ? void 0 : config.debugLogs,
            supportsBooleans: (config === null || config === void 0 ? void 0 : config.type) === "sqlite" || (config === null || config === void 0 ? void 0 : config.type) === "mssql" || !(config === null || config === void 0 ? void 0 : config.type) ? false : true,
            supportsDates: (config === null || config === void 0 ? void 0 : config.type) === "sqlite" || (config === null || config === void 0 ? void 0 : config.type) === "mssql" || !(config === null || config === void 0 ? void 0 : config.type) ? false : true,
            supportsJSON: false
        },
        adapter: (param)=>{
            let { getFieldName, schema } = param;
            const withReturning = async (values, builder, model, where)=>{
                let res;
                if ((config === null || config === void 0 ? void 0 : config.type) === "mysql") {
                    await builder.execute();
                    const field = values.id ? "id" : where.length > 0 && where[0].field ? where[0].field : "id";
                    if (!values.id && where.length === 0) {
                        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({
                            model,
                            field
                        }), "desc").limit(1).executeTakeFirst();
                        return res;
                    }
                    const value = values[field] || where[0].value;
                    res = await db.selectFrom(model).selectAll().orderBy(getFieldName({
                        model,
                        field
                    }), "desc").where(getFieldName({
                        model,
                        field
                    }), "=", value).limit(1).executeTakeFirst();
                    return res;
                }
                if ((config === null || config === void 0 ? void 0 : config.type) === "mssql") {
                    res = await builder.outputAll("inserted").executeTakeFirst();
                    return res;
                }
                res = await builder.returningAll().executeTakeFirst();
                return res;
            };
            function transformValueToDB(value, model, field) {
                var _schema_model;
                if (field === "id") {
                    return value;
                }
                const { type = "sqlite" } = config || {};
                let f = (_schema_model = schema[model]) === null || _schema_model === void 0 ? void 0 : _schema_model.fields[field];
                if (!f) {
                    f = Object.values(schema).find((f2)=>f2.modelName === model);
                }
                if (f.type === "boolean" && (type === "sqlite" || type === "mssql") && value !== null && value !== void 0) {
                    return value ? 1 : 0;
                }
                if (f.type === "date" && value && value instanceof Date) {
                    return type === "sqlite" ? value.toISOString() : value;
                }
                return value;
            }
            function convertWhereClause(model, w) {
                if (!w) return {
                    and: null,
                    or: null
                };
                const conditions = {
                    and: [],
                    or: []
                };
                w.forEach((condition)=>{
                    let { field: _field, value, operator = "=", connector = "AND" } = condition;
                    const field = getFieldName({
                        model,
                        field: _field
                    });
                    value = transformValueToDB(value, model, _field);
                    const expr = (eb)=>{
                        if (operator.toLowerCase() === "in") {
                            return eb(field, "in", Array.isArray(value) ? value : [
                                value
                            ]);
                        }
                        if (operator === "contains") {
                            return eb(field, "like", "%".concat(value, "%"));
                        }
                        if (operator === "starts_with") {
                            return eb(field, "like", "".concat(value, "%"));
                        }
                        if (operator === "ends_with") {
                            return eb(field, "like", "%".concat(value));
                        }
                        if (operator === "eq") {
                            return eb(field, "=", value);
                        }
                        if (operator === "ne") {
                            return eb(field, "<>", value);
                        }
                        if (operator === "gt") {
                            return eb(field, ">", value);
                        }
                        if (operator === "gte") {
                            return eb(field, ">=", value);
                        }
                        if (operator === "lt") {
                            return eb(field, "<", value);
                        }
                        if (operator === "lte") {
                            return eb(field, "<=", value);
                        }
                        return eb(field, operator, value);
                    };
                    if (connector === "OR") {
                        conditions.or.push(expr);
                    } else {
                        conditions.and.push(expr);
                    }
                });
                return {
                    and: conditions.and.length ? conditions.and : null,
                    or: conditions.or.length ? conditions.or : null
                };
            }
            return {
                async create (param) {
                    let { data, model } = param;
                    const builder = db.insertInto(model).values(data);
                    return await withReturning(data, builder, model, []);
                },
                async findOne (param) {
                    let { model, where, select } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.selectFrom(model).selectAll();
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    const res = await query.executeTakeFirst();
                    if (!res) return null;
                    return res;
                },
                async findMany (param) {
                    let { model, where, limit, offset, sortBy } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.selectFrom(model);
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    if ((config === null || config === void 0 ? void 0 : config.type) === "mssql") {
                        if (!offset) {
                            query = query.top(limit || 100);
                        }
                    } else {
                        query = query.limit(limit || 100);
                    }
                    if (sortBy) {
                        query = query.orderBy(getFieldName({
                            model,
                            field: sortBy.field
                        }), sortBy.direction);
                    }
                    if (offset) {
                        if ((config === null || config === void 0 ? void 0 : config.type) === "mssql") {
                            if (!sortBy) {
                                query = query.orderBy(getFieldName({
                                    model,
                                    field: "id"
                                }));
                            }
                            query = query.offset(offset).fetch(limit || 100);
                        } else {
                            query = query.offset(offset);
                        }
                    }
                    const res = await query.selectAll().execute();
                    if (!res) return [];
                    return res;
                },
                async update (param) {
                    let { model, where, update: values } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.updateTable(model).set(values);
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    return await withReturning(values, query, model, where);
                },
                async updateMany (param) {
                    let { model, where, update: values } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.updateTable(model).set(values);
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    const res = await query.execute();
                    return res.length;
                },
                async count (param) {
                    let { model, where } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.selectFrom(model).select(db.fn.count("id").as("count"));
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    const res = await query.execute();
                    return res[0].count;
                },
                async delete (param) {
                    let { model, where } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.deleteFrom(model);
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    await query.execute();
                },
                async deleteMany (param) {
                    let { model, where } = param;
                    const { and, or } = convertWhereClause(model, where);
                    let query = db.deleteFrom(model);
                    if (and) {
                        query = query.where((eb)=>eb.and(and.map((expr)=>expr(eb))));
                    }
                    if (or) {
                        query = query.where((eb)=>eb.or(or.map((expr)=>expr(eb))));
                    }
                    return (await query.execute()).length;
                },
                options: config
            };
        }
    });
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.C7uhlcDq.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "m",
    ()=>memoryAdapter
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BuBqXPUp.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const memoryAdapter = (db, config)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BuBqXPUp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])({
        config: {
            adapterId: "memory",
            adapterName: "Memory Adapter",
            usePlural: false,
            debugLogs: (config === null || config === void 0 ? void 0 : config.debugLogs) || false,
            customTransformInput (props) {
                var _props_options_advanced_database, _props_options_advanced;
                if (((_props_options_advanced = props.options.advanced) === null || _props_options_advanced === void 0 ? void 0 : (_props_options_advanced_database = _props_options_advanced.database) === null || _props_options_advanced_database === void 0 ? void 0 : _props_options_advanced_database.useNumberId) && props.field === "id" && props.action === "create") {
                    return db[props.model].length + 1;
                }
                return props.data;
            }
        },
        adapter: (param)=>{
            let { getFieldName, options, debugLog } = param;
            function convertWhereClause(where, model) {
                const table = db[model];
                if (!table) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].error("[MemoryAdapter] Model ".concat(model, " not found in the DB"), Object.keys(db));
                    throw new Error("Model ".concat(model, " not found"));
                }
                return table.filter((record)=>{
                    return where.every((clause)=>{
                        let { field, value, operator } = clause;
                        if (operator === "in") {
                            if (!Array.isArray(value)) {
                                throw new Error("Value must be an array");
                            }
                            return value.includes(record[field]);
                        } else if (operator === "contains") {
                            return record[field].includes(value);
                        } else if (operator === "starts_with") {
                            return record[field].startsWith(value);
                        } else if (operator === "ends_with") {
                            return record[field].endsWith(value);
                        } else {
                            return record[field] === value;
                        }
                    });
                });
            }
            return {
                create: async (param)=>{
                    let { model, data } = param;
                    var _options_advanced_database, _options_advanced;
                    if ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_database = _options_advanced.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId) {
                        data.id = db[model].length + 1;
                    }
                    if (!db[model]) {
                        db[model] = [];
                    }
                    db[model].push(data);
                    return data;
                },
                findOne: async (param)=>{
                    let { model, where } = param;
                    const res = convertWhereClause(where, model);
                    const record = res[0] || null;
                    return record;
                },
                findMany: async (param)=>{
                    let { model, where, sortBy, limit, offset } = param;
                    let table = db[model];
                    if (where) {
                        table = convertWhereClause(where, model);
                    }
                    if (sortBy) {
                        table = table.sort((a, b)=>{
                            const field = getFieldName({
                                model,
                                field: sortBy.field
                            });
                            if (sortBy.direction === "asc") {
                                return a[field] > b[field] ? 1 : -1;
                            } else {
                                return a[field] < b[field] ? 1 : -1;
                            }
                        });
                    }
                    if (offset !== void 0) {
                        table = table.slice(offset);
                    }
                    if (limit !== void 0) {
                        table = table.slice(0, limit);
                    }
                    return table;
                },
                count: async (param)=>{
                    let { model } = param;
                    return db[model].length;
                },
                update: async (param)=>{
                    let { model, where, update } = param;
                    const res = convertWhereClause(where, model);
                    res.forEach((record)=>{
                        Object.assign(record, update);
                    });
                    return res[0] || null;
                },
                delete: async (param)=>{
                    let { model, where } = param;
                    const table = db[model];
                    const res = convertWhereClause(where, model);
                    db[model] = table.filter((record)=>!res.includes(record));
                },
                deleteMany: async (param)=>{
                    let { model, where } = param;
                    const table = db[model];
                    const res = convertWhereClause(where, model);
                    let count = 0;
                    db[model] = table.filter((record)=>{
                        if (res.includes(record)) {
                            count++;
                            return false;
                        }
                        return !res.includes(record);
                    });
                    return count;
                },
                updateMany (param) {
                    let { model, where, update } = param;
                    const res = convertWhereClause(where, model);
                    res.forEach((record)=>{
                        Object.assign(record, update);
                    });
                    return res[0] || null;
                }
            };
        }
    });
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CSVCtb77.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>getAdapter,
    "b",
    ()=>convertToDB,
    "c",
    ()=>createInternalAdapter,
    "d",
    ()=>convertFromDB,
    "e",
    ()=>getMigrations,
    "f",
    ()=>getSchema,
    "g",
    ()=>getWithHooks,
    "m",
    ()=>matchType
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_tagged_template_literal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_tagged_template_literal.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$O2VtDkDK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.O2VtDkDK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B8b3lep0.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$C7uhlcDq$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.C7uhlcDq.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$raw$2d$builder$2f$sql$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/kysely/dist/esm/raw-builder/sql.js [app-client] (ecmascript)");
;
function _templateObject() {
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_tagged_template_literal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])([
        "CURRENT_TIMESTAMP"
    ]);
    _templateObject = function() {
        return data;
    };
    return data;
}
function _templateObject1() {
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_tagged_template_literal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])([
        "CURRENT_TIMESTAMP"
    ]);
    _templateObject1 = function() {
        return data;
    };
    return data;
}
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function getWithHooks(adapter, ctx) {
    const hooks = ctx.hooks;
    async function createWithHooks(data, model, customCreateFn, context) {
        let actualData = data;
        for (const hook of hooks || []){
            var _hook_model_create, _hook_model;
            const toRun = (_hook_model = hook[model]) === null || _hook_model === void 0 ? void 0 : (_hook_model_create = _hook_model.create) === null || _hook_model_create === void 0 ? void 0 : _hook_model_create.before;
            if (toRun) {
                const result = await toRun(actualData, context);
                if (result === false) {
                    return null;
                }
                const isObject = typeof result === "object" && "data" in result;
                if (isObject) {
                    actualData = {
                        ...actualData,
                        ...result.data
                    };
                }
            }
        }
        const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;
        const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({
            model,
            data: actualData,
            forceAllowId: true
        }) : customCreated;
        for (const hook of hooks || []){
            var _hook_model_create1, _hook_model1;
            const toRun = (_hook_model1 = hook[model]) === null || _hook_model1 === void 0 ? void 0 : (_hook_model_create1 = _hook_model1.create) === null || _hook_model_create1 === void 0 ? void 0 : _hook_model_create1.after;
            if (toRun) {
                await toRun(created, context);
            }
        }
        return created;
    }
    async function updateWithHooks(data, where, model, customUpdateFn, context) {
        let actualData = data;
        for (const hook of hooks || []){
            var _hook_model_update, _hook_model;
            const toRun = (_hook_model = hook[model]) === null || _hook_model === void 0 ? void 0 : (_hook_model_update = _hook_model.update) === null || _hook_model_update === void 0 ? void 0 : _hook_model_update.before;
            if (toRun) {
                const result = await toRun(data, context);
                if (result === false) {
                    return null;
                }
                const isObject = typeof result === "object";
                actualData = isObject ? result.data : result;
            }
        }
        const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;
        const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({
            model,
            update: actualData,
            where
        }) : customUpdated;
        for (const hook of hooks || []){
            var _hook_model_update1, _hook_model1;
            const toRun = (_hook_model1 = hook[model]) === null || _hook_model1 === void 0 ? void 0 : (_hook_model_update1 = _hook_model1.update) === null || _hook_model_update1 === void 0 ? void 0 : _hook_model_update1.after;
            if (toRun) {
                await toRun(updated, context);
            }
        }
        return updated;
    }
    async function updateManyWithHooks(data, where, model, customUpdateFn, context) {
        let actualData = data;
        for (const hook of hooks || []){
            var _hook_model_update, _hook_model;
            const toRun = (_hook_model = hook[model]) === null || _hook_model === void 0 ? void 0 : (_hook_model_update = _hook_model.update) === null || _hook_model_update === void 0 ? void 0 : _hook_model_update.before;
            if (toRun) {
                const result = await toRun(data, context);
                if (result === false) {
                    return null;
                }
                const isObject = typeof result === "object";
                actualData = isObject ? result.data : result;
            }
        }
        const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;
        const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({
            model,
            update: actualData,
            where
        }) : customUpdated;
        for (const hook of hooks || []){
            var _hook_model_update1, _hook_model1;
            const toRun = (_hook_model1 = hook[model]) === null || _hook_model1 === void 0 ? void 0 : (_hook_model_update1 = _hook_model1.update) === null || _hook_model_update1 === void 0 ? void 0 : _hook_model_update1.after;
            if (toRun) {
                await toRun(updated, context);
            }
        }
        return updated;
    }
    return {
        createWithHooks,
        updateWithHooks,
        updateManyWithHooks
    };
}
const createInternalAdapter = (adapter, ctx)=>{
    var _options_session;
    const logger = ctx.logger;
    const options = ctx.options;
    const secondaryStorage = options.secondaryStorage;
    const sessionExpiration = ((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.expiresIn) || 60 * 60 * 24 * 7;
    const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);
    return {
        createOAuthUser: async (user, account, context)=>{
            const createdUser = await createWithHooks({
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...user
            }, "user", void 0, context);
            const createdAccount = await createWithHooks({
                ...account,
                userId: createdUser.id,
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date()
            }, "account", void 0, context);
            return {
                user: createdUser,
                account: createdAccount
            };
        },
        createUser: async (user, context)=>{
            var _user_email;
            const createdUser = await createWithHooks({
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...user,
                email: (_user_email = user.email) === null || _user_email === void 0 ? void 0 : _user_email.toLowerCase()
            }, "user", void 0, context);
            return createdUser;
        },
        createAccount: async (account, context)=>{
            const createdAccount = await createWithHooks({
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...account
            }, "account", void 0, context);
            return createdAccount;
        },
        listSessions: async (userId)=>{
            if (secondaryStorage) {
                const currentList = await secondaryStorage.get("active-sessions-".concat(userId));
                if (!currentList) return [];
                const list = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(currentList) || [];
                const now = Date.now();
                const validSessions = list.filter((s)=>s.expiresAt > now);
                const sessions2 = [];
                for (const session of validSessions){
                    const sessionStringified = await secondaryStorage.get(session.token);
                    if (sessionStringified) {
                        const s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(sessionStringified);
                        if (!s) return [];
                        const parsedSession = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])(ctx.options, {
                            ...s.session,
                            expiresAt: new Date(s.session.expiresAt)
                        });
                        sessions2.push(parsedSession);
                    }
                }
                return sessions2;
            }
            const sessions = await adapter.findMany({
                model: "session",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
            return sessions;
        },
        listUsers: async (limit, offset, sortBy, where)=>{
            const users = await adapter.findMany({
                model: "user",
                limit,
                offset,
                sortBy,
                where
            });
            return users;
        },
        countTotalUsers: async (where)=>{
            const total = await adapter.count({
                model: "user",
                where
            });
            if (typeof total === "string") {
                return parseInt(total);
            }
            return total;
        },
        deleteUser: async (userId)=>{
            var _options_session;
            if (secondaryStorage) {
                await secondaryStorage.delete("active-sessions-".concat(userId));
            }
            if (!secondaryStorage || ((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase)) {
                await adapter.deleteMany({
                    model: "session",
                    where: [
                        {
                            field: "userId",
                            value: userId
                        }
                    ]
                });
            }
            await adapter.deleteMany({
                model: "account",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
            await adapter.delete({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: userId
                    }
                ]
            });
        },
        createSession: async (userId, ctx2, dontRememberMe, override, overrideAll)=>{
            var _ctx2_request, _options_session;
            const headers = ctx2.headers || ((_ctx2_request = ctx2.request) === null || _ctx2_request === void 0 ? void 0 : _ctx2_request.headers);
            const { id: _, ...rest } = override || {};
            const data = {
                ipAddress: ctx2.request || ctx2.headers ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$O2VtDkDK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx2.request || ctx2.headers, ctx2.context.options) || "" : "",
                userAgent: (headers === null || headers === void 0 ? void 0 : headers.get("user-agent")) || "",
                ...rest,
                /**
         * If the user doesn't want to be remembered
         * set the session to expire in 1 day.
         * The cookie will be set to expire at the end of the session
         */ expiresAt: dontRememberMe ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(60 * 60 * 24, "sec") : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(sessionExpiration, "sec"),
                userId,
                token: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32),
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...overrideAll ? rest : {}
            };
            const res = await createWithHooks(data, "session", secondaryStorage ? {
                fn: async (sessionData)=>{
                    const currentList = await secondaryStorage.get("active-sessions-".concat(userId));
                    let list = [];
                    const now = Date.now();
                    if (currentList) {
                        list = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(currentList) || [];
                        list = list.filter((session)=>session.expiresAt > now);
                    }
                    list.push({
                        token: data.token,
                        expiresAt: now + sessionExpiration * 1e3
                    });
                    await secondaryStorage.set("active-sessions-".concat(userId), JSON.stringify(list), sessionExpiration);
                    return sessionData;
                },
                executeMainFn: (_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase
            } : void 0, ctx2);
            return res;
        },
        findSession: async (token)=>{
            if (secondaryStorage) {
                var _options_session;
                const sessionStringified = await secondaryStorage.get(token);
                if (!sessionStringified && !((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase)) {
                    return null;
                }
                if (sessionStringified) {
                    const s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(sessionStringified);
                    if (!s) return null;
                    const parsedSession2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])(ctx.options, {
                        ...s.session,
                        expiresAt: new Date(s.session.expiresAt),
                        createdAt: new Date(s.session.createdAt),
                        updatedAt: new Date(s.session.updatedAt)
                    });
                    const parsedUser2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])(ctx.options, {
                        ...s.user,
                        createdAt: new Date(s.user.createdAt),
                        updatedAt: new Date(s.user.updatedAt)
                    });
                    return {
                        session: parsedSession2,
                        user: parsedUser2
                    };
                }
            }
            const session = await adapter.findOne({
                model: "session",
                where: [
                    {
                        value: token,
                        field: "token"
                    }
                ]
            });
            if (!session) {
                return null;
            }
            const user = await adapter.findOne({
                model: "user",
                where: [
                    {
                        value: session.userId,
                        field: "id"
                    }
                ]
            });
            if (!user) {
                return null;
            }
            const parsedSession = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])(ctx.options, session);
            const parsedUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])(ctx.options, user);
            return {
                session: parsedSession,
                user: parsedUser
            };
        },
        findSessions: async (sessionTokens)=>{
            if (secondaryStorage) {
                const sessions2 = [];
                for (const sessionToken of sessionTokens){
                    const sessionStringified = await secondaryStorage.get(sessionToken);
                    if (sessionStringified) {
                        const s = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(sessionStringified);
                        if (!s) return [];
                        const session = {
                            session: {
                                ...s.session,
                                expiresAt: new Date(s.session.expiresAt)
                            },
                            user: {
                                ...s.user,
                                createdAt: new Date(s.user.createdAt),
                                updatedAt: new Date(s.user.updatedAt)
                            }
                        };
                        sessions2.push(session);
                    }
                }
                return sessions2;
            }
            const sessions = await adapter.findMany({
                model: "session",
                where: [
                    {
                        field: "token",
                        value: sessionTokens,
                        operator: "in"
                    }
                ]
            });
            const userIds = sessions.map((session)=>{
                return session.userId;
            });
            if (!userIds.length) return [];
            const users = await adapter.findMany({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: userIds,
                        operator: "in"
                    }
                ]
            });
            return sessions.map((session)=>{
                const user = users.find((u)=>u.id === session.userId);
                if (!user) return null;
                return {
                    session,
                    user
                };
            });
        },
        updateSession: async (sessionToken, session, context)=>{
            var _options_session;
            const updatedSession = await updateWithHooks(session, [
                {
                    field: "token",
                    value: sessionToken
                }
            ], "session", secondaryStorage ? {
                async fn (data) {
                    const currentSession = await secondaryStorage.get(sessionToken);
                    let updatedSession2 = null;
                    if (currentSession) {
                        const parsedSession = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(currentSession);
                        if (!parsedSession) return null;
                        updatedSession2 = {
                            ...parsedSession.session,
                            ...data
                        };
                        return updatedSession2;
                    } else {
                        return null;
                    }
                },
                executeMainFn: (_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase
            } : void 0, context);
            return updatedSession;
        },
        deleteSession: async (token)=>{
            if (secondaryStorage) {
                var _options_session, _ctx_options_session;
                const data = await secondaryStorage.get(token);
                if (data) {
                    var _safeJSONParse;
                    const { session } = (_safeJSONParse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(data)) !== null && _safeJSONParse !== void 0 ? _safeJSONParse : {};
                    if (!session) {
                        logger.error("Session not found in secondary storage");
                        return;
                    }
                    const userId = session.userId;
                    const currentList = await secondaryStorage.get("active-sessions-".concat(userId));
                    if (currentList) {
                        let list = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(currentList) || [];
                        list = list.filter((s)=>s.token !== token);
                        if (list.length > 0) {
                            await secondaryStorage.set("active-sessions-".concat(userId), JSON.stringify(list), sessionExpiration);
                        } else {
                            await secondaryStorage.delete("active-sessions-".concat(userId));
                        }
                    } else {
                        logger.error("Active sessions list not found in secondary storage");
                    }
                }
                await secondaryStorage.delete(token);
                if (!((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase) || ((_ctx_options_session = ctx.options.session) === null || _ctx_options_session === void 0 ? void 0 : _ctx_options_session.preserveSessionInDatabase)) {
                    return;
                }
            }
            await adapter.delete({
                model: "session",
                where: [
                    {
                        field: "token",
                        value: token
                    }
                ]
            });
        },
        deleteAccounts: async (userId)=>{
            await adapter.deleteMany({
                model: "account",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
        },
        deleteAccount: async (accountId)=>{
            await adapter.delete({
                model: "account",
                where: [
                    {
                        field: "id",
                        value: accountId
                    }
                ]
            });
        },
        deleteSessions: async (userIdOrSessionTokens)=>{
            if (secondaryStorage) {
                var _options_session, _ctx_options_session;
                if (typeof userIdOrSessionTokens === "string") {
                    const activeSession = await secondaryStorage.get("active-sessions-".concat(userIdOrSessionTokens));
                    const sessions = activeSession ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(activeSession) : [];
                    if (!sessions) return;
                    for (const session of sessions){
                        await secondaryStorage.delete(session.token);
                    }
                } else {
                    for (const sessionToken of userIdOrSessionTokens){
                        const session = await secondaryStorage.get(sessionToken);
                        if (session) {
                            await secondaryStorage.delete(sessionToken);
                        }
                    }
                }
                if (!((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.storeSessionInDatabase) || ((_ctx_options_session = ctx.options.session) === null || _ctx_options_session === void 0 ? void 0 : _ctx_options_session.preserveSessionInDatabase)) {
                    return;
                }
            }
            await adapter.deleteMany({
                model: "session",
                where: [
                    {
                        field: Array.isArray(userIdOrSessionTokens) ? "token" : "userId",
                        value: userIdOrSessionTokens,
                        operator: Array.isArray(userIdOrSessionTokens) ? "in" : void 0
                    }
                ]
            });
        },
        findOAuthUser: async (email, accountId, providerId)=>{
            const account = await adapter.findMany({
                model: "account",
                where: [
                    {
                        value: accountId,
                        field: "accountId"
                    }
                ]
            }).then((accounts)=>{
                return accounts.find((a)=>a.providerId === providerId);
            });
            if (account) {
                const user = await adapter.findOne({
                    model: "user",
                    where: [
                        {
                            value: account.userId,
                            field: "id"
                        }
                    ]
                });
                if (user) {
                    return {
                        user,
                        accounts: [
                            account
                        ]
                    };
                } else {
                    const user2 = await adapter.findOne({
                        model: "user",
                        where: [
                            {
                                value: email.toLowerCase(),
                                field: "email"
                            }
                        ]
                    });
                    if (user2) {
                        return {
                            user: user2,
                            accounts: [
                                account
                            ]
                        };
                    }
                    return null;
                }
            } else {
                const user = await adapter.findOne({
                    model: "user",
                    where: [
                        {
                            value: email.toLowerCase(),
                            field: "email"
                        }
                    ]
                });
                if (user) {
                    const accounts = await adapter.findMany({
                        model: "account",
                        where: [
                            {
                                value: user.id,
                                field: "userId"
                            }
                        ]
                    });
                    return {
                        user,
                        accounts: accounts || []
                    };
                } else {
                    return null;
                }
            }
        },
        findUserByEmail: async (email, options2)=>{
            const user = await adapter.findOne({
                model: "user",
                where: [
                    {
                        value: email.toLowerCase(),
                        field: "email"
                    }
                ]
            });
            if (!user) return null;
            if (options2 === null || options2 === void 0 ? void 0 : options2.includeAccounts) {
                const accounts = await adapter.findMany({
                    model: "account",
                    where: [
                        {
                            value: user.id,
                            field: "userId"
                        }
                    ]
                });
                return {
                    user,
                    accounts
                };
            }
            return {
                user,
                accounts: []
            };
        },
        findUserById: async (userId)=>{
            const user = await adapter.findOne({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: userId
                    }
                ]
            });
            return user;
        },
        linkAccount: async (account, context)=>{
            const _account = await createWithHooks({
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...account
            }, "account", void 0, context);
            return _account;
        },
        updateUser: async (userId, data, context)=>{
            const user = await updateWithHooks(data, [
                {
                    field: "id",
                    value: userId
                }
            ], "user", void 0, context);
            if (secondaryStorage && user) {
                const listRaw = await secondaryStorage.get("active-sessions-".concat(userId));
                if (listRaw) {
                    const now = Date.now();
                    const list = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(listRaw) || [];
                    const validSessions = list.filter((s)=>s.expiresAt > now);
                    await Promise.all(validSessions.map(async (param)=>{
                        let { token } = param;
                        const cached = await secondaryStorage.get(token);
                        if (!cached) return;
                        const parsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(cached);
                        if (!parsed) return;
                        const sessionTTL = Math.max(Math.floor((new Date(parsed.session.expiresAt).getTime() - now) / 1e3), 0);
                        await secondaryStorage.set(token, JSON.stringify({
                            session: parsed.session,
                            user
                        }), sessionTTL);
                    }));
                }
            }
            return user;
        },
        updateUserByEmail: async (email, data, context)=>{
            const user = await updateWithHooks(data, [
                {
                    field: "email",
                    value: email.toLowerCase()
                }
            ], "user", void 0, context);
            return user;
        },
        updatePassword: async (userId, password, context)=>{
            await updateManyWithHooks({
                password
            }, [
                {
                    field: "userId",
                    value: userId
                },
                {
                    field: "providerId",
                    value: "credential"
                }
            ], "account", void 0, context);
        },
        findAccounts: async (userId)=>{
            const accounts = await adapter.findMany({
                model: "account",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
            return accounts;
        },
        findAccount: async (accountId)=>{
            const account = await adapter.findOne({
                model: "account",
                where: [
                    {
                        field: "accountId",
                        value: accountId
                    }
                ]
            });
            return account;
        },
        findAccountByProviderId: async (accountId, providerId)=>{
            const account = await adapter.findOne({
                model: "account",
                where: [
                    {
                        field: "accountId",
                        value: accountId
                    },
                    {
                        field: "providerId",
                        value: providerId
                    }
                ]
            });
            return account;
        },
        findAccountByUserId: async (userId)=>{
            const account = await adapter.findMany({
                model: "account",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
            return account;
        },
        updateAccount: async (id, data, context)=>{
            const account = await updateWithHooks(data, [
                {
                    field: "id",
                    value: id
                }
            ], "account", void 0, context);
            return account;
        },
        createVerificationValue: async (data, context)=>{
            const verification = await createWithHooks({
                // todo: we should remove auto setting createdAt and updatedAt in the next major release, since the db generators already handle that
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                ...data
            }, "verification", void 0, context);
            return verification;
        },
        findVerificationValue: async (identifier)=>{
            var _options_verification;
            const verification = await adapter.findMany({
                model: "verification",
                where: [
                    {
                        field: "identifier",
                        value: identifier
                    }
                ],
                sortBy: {
                    field: "createdAt",
                    direction: "desc"
                },
                limit: 1
            });
            if (!((_options_verification = options.verification) === null || _options_verification === void 0 ? void 0 : _options_verification.disableCleanup)) {
                await adapter.deleteMany({
                    model: "verification",
                    where: [
                        {
                            field: "expiresAt",
                            value: /* @__PURE__ */ new Date(),
                            operator: "lt"
                        }
                    ]
                });
            }
            const lastVerification = verification[0];
            return lastVerification;
        },
        deleteVerificationValue: async (id)=>{
            await adapter.delete({
                model: "verification",
                where: [
                    {
                        field: "id",
                        value: id
                    }
                ]
            });
        },
        deleteVerificationByIdentifier: async (identifier)=>{
            await adapter.delete({
                model: "verification",
                where: [
                    {
                        field: "identifier",
                        value: identifier
                    }
                ]
            });
        },
        updateVerificationValue: async (id, data, context)=>{
            const verification = await updateWithHooks(data, [
                {
                    field: "id",
                    value: id
                }
            ], "verification", void 0, context);
            return verification;
        }
    };
};
async function getAdapter(options) {
    if (!options.database) {
        const tables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options);
        const memoryDB = Object.keys(tables).reduce((acc, key)=>{
            acc[key] = [];
            return acc;
        }, {});
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].warn("No database configuration provided. Using memory adapter in development");
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$C7uhlcDq$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["m"])(memoryDB)(options);
    }
    if (typeof options.database === "function") {
        return options.database(options);
    }
    const { kysely, databaseType } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(options);
    if (!kysely) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Failed to initialize database adapter");
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["k"])(kysely, {
        type: databaseType || "sqlite",
        debugLogs: "debugLogs" in options.database ? options.database.debugLogs : false
    })(options);
}
function convertToDB(fields, values) {
    let result = values.id ? {
        id: values.id
    } : {};
    for(const key in fields){
        const field = fields[key];
        const value = values[key];
        if (value === void 0) {
            continue;
        }
        result[field.fieldName || key] = value;
    }
    return result;
}
function convertFromDB(fields, values) {
    if (!values) {
        return null;
    }
    let result = {
        id: values.id
    };
    for (const [key, value] of Object.entries(fields)){
        result[key] = values[value.fieldName || key];
    }
    return result;
}
function getSchema(config) {
    const tables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(config);
    let schema = {};
    for(const key in tables){
        const table = tables[key];
        const fields = table.fields;
        let actualFields = {};
        Object.entries(fields).forEach((param)=>{
            let [key2, field] = param;
            actualFields[field.fieldName || key2] = field;
            if (field.references) {
                const refTable = tables[field.references.model];
                if (refTable) {
                    actualFields[field.fieldName || key2].references = {
                        model: refTable.modelName,
                        field: field.references.field
                    };
                }
            }
        });
        if (schema[table.modelName]) {
            schema[table.modelName].fields = {
                ...schema[table.modelName].fields,
                ...actualFields
            };
            continue;
        }
        schema[table.modelName] = {
            fields: actualFields,
            order: table.order || Infinity
        };
    }
    return schema;
}
const postgresMap = {
    string: [
        "character varying",
        "varchar",
        "text"
    ],
    number: [
        "int4",
        "integer",
        "bigint",
        "smallint",
        "numeric",
        "real",
        "double precision"
    ],
    boolean: [
        "bool",
        "boolean"
    ],
    date: [
        "timestamp",
        "date"
    ],
    json: [
        "json",
        "jsonb"
    ]
};
const mysqlMap = {
    string: [
        "varchar",
        "text"
    ],
    number: [
        "integer",
        "int",
        "bigint",
        "smallint",
        "decimal",
        "float",
        "double"
    ],
    boolean: [
        "boolean",
        "tinyint"
    ],
    date: [
        "timestamp",
        "datetime",
        "date"
    ],
    json: [
        "json"
    ]
};
const sqliteMap = {
    string: [
        "TEXT"
    ],
    number: [
        "INTEGER",
        "REAL"
    ],
    boolean: [
        "INTEGER",
        "BOOLEAN"
    ],
    // 0 or 1
    date: [
        "DATE",
        "INTEGER"
    ],
    json: [
        "TEXT"
    ]
};
const mssqlMap = {
    string: [
        "varchar",
        "nvarchar"
    ],
    number: [
        "int",
        "bigint",
        "smallint",
        "decimal",
        "float",
        "double"
    ],
    boolean: [
        "bit",
        "smallint"
    ],
    date: [
        "datetime",
        "date"
    ],
    json: [
        "varchar",
        "nvarchar"
    ]
};
const map = {
    postgres: postgresMap,
    mysql: mysqlMap,
    sqlite: sqliteMap,
    mssql: mssqlMap
};
function matchType(columnDataType, fieldType, dbType) {
    function normalize(type) {
        return type.toLowerCase().split("(")[0].trim();
    }
    if (fieldType === "string[]" || fieldType === "number[]") {
        return columnDataType.toLowerCase().includes("json");
    }
    const types = map[dbType];
    const expected = Array.isArray(fieldType) ? types["string"].map((t)=>t.toLowerCase()) : types[fieldType].map((t)=>t.toLowerCase());
    return expected.includes(normalize(columnDataType));
}
async function getMigrations(config) {
    const betterAuthSchema = getSchema(config);
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(config.logger);
    let { kysely: db, databaseType: dbType } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(config);
    if (!dbType) {
        logger.warn("Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.");
        dbType = "sqlite";
    }
    if (!db) {
        logger.error("Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.");
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].exit(1);
    }
    const tableMetadata = await db.introspection.getTables();
    const toBeCreated = [];
    const toBeAdded = [];
    for (const [key, value] of Object.entries(betterAuthSchema)){
        const table = tableMetadata.find((t)=>t.name === key);
        if (!table) {
            const tIndex = toBeCreated.findIndex((t)=>t.table === key);
            const tableData = {
                table: key,
                fields: value.fields,
                order: value.order || Infinity
            };
            const insertIndex = toBeCreated.findIndex((t)=>(t.order || Infinity) > tableData.order);
            if (insertIndex === -1) {
                if (tIndex === -1) {
                    toBeCreated.push(tableData);
                } else {
                    toBeCreated[tIndex].fields = {
                        ...toBeCreated[tIndex].fields,
                        ...value.fields
                    };
                }
            } else {
                toBeCreated.splice(insertIndex, 0, tableData);
            }
            continue;
        }
        let toBeAddedFields = {};
        for (const [fieldName, field] of Object.entries(value.fields)){
            const column = table.columns.find((c)=>c.name === fieldName);
            if (!column) {
                toBeAddedFields[fieldName] = field;
                continue;
            }
            if (matchType(column.dataType, field.type, dbType)) {
                continue;
            } else {
                logger.warn("Field ".concat(fieldName, " in table ").concat(key, " has a different type in the database. Expected ").concat(field.type, " but got ").concat(column.dataType, "."));
            }
        }
        if (Object.keys(toBeAddedFields).length > 0) {
            toBeAdded.push({
                table: key,
                fields: toBeAddedFields,
                order: value.order || Infinity
            });
        }
    }
    const migrations = [];
    function getType(field, fieldName) {
        var _config_advanced_database, _config_advanced, _config_advanced_database1, _config_advanced1, _config_advanced_database2, _config_advanced2, _config_advanced_database3, _config_advanced3, _field_references;
        const type = field.type;
        const typeMap = {
            string: {
                sqlite: "text",
                postgres: "text",
                mysql: field.unique ? "varchar(255)" : field.references ? "varchar(36)" : "text",
                mssql: field.unique || field.sortable ? "varchar(255)" : field.references ? "varchar(36)" : // mssql deprecated `text`, and the alternative is `varchar(max)`.
                // Kysely type interface doesn't support `text`, so we set this to `varchar(8000)` as
                // that's the max length for `varchar`
                "varchar(8000)"
            },
            boolean: {
                sqlite: "integer",
                postgres: "boolean",
                mysql: "boolean",
                mssql: "smallint"
            },
            number: {
                sqlite: field.bigint ? "bigint" : "integer",
                postgres: field.bigint ? "bigint" : "integer",
                mysql: field.bigint ? "bigint" : "integer",
                mssql: field.bigint ? "bigint" : "integer"
            },
            date: {
                sqlite: "date",
                postgres: "timestamp",
                mysql: "datetime",
                mssql: "datetime"
            },
            json: {
                sqlite: "text",
                postgres: "json",
                mysql: "json",
                mssql: "varchar(8000)"
            },
            id: {
                postgres: ((_config_advanced = config.advanced) === null || _config_advanced === void 0 ? void 0 : (_config_advanced_database = _config_advanced.database) === null || _config_advanced_database === void 0 ? void 0 : _config_advanced_database.useNumberId) ? "serial" : "text",
                mysql: ((_config_advanced1 = config.advanced) === null || _config_advanced1 === void 0 ? void 0 : (_config_advanced_database1 = _config_advanced1.database) === null || _config_advanced_database1 === void 0 ? void 0 : _config_advanced_database1.useNumberId) ? "integer" : "varchar(36)",
                mssql: ((_config_advanced2 = config.advanced) === null || _config_advanced2 === void 0 ? void 0 : (_config_advanced_database2 = _config_advanced2.database) === null || _config_advanced_database2 === void 0 ? void 0 : _config_advanced_database2.useNumberId) ? "integer" : "varchar(36)",
                sqlite: ((_config_advanced3 = config.advanced) === null || _config_advanced3 === void 0 ? void 0 : (_config_advanced_database3 = _config_advanced3.database) === null || _config_advanced_database3 === void 0 ? void 0 : _config_advanced_database3.useNumberId) ? "integer" : "text"
            }
        };
        if (fieldName === "id" || ((_field_references = field.references) === null || _field_references === void 0 ? void 0 : _field_references.field) === "id") {
            return typeMap.id[dbType];
        }
        if (dbType === "sqlite" && (type === "string[]" || type === "number[]")) {
            return "text";
        }
        if (type === "string[]" || type === "number[]") {
            return "jsonb";
        }
        if (Array.isArray(type)) {
            return "text";
        }
        return typeMap[type][dbType || "sqlite"];
    }
    if (toBeAdded.length) {
        for (const table of toBeAdded){
            for (const [fieldName, field] of Object.entries(table.fields)){
                const type = getType(field, fieldName);
                const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col)=>{
                    col = field.required !== false ? col.notNull() : col;
                    if (field.references) {
                        col = col.references("".concat(field.references.model, ".").concat(field.references.field)).onDelete(field.references.onDelete || "cascade");
                    }
                    if (field.unique) {
                        col = col.unique();
                    }
                    if (field.type === "date" && typeof field.defaultValue === "function" && (dbType === "postgres" || dbType === "mysql" || dbType === "mssql")) {
                        col = col.defaultTo((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$raw$2d$builder$2f$sql$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sql"])(_templateObject()));
                    }
                    return col;
                });
                migrations.push(exec);
            }
        }
    }
    if (toBeCreated.length) {
        for (const table of toBeCreated){
            var _config_advanced_database, _config_advanced;
            let dbT = db.schema.createTable(table.table).addColumn("id", ((_config_advanced = config.advanced) === null || _config_advanced === void 0 ? void 0 : (_config_advanced_database = _config_advanced.database) === null || _config_advanced_database === void 0 ? void 0 : _config_advanced_database.useNumberId) ? dbType === "postgres" ? "serial" : "integer" : dbType === "mysql" || dbType === "mssql" ? "varchar(36)" : "text", (col)=>{
                var _config_advanced_database, _config_advanced;
                if ((_config_advanced = config.advanced) === null || _config_advanced === void 0 ? void 0 : (_config_advanced_database = _config_advanced.database) === null || _config_advanced_database === void 0 ? void 0 : _config_advanced_database.useNumberId) {
                    if (dbType === "postgres") {
                        return col.primaryKey().notNull();
                    }
                    return col.autoIncrement().primaryKey().notNull();
                }
                return col.primaryKey().notNull();
            });
            for (const [fieldName, field] of Object.entries(table.fields)){
                const type = getType(field, fieldName);
                dbT = dbT.addColumn(fieldName, type, (col)=>{
                    col = field.required !== false ? col.notNull() : col;
                    if (field.references) {
                        col = col.references("".concat(field.references.model, ".").concat(field.references.field)).onDelete(field.references.onDelete || "cascade");
                    }
                    if (field.unique) {
                        col = col.unique();
                    }
                    if (field.type === "date" && typeof field.defaultValue === "function" && (dbType === "postgres" || dbType === "mysql" || dbType === "mssql")) {
                        col = col.defaultTo((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$kysely$2f$dist$2f$esm$2f$raw$2d$builder$2f$sql$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sql"])(_templateObject1()));
                    }
                    return col;
                });
            }
            migrations.push(dbT);
        }
    }
    async function runMigrations() {
        for (const migration of migrations){
            await migration.execute();
        }
    }
    async function compileMigrations() {
        const compiled = migrations.map((m)=>m.compile().sql);
        return compiled.join(";\n\n") + ";";
    }
    return {
        toBeCreated,
        toBeAdded,
        runMigrations,
        compileMigrations
    };
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DrJWSFx6.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "t",
    ()=>toZodSchema
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript)");
;
function toZodSchema(param) {
    let { fields, isClientSide } = param;
    const zodFields = Object.keys(fields).reduce((acc, key)=>{
        const field = fields[key];
        if (!field) {
            return acc;
        }
        if (isClientSide && field.input === false) {
            return acc;
        }
        let schema2;
        if (field.type === "json") {
            schema2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.json ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.json() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.any();
        } else if (field.type === "string[]" || field.type === "number[]") {
            schema2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.array(field.type === "string[]" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.string() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.number());
        } else if (Array.isArray(field.type)) {
            schema2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.any();
        } else {
            schema2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[field.type]();
        }
        if ((field === null || field === void 0 ? void 0 : field.required) === false) {
            schema2 = schema2.optional();
        }
        if ((field === null || field === void 0 ? void 0 : field.returned) === false) {
            return acc;
        }
        return {
            ...acc,
            [key]: schema2
        };
    }, {});
    const schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.object(zodFields);
    return schema;
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript) <export g as getAuthTables>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "getAuthTables",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript) <export c as createAuthMiddleware>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createAuthMiddleware",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript) <export s as sessionMiddleware>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "sessionMiddleware",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DVhkokI7.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>orgSessionMiddleware,
    "o",
    ()=>orgMiddleware,
    "t",
    ()=>teamSchema
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const orgMiddleware = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(async ()=>{
    return {};
});
const orgSessionMiddleware = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])({
    use: [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
    ]
}, async (ctx)=>{
    const session = ctx.context.session;
    return {
        session
    };
});
const role = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]();
const invitationStatus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
    "pending",
    "accepted",
    "rejected",
    "canceled"
]).default("pending");
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    slug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    logo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish().optional(),
    metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unknown"]()).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().transform((v)=>JSON.parse(v))).optional(),
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]()
});
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string(),
    role,
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().default(()=>/* @__PURE__ */ new Date())
});
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    email: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    role,
    status: invitationStatus,
    teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().nullish(),
    inviterId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    expiresAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]()
});
const teamSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().min(1),
    organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"](),
    updatedAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().optional()
});
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().default(()=>/* @__PURE__ */ new Date())
});
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]),
    organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
    permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())),
    createdAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().default(()=>/* @__PURE__ */ new Date()),
    updatedAt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["date"]().optional()
});
const defaultRoles = [
    "admin",
    "member",
    "owner"
];
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"](defaultRoles),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"](defaultRoles))
]);
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>checkPassword,
    "v",
    ()=>validatePassword
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
;
async function validatePassword(ctx, data) {
    const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);
    const credentialAccount = accounts === null || accounts === void 0 ? void 0 : accounts.find((account)=>account.providerId === "credential");
    const currentPassword = credentialAccount === null || credentialAccount === void 0 ? void 0 : credentialAccount.password;
    if (!credentialAccount || !currentPassword) {
        return false;
    }
    const compare = await ctx.context.password.verify({
        hash: currentPassword,
        password: data.password
    });
    return compare;
}
async function checkPassword(userId, c) {
    const accounts = await c.context.internalAdapter.findAccounts(userId);
    const credentialAccount = accounts === null || accounts === void 0 ? void 0 : accounts.find((account)=>account.providerId === "credential");
    const currentPassword = credentialAccount === null || credentialAccount === void 0 ? void 0 : credentialAccount.password;
    if (!credentialAccount || !currentPassword || !c.body.password) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "No password credential found"
        });
    }
    const compare = await c.context.password.verify({
        hash: currentPassword,
        password: c.body.password
    });
    if (!compare) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "Invalid password"
        });
    }
    return true;
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "g",
    ()=>getEndpointResponse
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
;
const getEndpointResponse = async (ctx)=>{
    const returned = ctx.context.returned;
    if (!returned) {
        return null;
    }
    if (returned instanceof Response) {
        if (returned.status !== 200) {
            return null;
        }
        return await returned.clone().json();
    }
    if (returned instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]) {
        return null;
    }
    return returned;
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BA2h5uPw.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>admin
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQI8AD7d$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.bkwPl2G4.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const ADMIN_ERROR_CODES = {
    FAILED_TO_CREATE_USER: "Failed to create user",
    USER_ALREADY_EXISTS: "User already exists. Use another email.",
    YOU_CANNOT_BAN_YOURSELF: "You cannot ban yourself",
    YOU_ARE_NOT_ALLOWED_TO_CHANGE_USERS_ROLE: "You are not allowed to change users role",
    YOU_ARE_NOT_ALLOWED_TO_CREATE_USERS: "You are not allowed to create users",
    YOU_ARE_NOT_ALLOWED_TO_LIST_USERS: "You are not allowed to list users",
    YOU_ARE_NOT_ALLOWED_TO_LIST_USERS_SESSIONS: "You are not allowed to list users sessions",
    YOU_ARE_NOT_ALLOWED_TO_BAN_USERS: "You are not allowed to ban users",
    YOU_ARE_NOT_ALLOWED_TO_IMPERSONATE_USERS: "You are not allowed to impersonate users",
    YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS: "You are not allowed to revoke users sessions",
    YOU_ARE_NOT_ALLOWED_TO_DELETE_USERS: "You are not allowed to delete users",
    YOU_ARE_NOT_ALLOWED_TO_SET_USERS_PASSWORD: "You are not allowed to set users password",
    BANNED_USER: "You have been banned from this application",
    YOU_ARE_NOT_ALLOWED_TO_GET_USER: "You are not allowed to get user",
    NO_DATA_TO_UPDATE: "No data to update",
    YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS: "You are not allowed to update users",
    YOU_CANNOT_REMOVE_YOURSELF: "You cannot remove yourself"
};
const schema = {
    user: {
        fields: {
            role: {
                type: "string",
                required: false,
                input: false
            },
            banned: {
                type: "boolean",
                defaultValue: false,
                required: false,
                input: false
            },
            banReason: {
                type: "string",
                required: false,
                input: false
            },
            banExpires: {
                type: "date",
                required: false,
                input: false
            }
        }
    },
    session: {
        fields: {
            impersonatedBy: {
                type: "string",
                required: false
            }
        }
    }
};
function parseRoles(roles) {
    return Array.isArray(roles) ? roles.join(",") : roles;
}
const admin = (options)=>{
    var _options_defaultRole, _options_adminRoles, _options_bannedUserMessage;
    const opts = {
        defaultRole: (_options_defaultRole = options === null || options === void 0 ? void 0 : options.defaultRole) !== null && _options_defaultRole !== void 0 ? _options_defaultRole : "user",
        adminRoles: (_options_adminRoles = options === null || options === void 0 ? void 0 : options.adminRoles) !== null && _options_adminRoles !== void 0 ? _options_adminRoles : [
            "admin"
        ],
        bannedUserMessage: (_options_bannedUserMessage = options === null || options === void 0 ? void 0 : options.bannedUserMessage) !== null && _options_bannedUserMessage !== void 0 ? _options_bannedUserMessage : "You have been banned from this application. Please contact support if you believe this is an error.",
        ...options
    };
    const adminMiddleware = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(async (ctx)=>{
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        if (!session) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
        }
        return {
            session
        };
    });
    return {
        id: "admin",
        init () {
            return {
                options: {
                    databaseHooks: {
                        user: {
                            create: {
                                async before (user) {
                                    var _options_defaultRole;
                                    return {
                                        data: {
                                            role: (_options_defaultRole = options === null || options === void 0 ? void 0 : options.defaultRole) !== null && _options_defaultRole !== void 0 ? _options_defaultRole : "user",
                                            ...user
                                        }
                                    };
                                }
                            }
                        },
                        session: {
                            create: {
                                async before (session, ctx) {
                                    if (!ctx) {
                                        return;
                                    }
                                    const user = await ctx.context.internalAdapter.findUserById(session.userId);
                                    if (user.banned) {
                                        if (user.banExpires && new Date(user.banExpires).getTime() < Date.now()) {
                                            await ctx.context.internalAdapter.updateUser(session.userId, {
                                                banned: false,
                                                banReason: null,
                                                banExpires: null
                                            });
                                            return;
                                        }
                                        if (ctx && (ctx.path.startsWith("/callback") || ctx.path.startsWith("/oauth2/callback"))) {
                                            var _ctx_context_options_onAPIError;
                                            const redirectURI = ((_ctx_context_options_onAPIError = ctx.context.options.onAPIError) === null || _ctx_context_options_onAPIError === void 0 ? void 0 : _ctx_context_options_onAPIError.errorURL) || "".concat(ctx.context.baseURL, "/error");
                                            throw ctx.redirect("".concat(redirectURI, "?error=banned&error_description=").concat(opts.bannedUserMessage));
                                        }
                                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                                            message: opts.bannedUserMessage,
                                            code: "BANNED_USER"
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            };
        },
        hooks: {
            after: [
                {
                    matcher (context) {
                        return context.path === "/list-sessions";
                    },
                    handler: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(async (ctx)=>{
                        const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQI8AD7d$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
                        if (!response) {
                            return;
                        }
                        const newJson = response.filter((session)=>{
                            return !session.impersonatedBy;
                        });
                        return ctx.json(newJson);
                    })
                }
            ]
        },
        endpoints: {
            /**
       * ### Endpoint
       *
       * POST `/admin/set-role`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.setRole`
       *
       * **client:**
       * `authClient.admin.setRole`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-set-role)
       */ setRole: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/set-role", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    }),
                    role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                            description: "The role to set. `admin` or `user` by default"
                        }),
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                            description: "The roles to set. `admin` or `user` by default"
                        }))
                    ]).meta({
                        description: "The role to set, this can be a string or an array of strings. Eg: `admin` or `[admin, user]`"
                    })
                }),
                requireHeaders: true,
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "setRole",
                        summary: "Set the role of a user",
                        description: "Set the role of a user",
                        responses: {
                            200: {
                                description: "User role updated",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    $Infer: {
                        body: {}
                    }
                }
            }, async (ctx)=>{
                const canSetRole = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: ctx.context.session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "set-role"
                        ]
                    }
                });
                if (!canSetRole) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CHANGE_USERS_ROLE
                    });
                }
                const updatedUser = await ctx.context.internalAdapter.updateUser(ctx.body.userId, {
                    role: parseRoles(ctx.body.role)
                }, ctx);
                return ctx.json({
                    user: updatedUser
                });
            }),
            getUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/get-user", {
                method: "GET",
                query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The id of the User"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "getUser",
                        summary: "Get an existing user",
                        description: "Get an existing user",
                        responses: {
                            200: {
                                description: "User",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const { id } = ctx.query;
                const canGetUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: ctx.context.session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "get"
                        ]
                    }
                });
                if (!canGetUser) {
                    throw ctx.error("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_GET_USER,
                        code: "YOU_ARE_NOT_ALLOWED_TO_GET_USER"
                    });
                }
                const user = await ctx.context.internalAdapter.findUserById(id);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                        message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"].USER_NOT_FOUND
                    });
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"])(ctx.context.options, user);
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/create-user`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.createUser`
       *
       * **client:**
       * `authClient.admin.createUser`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-create-user)
       */ createUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/create-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    email: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The email of the user"
                    }),
                    password: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The password of the user"
                    }),
                    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The name of the user"
                    }),
                    role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                            description: "The role of the user"
                        }),
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                            description: "The roles of user"
                        }))
                    ]).optional().meta({
                        description: 'A string or array of strings representing the roles to apply to the new user. Eg: "user"'
                    }),
                    /**
             * extra fields for user
             */ data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).optional().meta({
                        description: "Extra fields for the user. Including custom additional fields."
                    })
                }),
                metadata: {
                    openapi: {
                        operationId: "createUser",
                        summary: "Create a new user",
                        description: "Create a new user",
                        responses: {
                            200: {
                                description: "User created",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    $Infer: {
                        body: {}
                    }
                }
            }, async (ctx)=>{
                const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
                if (!session && (ctx.request || ctx.headers)) {
                    throw ctx.error("UNAUTHORIZED");
                }
                if (session) {
                    const canCreateUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                        userId: session.user.id,
                        role: session.user.role,
                        options: opts,
                        permissions: {
                            user: [
                                "create"
                            ]
                        }
                    });
                    if (!canCreateUser) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                            message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_USERS
                        });
                    }
                }
                const existUser = await ctx.context.internalAdapter.findUserByEmail(ctx.body.email);
                if (existUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ADMIN_ERROR_CODES.USER_ALREADY_EXISTS
                    });
                }
                var _ref, _ref1;
                const user = await ctx.context.internalAdapter.createUser({
                    email: ctx.body.email,
                    name: ctx.body.name,
                    role: (_ref1 = (_ref = ctx.body.role && parseRoles(ctx.body.role)) !== null && _ref !== void 0 ? _ref : options === null || options === void 0 ? void 0 : options.defaultRole) !== null && _ref1 !== void 0 ? _ref1 : "user",
                    ...ctx.body.data
                }, ctx);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                        message: ADMIN_ERROR_CODES.FAILED_TO_CREATE_USER
                    });
                }
                const hashedPassword = await ctx.context.password.hash(ctx.body.password);
                await ctx.context.internalAdapter.linkAccount({
                    accountId: user.id,
                    providerId: "credential",
                    password: hashedPassword,
                    userId: user.id
                }, ctx);
                return ctx.json({
                    user
                });
            }),
            adminUpdateUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/update-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    }),
                    data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).meta({
                        description: "The user data to update"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "updateUser",
                        summary: "Update a user",
                        description: "Update a user's details",
                        responses: {
                            200: {
                                description: "User updated",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                var _ctx_body_data;
                const canUpdateUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: ctx.context.session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "update"
                        ]
                    }
                });
                if (!canUpdateUser) {
                    throw ctx.error("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS,
                        code: "YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS"
                    });
                }
                if (Object.keys(ctx.body.data).length === 0) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ADMIN_ERROR_CODES.NO_DATA_TO_UPDATE
                    });
                }
                if ((_ctx_body_data = ctx.body.data) === null || _ctx_body_data === void 0 ? void 0 : _ctx_body_data.role) {
                    ctx.body.data.role = parseRoles(ctx.body.data.role);
                }
                const updatedUser = await ctx.context.internalAdapter.updateUser(ctx.body.userId, ctx.body.data, ctx);
                return ctx.json(updatedUser);
            }),
            listUsers: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/list-users", {
                method: "GET",
                use: [
                    adminMiddleware
                ],
                query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    searchValue: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                        description: 'The value to search for. Eg: "some name"'
                    }),
                    searchField: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "email",
                        "name"
                    ]).meta({
                        description: 'The field to search in, defaults to email. Can be `email` or `name`. Eg: "name"'
                    }).optional(),
                    searchOperator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "contains",
                        "starts_with",
                        "ends_with"
                    ]).meta({
                        description: 'The operator to use for the search. Can be `contains`, `starts_with` or `ends_with`. Eg: "contains"'
                    }).optional(),
                    limit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The number of users to return"
                    }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).optional(),
                    offset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The offset to start from"
                    }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).optional(),
                    sortBy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The field to sort by"
                    }).optional(),
                    sortDirection: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "asc",
                        "desc"
                    ]).meta({
                        description: "The direction to sort by"
                    }).optional(),
                    filterField: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The field to filter by"
                    }).optional(),
                    filterValue: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The value to filter by"
                    }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]()).optional(),
                    filterOperator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "eq",
                        "ne",
                        "lt",
                        "lte",
                        "gt",
                        "gte",
                        "contains"
                    ]).meta({
                        description: "The operator to use for the filter"
                    }).optional()
                }),
                metadata: {
                    openapi: {
                        operationId: "listUsers",
                        summary: "List users",
                        description: "List users",
                        responses: {
                            200: {
                                description: "List of users",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                users: {
                                                    type: "array",
                                                    items: {
                                                        $ref: "#/components/schemas/User"
                                                    }
                                                },
                                                total: {
                                                    type: "number"
                                                },
                                                limit: {
                                                    type: "number"
                                                },
                                                offset: {
                                                    type: "number"
                                                }
                                            },
                                            required: [
                                                "users",
                                                "total"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                var _ctx_query, _ctx_query1;
                const session = ctx.context.session;
                const canListUsers = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "list"
                        ]
                    }
                });
                if (!canListUsers) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_USERS
                    });
                }
                const where = [];
                if ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.searchValue) {
                    where.push({
                        field: ctx.query.searchField || "email",
                        operator: ctx.query.searchOperator || "contains",
                        value: ctx.query.searchValue
                    });
                }
                if ((_ctx_query1 = ctx.query) === null || _ctx_query1 === void 0 ? void 0 : _ctx_query1.filterValue) {
                    where.push({
                        field: ctx.query.filterField || "email",
                        operator: ctx.query.filterOperator || "eq",
                        value: ctx.query.filterValue
                    });
                }
                try {
                    var _ctx_query2, _ctx_query3, _ctx_query4, _ctx_query5, _ctx_query6;
                    const users = await ctx.context.internalAdapter.listUsers(Number((_ctx_query2 = ctx.query) === null || _ctx_query2 === void 0 ? void 0 : _ctx_query2.limit) || void 0, Number((_ctx_query3 = ctx.query) === null || _ctx_query3 === void 0 ? void 0 : _ctx_query3.offset) || void 0, ((_ctx_query4 = ctx.query) === null || _ctx_query4 === void 0 ? void 0 : _ctx_query4.sortBy) ? {
                        field: ctx.query.sortBy,
                        direction: ctx.query.sortDirection || "asc"
                    } : void 0, where.length ? where : void 0);
                    const total = await ctx.context.internalAdapter.countTotalUsers(where.length ? where : void 0);
                    return ctx.json({
                        users,
                        total,
                        limit: Number((_ctx_query5 = ctx.query) === null || _ctx_query5 === void 0 ? void 0 : _ctx_query5.limit) || void 0,
                        offset: Number((_ctx_query6 = ctx.query) === null || _ctx_query6 === void 0 ? void 0 : _ctx_query6.offset) || void 0
                    });
                } catch (e) {
                    return ctx.json({
                        users: [],
                        total: 0
                    });
                }
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/list-user-sessions`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.listUserSessions`
       *
       * **client:**
       * `authClient.admin.listUserSessions`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-list-user-sessions)
       */ listUserSessions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/list-user-sessions", {
                method: "POST",
                use: [
                    adminMiddleware
                ],
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                metadata: {
                    openapi: {
                        operationId: "listUserSessions",
                        summary: "List user sessions",
                        description: "List user sessions",
                        responses: {
                            200: {
                                description: "List of user sessions",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                sessions: {
                                                    type: "array",
                                                    items: {
                                                        $ref: "#/components/schemas/Session"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canListSessions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        session: [
                            "list"
                        ]
                    }
                });
                if (!canListSessions) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_USERS_SESSIONS
                    });
                }
                const sessions = await ctx.context.internalAdapter.listSessions(ctx.body.userId);
                return {
                    sessions
                };
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/unban-user`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.unbanUser`
       *
       * **client:**
       * `authClient.admin.unbanUser`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-unban-user)
       */ unbanUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/unban-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "unbanUser",
                        summary: "Unban a user",
                        description: "Unban a user",
                        responses: {
                            200: {
                                description: "User unbanned",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canBanUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "ban"
                        ]
                    }
                });
                if (!canBanUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_BAN_USERS
                    });
                }
                const user = await ctx.context.internalAdapter.updateUser(ctx.body.userId, {
                    banned: false,
                    banExpires: null,
                    banReason: null,
                    updatedAt: /* @__PURE__ */ new Date()
                });
                return ctx.json({
                    user
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/ban-user`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.banUser`
       *
       * **client:**
       * `authClient.admin.banUser`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-ban-user)
       */ banUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/ban-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    }),
                    /**
             * Reason for the ban
             */ banReason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The reason for the ban"
                    }).optional(),
                    /**
             * Number of seconds until the ban expires
             */ banExpiresIn: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                        description: "The number of seconds until the ban expires"
                    }).optional()
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "banUser",
                        summary: "Ban a user",
                        description: "Ban a user",
                        responses: {
                            200: {
                                description: "User banned",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canBanUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "ban"
                        ]
                    }
                });
                if (!canBanUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_BAN_USERS
                    });
                }
                if (ctx.body.userId === ctx.context.session.user.id) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ADMIN_ERROR_CODES.YOU_CANNOT_BAN_YOURSELF
                    });
                }
                const user = await ctx.context.internalAdapter.updateUser(ctx.body.userId, {
                    banned: true,
                    banReason: ctx.body.banReason || (options === null || options === void 0 ? void 0 : options.defaultBanReason) || "No reason",
                    banExpires: ctx.body.banExpiresIn ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.body.banExpiresIn, "sec") : (options === null || options === void 0 ? void 0 : options.defaultBanExpiresIn) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options.defaultBanExpiresIn, "sec") : void 0,
                    updatedAt: /* @__PURE__ */ new Date()
                }, ctx);
                await ctx.context.internalAdapter.deleteSessions(ctx.body.userId);
                return ctx.json({
                    user
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/impersonate-user`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.impersonateUser`
       *
       * **client:**
       * `authClient.admin.impersonateUser`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-impersonate-user)
       */ impersonateUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/impersonate-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "impersonateUser",
                        summary: "Impersonate a user",
                        description: "Impersonate a user",
                        responses: {
                            200: {
                                description: "Impersonation session created",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                session: {
                                                    $ref: "#/components/schemas/Session"
                                                },
                                                user: {
                                                    $ref: "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const canImpersonateUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: ctx.context.session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "impersonate"
                        ]
                    }
                });
                if (!canImpersonateUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_IMPERSONATE_USERS
                    });
                }
                const targetUser = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
                if (!targetUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                        message: "User not found"
                    });
                }
                const session = await ctx.context.internalAdapter.createSession(targetUser.id, ctx, true, {
                    impersonatedBy: ctx.context.session.user.id,
                    expiresAt: (options === null || options === void 0 ? void 0 : options.impersonationSessionDuration) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options.impersonationSessionDuration, "sec") : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(60 * 60, "sec")
                }, true);
                if (!session) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                        message: ADMIN_ERROR_CODES.FAILED_TO_CREATE_USER
                    });
                }
                const authCookies = ctx.context.authCookies;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(ctx);
                const dontRememberMeCookie = await ctx.getSignedCookie(ctx.context.authCookies.dontRememberToken.name, ctx.context.secret);
                const adminCookieProp = ctx.context.createAuthCookie("admin_session");
                await ctx.setSignedCookie(adminCookieProp.name, "".concat(ctx.context.session.session.token, ":").concat(dontRememberMeCookie || ""), ctx.context.secret, authCookies.sessionToken.options);
                await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
                    session,
                    user: targetUser
                }, true);
                return ctx.json({
                    session,
                    user: targetUser
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/stop-impersonating`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.stopImpersonating`
       *
       * **client:**
       * `authClient.admin.stopImpersonating`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-stop-impersonating)
       */ stopImpersonating: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/stop-impersonating", {
                method: "POST",
                requireHeaders: true
            }, async (ctx)=>{
                const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
                if (!session) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
                }
                if (!session.session.impersonatedBy) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: "You are not impersonating anyone"
                    });
                }
                const user = await ctx.context.internalAdapter.findUserById(session.session.impersonatedBy);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                        message: "Failed to find user"
                    });
                }
                const adminCookieName = ctx.context.createAuthCookie("admin_session").name;
                const adminCookie = await ctx.getSignedCookie(adminCookieName, ctx.context.secret);
                if (!adminCookie) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                        message: "Failed to find admin session"
                    });
                }
                const [adminSessionToken, dontRememberMeCookie] = adminCookie === null || adminCookie === void 0 ? void 0 : adminCookie.split(":");
                const adminSession = await ctx.context.internalAdapter.findSession(adminSessionToken);
                if (!adminSession || adminSession.session.userId !== user.id) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                        message: "Failed to find admin session"
                    });
                }
                await ctx.context.internalAdapter.deleteSession(session.session.token);
                await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, adminSession, !!dontRememberMeCookie);
                return ctx.json(adminSession);
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/revoke-user-session`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.revokeUserSession`
       *
       * **client:**
       * `authClient.admin.revokeUserSession`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-revoke-user-session)
       */ revokeUserSession: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/revoke-user-session", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    sessionToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The session token"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "revokeUserSession",
                        summary: "Revoke a user session",
                        description: "Revoke a user session",
                        responses: {
                            200: {
                                description: "Session revoked",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                success: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canRevokeSession = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        session: [
                            "revoke"
                        ]
                    }
                });
                if (!canRevokeSession) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS
                    });
                }
                await ctx.context.internalAdapter.deleteSession(ctx.body.sessionToken);
                return ctx.json({
                    success: true
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/revoke-user-sessions`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.revokeUserSessions`
       *
       * **client:**
       * `authClient.admin.revokeUserSessions`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-revoke-user-sessions)
       */ revokeUserSessions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/revoke-user-sessions", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "revokeUserSessions",
                        summary: "Revoke all user sessions",
                        description: "Revoke all user sessions",
                        responses: {
                            200: {
                                description: "Sessions revoked",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                success: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canRevokeSession = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        session: [
                            "revoke"
                        ]
                    }
                });
                if (!canRevokeSession) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS
                    });
                }
                await ctx.context.internalAdapter.deleteSessions(ctx.body.userId);
                return ctx.json({
                    success: true
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/remove-user`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.removeUser`
       *
       * **client:**
       * `authClient.admin.removeUser`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-remove-user)
       */ removeUser: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/remove-user", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "removeUser",
                        summary: "Remove a user",
                        description: "Delete a user and all their sessions and accounts. Cannot be undone.",
                        responses: {
                            200: {
                                description: "User removed",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                success: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const session = ctx.context.session;
                const canDeleteUser = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "delete"
                        ]
                    }
                });
                if (!canDeleteUser) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_USERS
                    });
                }
                if (ctx.body.userId === ctx.context.session.user.id) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ADMIN_ERROR_CODES.YOU_CANNOT_REMOVE_YOURSELF
                    });
                }
                const user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                        message: "User not found"
                    });
                }
                await ctx.context.internalAdapter.deleteUser(ctx.body.userId);
                return ctx.json({
                    success: true
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/set-user-password`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.setUserPassword`
       *
       * **client:**
       * `authClient.admin.setUserPassword`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-set-user-password)
       */ setUserPassword: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/set-user-password", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    newPassword: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The new password"
                    }),
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                        description: "The user id"
                    })
                }),
                use: [
                    adminMiddleware
                ],
                metadata: {
                    openapi: {
                        operationId: "setUserPassword",
                        summary: "Set a user's password",
                        description: "Set a user's password",
                        responses: {
                            200: {
                                description: "Password set",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                status: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const canSetUserPassword = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: ctx.context.session.user.id,
                    role: ctx.context.session.user.role,
                    options: opts,
                    permissions: {
                        user: [
                            "set-password"
                        ]
                    }
                });
                if (!canSetUserPassword) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_SET_USERS_PASSWORD
                    });
                }
                const hashedPassword = await ctx.context.password.hash(ctx.body.newPassword);
                await ctx.context.internalAdapter.updatePassword(ctx.body.userId, hashedPassword);
                return ctx.json({
                    status: true
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/admin/has-permission`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.userHasPermission`
       *
       * **client:**
       * `authClient.admin.hasPermission`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-has-permission)
       */ userHasPermission: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/admin/has-permission", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().optional().meta({
                        description: 'The user id. Eg: "user-id"'
                    }),
                    role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                        description: 'The role to check permission for. Eg: "admin"'
                    })
                }).and(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                        permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())),
                        permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["undefined"]()
                    }),
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                        permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["undefined"](),
                        permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()))
                    })
                ])),
                metadata: {
                    openapi: {
                        description: "Check if the user has permission",
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            permission: {
                                                type: "object",
                                                description: "The permission to check",
                                                deprecated: true
                                            },
                                            permissions: {
                                                type: "object",
                                                description: "The permission to check"
                                            }
                                        },
                                        required: [
                                            "permissions"
                                        ]
                                    }
                                }
                            }
                        },
                        responses: {
                            "200": {
                                description: "Success",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                error: {
                                                    type: "string"
                                                },
                                                success: {
                                                    type: "boolean"
                                                }
                                            },
                                            required: [
                                                "success"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    $Infer: {
                        body: {}
                    }
                }
            }, async (ctx)=>{
                var _ctx_body, _ctx_body1;
                if (!((_ctx_body = ctx.body) === null || _ctx_body === void 0 ? void 0 : _ctx_body.permission) && !((_ctx_body1 = ctx.body) === null || _ctx_body1 === void 0 ? void 0 : _ctx_body1.permissions)) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: "invalid permission check. no permission(s) were passed."
                    });
                }
                const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
                if (!session && (ctx.request || ctx.headers) && !ctx.body.userId && !ctx.body.role) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
                }
                const user = (session === null || session === void 0 ? void 0 : session.user) || await ctx.context.internalAdapter.findUserById(ctx.body.userId) || (ctx.body.role ? {
                    id: "",
                    role: ctx.body.role
                } : null);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: "user not found"
                    });
                }
                var _ctx_body_permissions;
                const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$bkwPl2G4$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    userId: user.id,
                    role: user.role,
                    options,
                    permissions: (_ctx_body_permissions = ctx.body.permissions) !== null && _ctx_body_permissions !== void 0 ? _ctx_body_permissions : ctx.body.permission
                });
                return ctx.json({
                    error: null,
                    success: result
                });
            })
        },
        $ERROR_CODES: ADMIN_ERROR_CODES,
        schema: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["m"])(schema, opts.schema),
        options
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.CY7-Inqt.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>getJwksAdapter,
    "b",
    ()=>generateExportedKeyPair,
    "c",
    ()=>createJwk,
    "g",
    ()=>getJwtToken,
    "s",
    ()=>signJWT
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$generate_key_pair$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/jose/dist/browser/key/generate_key_pair.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$export$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/jose/dist/browser/key/export.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$import$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/jose/dist/browser/key/import.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$jwt$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/jose/dist/browser/jwt/sign.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/crypto/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
;
;
;
;
;
const getJwksAdapter = (adapter)=>{
    return {
        getAllKeys: async ()=>{
            return await adapter.findMany({
                model: "jwks"
            });
        },
        getLatestKey: async ()=>{
            const key = await adapter.findMany({
                model: "jwks",
                sortBy: {
                    field: "createdAt",
                    direction: "desc"
                },
                limit: 1
            });
            return key[0];
        },
        createJwk: async (webKey)=>{
            const jwk = await adapter.create({
                model: "jwks",
                data: {
                    ...webKey,
                    createdAt: /* @__PURE__ */ new Date()
                }
            });
            return jwk;
        }
    };
};
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i;
function joseSecs(str) {
    const matched = REGEX.exec(str);
    if (!matched || matched[4] && matched[1]) {
        throw new TypeError("Invalid time period format");
    }
    const value = parseFloat(matched[2]);
    const unit = matched[3].toLowerCase();
    let numericDate;
    switch(unit){
        case "sec":
        case "secs":
        case "second":
        case "seconds":
        case "s":
            numericDate = Math.round(value);
            break;
        case "minute":
        case "minutes":
        case "min":
        case "mins":
        case "m":
            numericDate = Math.round(value * minute);
            break;
        case "hour":
        case "hours":
        case "hr":
        case "hrs":
        case "h":
            numericDate = Math.round(value * hour);
            break;
        case "day":
        case "days":
        case "d":
            numericDate = Math.round(value * day);
            break;
        case "week":
        case "weeks":
        case "w":
            numericDate = Math.round(value * week);
            break;
        // years matched
        default:
            numericDate = Math.round(value * year);
            break;
    }
    if (matched[1] === "-" || matched[4] === "ago") {
        return -numericDate;
    }
    return numericDate;
}
function toExpJWT(expirationTime, iat) {
    if (typeof expirationTime === "number") {
        return expirationTime;
    } else if (expirationTime instanceof Date) {
        return Math.floor(expirationTime.getTime() / 1e3);
    } else {
        return iat + joseSecs(expirationTime);
    }
}
async function generateExportedKeyPair(options) {
    var _options_jwks;
    var _options_jwks_keyPairConfig;
    const { alg, ...cfg } = (_options_jwks_keyPairConfig = options === null || options === void 0 ? void 0 : (_options_jwks = options.jwks) === null || _options_jwks === void 0 ? void 0 : _options_jwks.keyPairConfig) !== null && _options_jwks_keyPairConfig !== void 0 ? _options_jwks_keyPairConfig : {
        alg: "EdDSA",
        crv: "Ed25519"
    };
    const { publicKey, privateKey } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$generate_key_pair$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["generateKeyPair"])(alg, {
        ...cfg,
        extractable: true
    });
    const publicWebKey = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$export$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["exportJWK"])(publicKey);
    const privateWebKey = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$export$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["exportJWK"])(privateKey);
    return {
        publicWebKey,
        privateWebKey,
        alg,
        cfg
    };
}
async function createJwk(ctx, options) {
    var _options_jwks;
    const { publicWebKey, privateWebKey, alg, cfg } = await generateExportedKeyPair(options);
    const stringifiedPrivateWebKey = JSON.stringify(privateWebKey);
    const privateKeyEncryptionEnabled = !(options === null || options === void 0 ? void 0 : (_options_jwks = options.jwks) === null || _options_jwks === void 0 ? void 0 : _options_jwks.disablePrivateKeyEncryption);
    let jwk = {
        alg,
        ...cfg && "crv" in cfg ? {
            crv: cfg.crv
        } : {},
        publicKey: JSON.stringify(publicWebKey),
        privateKey: privateKeyEncryptionEnabled ? JSON.stringify(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["symmetricEncrypt"])({
            key: ctx.context.secret,
            data: stringifiedPrivateWebKey
        })) : stringifiedPrivateWebKey,
        createdAt: /* @__PURE__ */ new Date()
    };
    const adapter = getJwksAdapter(ctx.context.adapter);
    const key = await adapter.createJwk(jwk);
    return key;
}
async function signJWT(ctx, config) {
    var _options_jwt, _options_jwt1, _options_jwt2, _options_jwt3, _options_jwks, _options_jwks_keyPairConfig, _options_jwks1;
    const { options, payload } = config;
    const nowSeconds = Math.floor(Date.now() / 1e3);
    const iat = payload.iat;
    let exp = payload.exp;
    var _options_jwt_expirationTime;
    const defaultExp = toExpJWT((_options_jwt_expirationTime = options === null || options === void 0 ? void 0 : (_options_jwt = options.jwt) === null || _options_jwt === void 0 ? void 0 : _options_jwt.expirationTime) !== null && _options_jwt_expirationTime !== void 0 ? _options_jwt_expirationTime : "15m", iat !== null && iat !== void 0 ? iat : nowSeconds);
    exp = exp !== null && exp !== void 0 ? exp : defaultExp;
    const nbf = payload.nbf;
    const iss = payload.iss;
    var _options_jwt_issuer;
    const defaultIss = (_options_jwt_issuer = options === null || options === void 0 ? void 0 : (_options_jwt1 = options.jwt) === null || _options_jwt1 === void 0 ? void 0 : _options_jwt1.issuer) !== null && _options_jwt_issuer !== void 0 ? _options_jwt_issuer : ctx.context.options.baseURL;
    const aud = payload.aud;
    var _options_jwt_audience;
    const defaultAud = (_options_jwt_audience = options === null || options === void 0 ? void 0 : (_options_jwt2 = options.jwt) === null || _options_jwt2 === void 0 ? void 0 : _options_jwt2.audience) !== null && _options_jwt_audience !== void 0 ? _options_jwt_audience : ctx.context.options.baseURL;
    if (options === null || options === void 0 ? void 0 : (_options_jwt3 = options.jwt) === null || _options_jwt3 === void 0 ? void 0 : _options_jwt3.sign) {
        const jwtPayload = {
            ...payload,
            iat,
            exp,
            nbf,
            iss: iss !== null && iss !== void 0 ? iss : defaultIss,
            aud: aud !== null && aud !== void 0 ? aud : defaultAud
        };
        return options.jwt.sign(jwtPayload);
    }
    const adapter = getJwksAdapter(ctx.context.adapter);
    let key = await adapter.getLatestKey();
    const privateKeyEncryptionEnabled = !(options === null || options === void 0 ? void 0 : (_options_jwks = options.jwks) === null || _options_jwks === void 0 ? void 0 : _options_jwks.disablePrivateKeyEncryption);
    if (key === void 0) {
        key = await createJwk(ctx, options);
    }
    let privateWebKey = privateKeyEncryptionEnabled ? await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["symmetricDecrypt"])({
        key: ctx.context.secret,
        data: JSON.parse(key.privateKey)
    }).catch(()=>{
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Failed to decrypt private private key. Make sure the secret currently in use is the same as the one used to encrypt the private key. If you are using a different secret, either cleanup your jwks or disable private key encryption.");
    }) : key.privateKey;
    var _key_alg, _ref;
    const alg = (_ref = (_key_alg = key.alg) !== null && _key_alg !== void 0 ? _key_alg : options === null || options === void 0 ? void 0 : (_options_jwks1 = options.jwks) === null || _options_jwks1 === void 0 ? void 0 : (_options_jwks_keyPairConfig = _options_jwks1.keyPairConfig) === null || _options_jwks_keyPairConfig === void 0 ? void 0 : _options_jwks_keyPairConfig.alg) !== null && _ref !== void 0 ? _ref : "EdDSA";
    const privateKey = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$key$2f$import$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["importJWK"])(JSON.parse(privateWebKey), alg);
    const jwt = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$jwt$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignJWT"](payload).setProtectedHeader({
        alg,
        kid: key.id
    }).setExpirationTime(exp).setIssuer(iss !== null && iss !== void 0 ? iss : defaultIss).setAudience(aud !== null && aud !== void 0 ? aud : defaultAud);
    if (iat) jwt.setIssuedAt(iat);
    if (payload.sub) jwt.setSubject(payload.sub);
    if (payload.nbf) jwt.setNotBefore(payload.nbf);
    if (payload.jti) jwt.setJti(payload.jti);
    return await jwt.sign(privateKey);
}
async function getJwtToken(ctx, options) {
    var _options_jwt, _options_jwt_getSubject, _options_jwt1;
    const payload = !(options === null || options === void 0 ? void 0 : (_options_jwt = options.jwt) === null || _options_jwt === void 0 ? void 0 : _options_jwt.definePayload) ? ctx.context.session.user : await (options === null || options === void 0 ? void 0 : options.jwt.definePayload(ctx.context.session));
    var _ref;
    return await signJWT(ctx, {
        options,
        payload: {
            ...payload,
            sub: (_ref = await (options === null || options === void 0 ? void 0 : (_options_jwt1 = options.jwt) === null || _options_jwt1 === void 0 ? void 0 : (_options_jwt_getSubject = _options_jwt1.getSubject) === null || _options_jwt_getSubject === void 0 ? void 0 : _options_jwt_getSubject.call(_options_jwt1, ctx.context.session))) !== null && _ref !== void 0 ? _ref : ctx.context.session.user.id
        }
    });
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DIVj9vPt.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "a",
    ()=>getMetadata,
    "g",
    ()=>getClient,
    "o",
    ()=>oidcProvider,
    "s",
    ()=>schema
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$jwt$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/jose/dist/browser/jwt/sign.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/crypto/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CY7$2d$Inqt$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CY7-Inqt.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const schema = {
    oauthApplication: {
        modelName: "oauthApplication",
        fields: {
            name: {
                type: "string"
            },
            icon: {
                type: "string",
                required: false
            },
            metadata: {
                type: "string",
                required: false
            },
            clientId: {
                type: "string",
                unique: true
            },
            clientSecret: {
                type: "string",
                required: false
            },
            redirectURLs: {
                type: "string"
            },
            type: {
                type: "string"
            },
            disabled: {
                type: "boolean",
                required: false,
                defaultValue: false
            },
            userId: {
                type: "string",
                required: false,
                references: {
                    model: "user",
                    field: "id",
                    onDelete: "cascade"
                }
            },
            createdAt: {
                type: "date"
            },
            updatedAt: {
                type: "date"
            }
        }
    },
    oauthAccessToken: {
        modelName: "oauthAccessToken",
        fields: {
            accessToken: {
                type: "string",
                unique: true
            },
            refreshToken: {
                type: "string",
                unique: true
            },
            accessTokenExpiresAt: {
                type: "date"
            },
            refreshTokenExpiresAt: {
                type: "date"
            },
            clientId: {
                type: "string",
                references: {
                    model: "oauthApplication",
                    field: "clientId",
                    onDelete: "cascade"
                }
            },
            userId: {
                type: "string",
                required: false,
                references: {
                    model: "user",
                    field: "id",
                    onDelete: "cascade"
                }
            },
            scopes: {
                type: "string"
            },
            createdAt: {
                type: "date"
            },
            updatedAt: {
                type: "date"
            }
        }
    },
    oauthConsent: {
        modelName: "oauthConsent",
        fields: {
            clientId: {
                type: "string",
                references: {
                    model: "oauthApplication",
                    field: "clientId",
                    onDelete: "cascade"
                }
            },
            userId: {
                type: "string",
                references: {
                    model: "user",
                    field: "id",
                    onDelete: "cascade"
                }
            },
            scopes: {
                type: "string"
            },
            createdAt: {
                type: "date"
            },
            updatedAt: {
                type: "date"
            },
            consentGiven: {
                type: "boolean"
            }
        }
    }
};
function formatErrorURL(url, error, description) {
    return "".concat(url.includes("?") ? "&" : "?", "error=").concat(error, "&error_description=").concat(description);
}
function getErrorURL(ctx, error, description) {
    var _ctx_context_options_onAPIError;
    const baseURL = ((_ctx_context_options_onAPIError = ctx.context.options.onAPIError) === null || _ctx_context_options_onAPIError === void 0 ? void 0 : _ctx_context_options_onAPIError.errorURL) || "".concat(ctx.context.baseURL, "/error");
    const formattedURL = formatErrorURL(baseURL, error, description);
    return formattedURL;
}
async function authorize(ctx, options) {
    var _query_scope, _query_code_challenge_method;
    const handleRedirect = (url)=>{
        var _ctx_request;
        const fromFetch = ((_ctx_request = ctx.request) === null || _ctx_request === void 0 ? void 0 : _ctx_request.headers.get("sec-fetch-mode")) === "cors";
        if (fromFetch) {
            return ctx.json({
                redirect: true,
                url
            });
        } else {
            throw ctx.redirect(url);
        }
    };
    const opts = {
        codeExpiresIn: 600,
        defaultScope: "openid",
        ...options,
        scopes: [
            "openid",
            "profile",
            "email",
            "offline_access",
            ...(options === null || options === void 0 ? void 0 : options.scopes) || []
        ]
    };
    if (!ctx.request) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
            error_description: "request not found",
            error: "invalid_request"
        });
    }
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
    if (!session) {
        var _ctx_request_url;
        await ctx.setSignedCookie("oidc_login_prompt", JSON.stringify(ctx.query), ctx.context.secret, {
            maxAge: 600,
            path: "/",
            sameSite: "lax"
        });
        const queryFromURL = (_ctx_request_url = ctx.request.url) === null || _ctx_request_url === void 0 ? void 0 : _ctx_request_url.split("?")[1];
        return handleRedirect("".concat(options.loginPage, "?").concat(queryFromURL));
    }
    const query = ctx.query;
    if (!query.client_id) {
        const errorURL = getErrorURL(ctx, "invalid_client", "client_id is required");
        throw ctx.redirect(errorURL);
    }
    if (!query.response_type) {
        getErrorURL(ctx, "invalid_request", "response_type is required");
        throw ctx.redirect(getErrorURL(ctx, "invalid_request", "response_type is required"));
    }
    const client = await getClient(ctx.query.client_id, ctx.context.adapter, options.trustedClients || []);
    if (!client) {
        const errorURL = getErrorURL(ctx, "invalid_client", "client_id is required");
        throw ctx.redirect(errorURL);
    }
    const redirectURI = client.redirectURLs.find((url)=>url === ctx.query.redirect_uri);
    if (!redirectURI || !query.redirect_uri) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "Invalid redirect URI"
        });
    }
    if (client.disabled) {
        const errorURL = getErrorURL(ctx, "client_disabled", "client is disabled");
        throw ctx.redirect(errorURL);
    }
    if (query.response_type !== "code") {
        const errorURL = getErrorURL(ctx, "unsupported_response_type", "unsupported response type");
        throw ctx.redirect(errorURL);
    }
    const requestScope = ((_query_scope = query.scope) === null || _query_scope === void 0 ? void 0 : _query_scope.split(" ").filter((s)=>s)) || opts.defaultScope.split(" ");
    const invalidScopes = requestScope.filter((scope)=>{
        return !opts.scopes.includes(scope);
    });
    if (invalidScopes.length) {
        return handleRedirect(formatErrorURL(query.redirect_uri, "invalid_scope", "The following scopes are invalid: ".concat(invalidScopes.join(", "))));
    }
    if ((!query.code_challenge || !query.code_challenge_method) && options.requirePKCE) {
        return handleRedirect(formatErrorURL(query.redirect_uri, "invalid_request", "pkce is required"));
    }
    if (!query.code_challenge_method) {
        query.code_challenge_method = "plain";
    }
    if (![
        "s256",
        options.allowPlainCodeChallengeMethod ? "plain" : "s256"
    ].includes(((_query_code_challenge_method = query.code_challenge_method) === null || _query_code_challenge_method === void 0 ? void 0 : _query_code_challenge_method.toLowerCase()) || "")) {
        return handleRedirect(formatErrorURL(query.redirect_uri, "invalid_request", "invalid code_challenge method"));
    }
    const code = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z", "0-9");
    const codeExpiresInMs = opts.codeExpiresIn * 1e3;
    const expiresAt = new Date(Date.now() + codeExpiresInMs);
    try {
        await ctx.context.internalAdapter.createVerificationValue({
            value: JSON.stringify({
                clientId: client.clientId,
                redirectURI: query.redirect_uri,
                scope: requestScope,
                userId: session.user.id,
                authTime: new Date(session.session.createdAt).getTime(),
                /**
           * If the prompt is set to `consent`, then we need
           * to require the user to consent to the scopes.
           *
           * This means the code now needs to be treated as a
           * consent request.
           *
           * once the user consents, the code will be updated
           * with the actual code. This is to prevent the
           * client from using the code before the user
           * consents.
           */ requireConsent: query.prompt === "consent",
                state: query.prompt === "consent" ? query.state : null,
                codeChallenge: query.code_challenge,
                codeChallengeMethod: query.code_challenge_method,
                nonce: query.nonce
            }),
            identifier: code,
            expiresAt
        }, ctx);
    } catch (e) {
        return handleRedirect(formatErrorURL(query.redirect_uri, "server_error", "An error occurred while processing the request"));
    }
    const redirectURIWithCode = new URL(redirectURI);
    redirectURIWithCode.searchParams.set("code", code);
    redirectURIWithCode.searchParams.set("state", ctx.query.state);
    if (query.prompt !== "consent") {
        return handleRedirect(redirectURIWithCode.toString());
    }
    if (client.skipConsent) {
        return handleRedirect(redirectURIWithCode.toString());
    }
    const hasAlreadyConsented = await ctx.context.adapter.findOne({
        model: "oauthConsent",
        where: [
            {
                field: "clientId",
                value: client.clientId
            },
            {
                field: "userId",
                value: session.user.id
            }
        ]
    }).then((res)=>!!(res === null || res === void 0 ? void 0 : res.consentGiven));
    if (hasAlreadyConsented) {
        return handleRedirect(redirectURIWithCode.toString());
    }
    if (options === null || options === void 0 ? void 0 : options.consentPage) {
        await ctx.setSignedCookie("oidc_consent_prompt", code, ctx.context.secret, {
            maxAge: 600,
            path: "/",
            sameSite: "lax"
        });
        const urlParams = new URLSearchParams();
        urlParams.set("consent_code", code);
        urlParams.set("client_id", client.clientId);
        urlParams.set("scope", requestScope.join(" "));
        const consentURI = "".concat(options.consentPage, "?").concat(urlParams.toString());
        return handleRedirect(consentURI);
    }
    const htmlFn = options === null || options === void 0 ? void 0 : options.getConsentHTML;
    if (!htmlFn) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
            message: "No consent page provided"
        });
    }
    return new Response(htmlFn({
        scopes: requestScope,
        clientMetadata: client.metadata,
        clientIcon: client === null || client === void 0 ? void 0 : client.icon,
        clientId: client.clientId,
        clientName: client.name,
        code
    }), {
        headers: {
            "content-type": "text/html"
        }
    });
}
const defaultClientSecretHasher = async (clientSecret)=>{
    const hash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHash"])("SHA-256").digest(new TextEncoder().encode(clientSecret));
    const hashed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64Url"].encode(new Uint8Array(hash), {
        padding: false
    });
    return hashed;
};
const getJwtPlugin = (ctx)=>{
    var _ctx_context_options_plugins;
    return (_ctx_context_options_plugins = ctx.context.options.plugins) === null || _ctx_context_options_plugins === void 0 ? void 0 : _ctx_context_options_plugins.find((plugin)=>plugin.id === "jwt");
};
async function getClient(clientId, adapter) {
    let trustedClients = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    const trustedClient = trustedClients.find((client)=>client.clientId === clientId);
    if (trustedClient) {
        return trustedClient;
    }
    const dbClient = await adapter.findOne({
        model: "oauthApplication",
        where: [
            {
                field: "clientId",
                value: clientId
            }
        ]
    }).then((res)=>{
        if (!res) {
            return null;
        }
        var _res_redirectURLs;
        return {
            ...res,
            redirectURLs: ((_res_redirectURLs = res.redirectURLs) !== null && _res_redirectURLs !== void 0 ? _res_redirectURLs : "").split(","),
            metadata: res.metadata ? JSON.parse(res.metadata) : {}
        };
    });
    return dbClient;
}
const getMetadata = (ctx, options)=>{
    var _jwtPlugin_options;
    const jwtPlugin = getJwtPlugin(ctx);
    const issuer = jwtPlugin && ((_jwtPlugin_options = jwtPlugin.options) === null || _jwtPlugin_options === void 0 ? void 0 : _jwtPlugin_options.jwt) && jwtPlugin.options.jwt.issuer ? jwtPlugin.options.jwt.issuer : ctx.context.options.baseURL;
    const baseURL = ctx.context.baseURL;
    const supportedAlgs = (options === null || options === void 0 ? void 0 : options.useJWTPlugin) ? [
        "RS256",
        "EdDSA",
        "none"
    ] : [
        "HS256",
        "none"
    ];
    return {
        issuer,
        authorization_endpoint: "".concat(baseURL, "/oauth2/authorize"),
        token_endpoint: "".concat(baseURL, "/oauth2/token"),
        userinfo_endpoint: "".concat(baseURL, "/oauth2/userinfo"),
        jwks_uri: "".concat(baseURL, "/jwks"),
        registration_endpoint: "".concat(baseURL, "/oauth2/register"),
        scopes_supported: [
            "openid",
            "profile",
            "email",
            "offline_access"
        ],
        response_types_supported: [
            "code"
        ],
        response_modes_supported: [
            "query"
        ],
        grant_types_supported: [
            "authorization_code",
            "refresh_token"
        ],
        acr_values_supported: [
            "urn:mace:incommon:iap:silver",
            "urn:mace:incommon:iap:bronze"
        ],
        subject_types_supported: [
            "public"
        ],
        id_token_signing_alg_values_supported: supportedAlgs,
        token_endpoint_auth_methods_supported: [
            "client_secret_basic",
            "client_secret_post",
            "none"
        ],
        code_challenge_methods_supported: [
            "S256"
        ],
        claims_supported: [
            "sub",
            "iss",
            "aud",
            "exp",
            "nbf",
            "iat",
            "jti",
            "email",
            "email_verified",
            "name"
        ],
        ...options === null || options === void 0 ? void 0 : options.metadata
    };
};
const oidcProvider = (options)=>{
    const modelName = {
        oauthClient: "oauthApplication",
        oauthAccessToken: "oauthAccessToken",
        oauthConsent: "oauthConsent"
    };
    const opts = {
        codeExpiresIn: 600,
        defaultScope: "openid",
        accessTokenExpiresIn: 3600,
        refreshTokenExpiresIn: 604800,
        allowPlainCodeChallengeMethod: true,
        storeClientSecret: "plain",
        ...options,
        scopes: [
            "openid",
            "profile",
            "email",
            "offline_access",
            ...(options === null || options === void 0 ? void 0 : options.scopes) || []
        ]
    };
    const trustedClients = options.trustedClients || [];
    async function storeClientSecret(ctx, clientSecret) {
        if (opts.storeClientSecret === "encrypted") {
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["symmetricEncrypt"])({
                key: ctx.context.secret,
                data: clientSecret
            });
        }
        if (opts.storeClientSecret === "hashed") {
            return await defaultClientSecretHasher(clientSecret);
        }
        if (typeof opts.storeClientSecret === "object" && "hash" in opts.storeClientSecret) {
            return await opts.storeClientSecret.hash(clientSecret);
        }
        if (typeof opts.storeClientSecret === "object" && "encrypt" in opts.storeClientSecret) {
            return await opts.storeClientSecret.encrypt(clientSecret);
        }
        return clientSecret;
    }
    async function verifyStoredClientSecret(ctx, storedClientSecret, clientSecret) {
        if (opts.storeClientSecret === "encrypted") {
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["symmetricDecrypt"])({
                key: ctx.context.secret,
                data: storedClientSecret
            }) === clientSecret;
        }
        if (opts.storeClientSecret === "hashed") {
            const hashedClientSecret = await defaultClientSecretHasher(clientSecret);
            return hashedClientSecret === storedClientSecret;
        }
        if (typeof opts.storeClientSecret === "object" && "hash" in opts.storeClientSecret) {
            const hashedClientSecret = await opts.storeClientSecret.hash(clientSecret);
            return hashedClientSecret === storedClientSecret;
        }
        if (typeof opts.storeClientSecret === "object" && "decrypt" in opts.storeClientSecret) {
            const decryptedClientSecret = await opts.storeClientSecret.decrypt(storedClientSecret);
            return decryptedClientSecret === clientSecret;
        }
        return clientSecret === storedClientSecret;
    }
    return {
        id: "oidc",
        hooks: {
            after: [
                {
                    matcher () {
                        return true;
                    },
                    handler: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(async (ctx)=>{
                        var _ctx_context_responseHeaders, _parsedSetCookieHeader_get;
                        const cookie = await ctx.getSignedCookie("oidc_login_prompt", ctx.context.secret);
                        const cookieName = ctx.context.authCookies.sessionToken.name;
                        const parsedSetCookieHeader = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["p"])(((_ctx_context_responseHeaders = ctx.context.responseHeaders) === null || _ctx_context_responseHeaders === void 0 ? void 0 : _ctx_context_responseHeaders.get("set-cookie")) || "");
                        const hasSessionToken = parsedSetCookieHeader.has(cookieName);
                        if (!cookie || !hasSessionToken) {
                            return;
                        }
                        ctx.setCookie("oidc_login_prompt", "", {
                            maxAge: 0
                        });
                        const sessionCookie = (_parsedSetCookieHeader_get = parsedSetCookieHeader.get(cookieName)) === null || _parsedSetCookieHeader_get === void 0 ? void 0 : _parsedSetCookieHeader_get.value;
                        const sessionToken = sessionCookie === null || sessionCookie === void 0 ? void 0 : sessionCookie.split(".")[0];
                        if (!sessionToken) {
                            return;
                        }
                        const session = await ctx.context.internalAdapter.findSession(sessionToken);
                        if (!session) {
                            return;
                        }
                        ctx.query = JSON.parse(cookie);
                        ctx.query.prompt = "consent";
                        ctx.context.session = session;
                        const response = await authorize(ctx, opts);
                        return response;
                    })
                }
            ]
        },
        endpoints: {
            getOpenIdConfig: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/.well-known/openid-configuration", {
                method: "GET",
                metadata: {
                    isAction: false
                }
            }, async (ctx)=>{
                const metadata = getMetadata(ctx, options);
                return ctx.json(metadata);
            }),
            oAuth2authorize: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/authorize", {
                method: "GET",
                query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()),
                metadata: {
                    openapi: {
                        description: "Authorize an OAuth2 request",
                        responses: {
                            "200": {
                                description: "Authorization response generated successfully",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            additionalProperties: true,
                                            description: "Authorization response, contents depend on the authorize function implementation"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                return authorize(ctx, opts);
            }),
            oAuthConsent: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/consent", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    accept: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"](),
                    consent_code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional()
                }),
                use: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
                ],
                metadata: {
                    openapi: {
                        description: "Handle OAuth2 consent. Supports both URL parameter-based flows (consent_code in body) and cookie-based flows (signed cookie).",
                        requestBody: {
                            required: true,
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            accept: {
                                                type: "boolean",
                                                description: "Whether the user accepts or denies the consent request"
                                            },
                                            consent_code: {
                                                type: "string",
                                                description: "The consent code from the authorization request. Optional if using cookie-based flow."
                                            }
                                        },
                                        required: [
                                            "accept"
                                        ]
                                    }
                                }
                            }
                        },
                        responses: {
                            "200": {
                                description: "Consent processed successfully",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                redirectURI: {
                                                    type: "string",
                                                    format: "uri",
                                                    description: "The URI to redirect to, either with an authorization code or an error"
                                                }
                                            },
                                            required: [
                                                "redirectURI"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                let consentCode = ctx.body.consent_code || null;
                if (!consentCode) {
                    consentCode = await ctx.getSignedCookie("oidc_consent_prompt", ctx.context.secret);
                }
                if (!consentCode) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "consent_code is required (either in body or cookie)",
                        error: "invalid_request"
                    });
                }
                const verification = await ctx.context.internalAdapter.findVerificationValue(consentCode);
                if (!verification) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "Invalid code",
                        error: "invalid_request"
                    });
                }
                if (verification.expiresAt < /* @__PURE__ */ new Date()) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "Code expired",
                        error: "invalid_request"
                    });
                }
                ctx.setCookie("oidc_consent_prompt", "", {
                    maxAge: 0
                });
                const value = JSON.parse(verification.value);
                if (!value.requireConsent) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "Consent not required",
                        error: "invalid_request"
                    });
                }
                if (!ctx.body.accept) {
                    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);
                    return ctx.json({
                        redirectURI: "".concat(value.redirectURI, "?error=access_denied&error_description=User denied access")
                    });
                }
                const code = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z", "0-9");
                const codeExpiresInMs = opts.codeExpiresIn * 1e3;
                const expiresAt = new Date(Date.now() + codeExpiresInMs);
                await ctx.context.internalAdapter.updateVerificationValue(verification.id, {
                    value: JSON.stringify({
                        ...value,
                        requireConsent: false
                    }),
                    identifier: code,
                    expiresAt
                });
                await ctx.context.adapter.create({
                    model: modelName.oauthConsent,
                    data: {
                        clientId: value.clientId,
                        userId: value.userId,
                        scopes: value.scope.join(" "),
                        consentGiven: true,
                        createdAt: /* @__PURE__ */ new Date(),
                        updatedAt: /* @__PURE__ */ new Date()
                    }
                });
                const redirectURI = new URL(value.redirectURI);
                redirectURI.searchParams.set("code", code);
                if (value.state) redirectURI.searchParams.set("state", value.state);
                return ctx.json({
                    redirectURI: redirectURI.toString()
                });
            }),
            oAuth2token: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/token", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()),
                metadata: {
                    isAction: false
                }
            }, async (ctx)=>{
                var _ctx_request;
                let { body } = ctx;
                if (!body) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "request body not found",
                        error: "invalid_request"
                    });
                }
                if (body instanceof FormData) {
                    body = Object.fromEntries(body.entries());
                }
                if (!(body instanceof Object)) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "request body is not an object",
                        error: "invalid_request"
                    });
                }
                let { client_id, client_secret } = body;
                const authorization = ((_ctx_request = ctx.request) === null || _ctx_request === void 0 ? void 0 : _ctx_request.headers.get("authorization")) || null;
                if (authorization && !client_id && !client_secret && authorization.startsWith("Basic ")) {
                    try {
                        const encoded = authorization.replace("Basic ", "");
                        const decoded = new TextDecoder().decode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64"].decode(encoded));
                        if (!decoded.includes(":")) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                                error_description: "invalid authorization header format",
                                error: "invalid_client"
                            });
                        }
                        const [id, secret] = decoded.split(":");
                        if (!id || !secret) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                                error_description: "invalid authorization header format",
                                error: "invalid_client"
                            });
                        }
                        client_id = id;
                        client_secret = secret;
                    } catch (error) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "invalid authorization header format",
                            error: "invalid_client"
                        });
                    }
                }
                const now = Date.now();
                const iat = Math.floor(now / 1e3);
                var _opts_accessTokenExpiresIn;
                const exp = iat + ((_opts_accessTokenExpiresIn = opts.accessTokenExpiresIn) !== null && _opts_accessTokenExpiresIn !== void 0 ? _opts_accessTokenExpiresIn : 3600);
                const accessTokenExpiresAt = new Date(exp * 1e3);
                var _opts_refreshTokenExpiresIn;
                const refreshTokenExpiresAt = new Date((iat + ((_opts_refreshTokenExpiresIn = opts.refreshTokenExpiresIn) !== null && _opts_refreshTokenExpiresIn !== void 0 ? _opts_refreshTokenExpiresIn : 604800)) * 1e3);
                const { grant_type, code, redirect_uri, refresh_token, code_verifier } = body;
                if (grant_type === "refresh_token") {
                    if (!refresh_token) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                            error_description: "refresh_token is required",
                            error: "invalid_request"
                        });
                    }
                    const token = await ctx.context.adapter.findOne({
                        model: modelName.oauthAccessToken,
                        where: [
                            {
                                field: "refreshToken",
                                value: refresh_token.toString()
                            }
                        ]
                    });
                    if (!token) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "invalid refresh token",
                            error: "invalid_grant"
                        });
                    }
                    if (token.clientId !== (client_id === null || client_id === void 0 ? void 0 : client_id.toString())) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "invalid client_id",
                            error: "invalid_client"
                        });
                    }
                    if (token.refreshTokenExpiresAt < /* @__PURE__ */ new Date()) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "refresh token expired",
                            error: "invalid_grant"
                        });
                    }
                    const accessToken2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z");
                    const newRefreshToken = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z");
                    await ctx.context.adapter.create({
                        model: modelName.oauthAccessToken,
                        data: {
                            accessToken: accessToken2,
                            refreshToken: newRefreshToken,
                            accessTokenExpiresAt,
                            refreshTokenExpiresAt,
                            clientId: client_id.toString(),
                            userId: token.userId,
                            scopes: token.scopes,
                            createdAt: new Date(iat * 1e3),
                            updatedAt: new Date(iat * 1e3)
                        }
                    });
                    return ctx.json({
                        access_token: accessToken2,
                        token_type: "bearer",
                        expires_in: opts.accessTokenExpiresIn,
                        refresh_token: newRefreshToken,
                        scope: token.scopes
                    });
                }
                if (!code) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "code is required",
                        error: "invalid_request"
                    });
                }
                if (options.requirePKCE && !code_verifier) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "code verifier is missing",
                        error: "invalid_request"
                    });
                }
                const verificationValue = await ctx.context.internalAdapter.findVerificationValue(code.toString());
                if (!verificationValue) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "invalid code",
                        error: "invalid_grant"
                    });
                }
                if (verificationValue.expiresAt < /* @__PURE__ */ new Date()) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "code expired",
                        error: "invalid_grant"
                    });
                }
                await ctx.context.internalAdapter.deleteVerificationValue(verificationValue.id);
                if (!client_id) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "client_id is required",
                        error: "invalid_client"
                    });
                }
                if (!grant_type) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "grant_type is required",
                        error: "invalid_request"
                    });
                }
                if (grant_type !== "authorization_code") {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "grant_type must be 'authorization_code'",
                        error: "unsupported_grant_type"
                    });
                }
                if (!redirect_uri) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "redirect_uri is required",
                        error: "invalid_request"
                    });
                }
                const client = await getClient(client_id.toString(), ctx.context.adapter, trustedClients);
                if (!client) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "invalid client_id",
                        error: "invalid_client"
                    });
                }
                if (client.disabled) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "client is disabled",
                        error: "invalid_client"
                    });
                }
                const value = JSON.parse(verificationValue.value);
                if (value.clientId !== client_id.toString()) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "invalid client_id",
                        error: "invalid_client"
                    });
                }
                if (value.redirectURI !== redirect_uri.toString()) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "invalid redirect_uri",
                        error: "invalid_client"
                    });
                }
                if (value.codeChallenge && !code_verifier) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error_description: "code verifier is missing",
                        error: "invalid_request"
                    });
                }
                if (client.type === "public") {
                    if (!code_verifier) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                            error_description: "code verifier is required for public clients",
                            error: "invalid_request"
                        });
                    }
                } else {
                    if (!client.clientSecret || !client_secret) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "client_secret is required for confidential clients",
                            error: "invalid_client"
                        });
                    }
                    const isValidSecret = await verifyStoredClientSecret(ctx, client.clientSecret, client_secret.toString());
                    if (!isValidSecret) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                            error_description: "invalid client_secret",
                            error: "invalid_client"
                        });
                    }
                }
                const challenge = value.codeChallengeMethod === "plain" ? code_verifier : await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHash"])("SHA-256", "base64urlnopad").digest(code_verifier);
                if (challenge !== value.codeChallenge) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "code verification failed",
                        error: "invalid_request"
                    });
                }
                const requestedScopes = value.scope;
                await ctx.context.internalAdapter.deleteVerificationValue(verificationValue.id);
                const accessToken = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z");
                const refreshToken = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "A-Z", "a-z");
                await ctx.context.adapter.create({
                    model: modelName.oauthAccessToken,
                    data: {
                        accessToken,
                        refreshToken,
                        accessTokenExpiresAt,
                        refreshTokenExpiresAt,
                        clientId: client_id.toString(),
                        userId: value.userId,
                        scopes: requestedScopes.join(" "),
                        createdAt: new Date(iat * 1e3),
                        updatedAt: new Date(iat * 1e3)
                    }
                });
                const user = await ctx.context.internalAdapter.findUserById(value.userId);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "user not found",
                        error: "invalid_grant"
                    });
                }
                const profile = {
                    given_name: user.name.split(" ")[0],
                    family_name: user.name.split(" ")[1],
                    name: user.name,
                    profile: user.image,
                    updated_at: new Date(user.updatedAt).toISOString()
                };
                const email = {
                    email: user.email,
                    email_verified: user.emailVerified
                };
                const userClaims = {
                    ...requestedScopes.includes("profile") ? profile : {},
                    ...requestedScopes.includes("email") ? email : {}
                };
                const additionalUserClaims = options.getAdditionalUserInfoClaim ? await options.getAdditionalUserInfoClaim(user, requestedScopes, client) : {};
                const payload = {
                    sub: user.id,
                    aud: client_id.toString(),
                    iat: Date.now(),
                    auth_time: ctx.context.session ? new Date(ctx.context.session.session.createdAt).getTime() : void 0,
                    nonce: value.nonce,
                    acr: "urn:mace:incommon:iap:silver",
                    // default to silver - ⚠︎ this should be configurable and should be validated against the client's metadata
                    ...userClaims,
                    ...additionalUserClaims
                };
                const expirationTime = Math.floor(Date.now() / 1e3) + opts.accessTokenExpiresIn;
                let idToken;
                if (options.useJWTPlugin) {
                    var _ctx_request1, _jwtPlugin_options;
                    const jwtPlugin = getJwtPlugin(ctx);
                    if (!jwtPlugin) {
                        ctx.context.logger.error("OIDC: `useJWTPlugin` is enabled but the JWT plugin is not available. Make sure you have the JWT Plugin in your plugins array or set `useJWTPlugin` to false.");
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                            error_description: "JWT plugin is not enabled",
                            error: "internal_server_error"
                        });
                    }
                    idToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CY7$2d$Inqt$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])({
                        ...ctx,
                        context: {
                            ...ctx.context,
                            session: {
                                session: {
                                    id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z"),
                                    createdAt: new Date(iat * 1e3),
                                    updatedAt: new Date(iat * 1e3),
                                    userId: user.id,
                                    expiresAt: accessTokenExpiresAt,
                                    token: accessToken,
                                    ipAddress: (_ctx_request1 = ctx.request) === null || _ctx_request1 === void 0 ? void 0 : _ctx_request1.headers.get("x-forwarded-for")
                                },
                                user
                            }
                        }
                    }, {
                        ...jwtPlugin.options,
                        jwt: {
                            ...(_jwtPlugin_options = jwtPlugin.options) === null || _jwtPlugin_options === void 0 ? void 0 : _jwtPlugin_options.jwt,
                            getSubject: ()=>user.id,
                            audience: client_id.toString(),
                            issuer: ctx.context.options.baseURL,
                            expirationTime,
                            definePayload: ()=>payload
                        }
                    });
                } else {
                    idToken = await new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$jose$2f$dist$2f$browser$2f$jwt$2f$sign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SignJWT"](payload).setProtectedHeader({
                        alg: "HS256"
                    }).setIssuedAt(iat).setExpirationTime(accessTokenExpiresAt).sign(new TextEncoder().encode(client.clientSecret));
                }
                return ctx.json({
                    access_token: accessToken,
                    token_type: "Bearer",
                    expires_in: opts.accessTokenExpiresIn,
                    refresh_token: requestedScopes.includes("offline_access") ? refreshToken : void 0,
                    scope: requestedScopes.join(" "),
                    id_token: requestedScopes.includes("openid") ? idToken : void 0
                }, {
                    headers: {
                        "Cache-Control": "no-store",
                        Pragma: "no-cache"
                    }
                });
            }),
            oAuth2userInfo: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/userinfo", {
                method: "GET",
                metadata: {
                    isAction: false,
                    openapi: {
                        description: "Get OAuth2 user information",
                        responses: {
                            "200": {
                                description: "User information retrieved successfully",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                sub: {
                                                    type: "string",
                                                    description: "Subject identifier (user ID)"
                                                },
                                                email: {
                                                    type: "string",
                                                    format: "email",
                                                    nullable: true,
                                                    description: "User's email address, included if 'email' scope is granted"
                                                },
                                                name: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "User's full name, included if 'profile' scope is granted"
                                                },
                                                picture: {
                                                    type: "string",
                                                    format: "uri",
                                                    nullable: true,
                                                    description: "User's profile picture URL, included if 'profile' scope is granted"
                                                },
                                                given_name: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "User's given name, included if 'profile' scope is granted"
                                                },
                                                family_name: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "User's family name, included if 'profile' scope is granted"
                                                },
                                                email_verified: {
                                                    type: "boolean",
                                                    nullable: true,
                                                    description: "Whether the email is verified, included if 'email' scope is granted"
                                                }
                                            },
                                            required: [
                                                "sub"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                if (!ctx.request) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "request not found",
                        error: "invalid_request"
                    });
                }
                const authorization = ctx.request.headers.get("authorization");
                if (!authorization) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "authorization header not found",
                        error: "invalid_request"
                    });
                }
                const token = authorization.replace("Bearer ", "");
                const accessToken = await ctx.context.adapter.findOne({
                    model: modelName.oauthAccessToken,
                    where: [
                        {
                            field: "accessToken",
                            value: token
                        }
                    ]
                });
                if (!accessToken) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "invalid access token",
                        error: "invalid_token"
                    });
                }
                if (accessToken.accessTokenExpiresAt < /* @__PURE__ */ new Date()) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "The Access Token expired",
                        error: "invalid_token"
                    });
                }
                const client = await getClient(accessToken.clientId, ctx.context.adapter, trustedClients);
                if (!client) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "client not found",
                        error: "invalid_token"
                    });
                }
                const user = await ctx.context.internalAdapter.findUserById(accessToken.userId);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error_description: "user not found",
                        error: "invalid_token"
                    });
                }
                const requestedScopes = accessToken.scopes.split(" ");
                const baseUserClaims = {
                    sub: user.id,
                    email: requestedScopes.includes("email") ? user.email : void 0,
                    name: requestedScopes.includes("profile") ? user.name : void 0,
                    picture: requestedScopes.includes("profile") ? user.image : void 0,
                    given_name: requestedScopes.includes("profile") ? user.name.split(" ")[0] : void 0,
                    family_name: requestedScopes.includes("profile") ? user.name.split(" ")[1] : void 0,
                    email_verified: requestedScopes.includes("email") ? user.emailVerified : void 0
                };
                const userClaims = options.getAdditionalUserInfoClaim ? await options.getAdditionalUserInfoClaim(user, requestedScopes, client) : baseUserClaims;
                return ctx.json({
                    ...baseUserClaims,
                    ...userClaims
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/oauth2/register`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.registerOAuthApplication`
       *
       * **client:**
       * `authClient.oauth2.register`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/oidc-provider#api-method-oauth2-register)
       */ registerOAuthApplication: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/register", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    redirect_uris: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()).meta({
                        description: 'A list of redirect URIs. Eg: ["https://client.example.com/callback"]'
                    }),
                    token_endpoint_auth_method: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "none",
                        "client_secret_basic",
                        "client_secret_post"
                    ]).meta({
                        description: 'The authentication method for the token endpoint. Eg: "client_secret_basic"'
                    }).default("client_secret_basic").optional(),
                    grant_types: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "authorization_code",
                        "implicit",
                        "password",
                        "client_credentials",
                        "refresh_token",
                        "urn:ietf:params:oauth:grant-type:jwt-bearer",
                        "urn:ietf:params:oauth:grant-type:saml2-bearer"
                    ])).meta({
                        description: 'The grant types supported by the application. Eg: ["authorization_code"]'
                    }).default([
                        "authorization_code"
                    ]).optional(),
                    response_types: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                        "code",
                        "token"
                    ])).meta({
                        description: 'The response types supported by the application. Eg: ["code"]'
                    }).default([
                        "code"
                    ]).optional(),
                    client_name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The name of the application. Eg: "My App"'
                    }).optional(),
                    client_uri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The URI of the application. Eg: "https://client.example.com"'
                    }).optional(),
                    logo_uri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The URI of the application logo. Eg: "https://client.example.com/logo.png"'
                    }).optional(),
                    scope: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The scopes supported by the application. Separated by spaces. Eg: "profile email"'
                    }).optional(),
                    contacts: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()).meta({
                        description: 'The contact information for the application. Eg: ["admin@example.com"]'
                    }).optional(),
                    tos_uri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The URI of the application terms of service. Eg: "https://client.example.com/tos"'
                    }).optional(),
                    policy_uri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The URI of the application privacy policy. Eg: "https://client.example.com/policy"'
                    }).optional(),
                    jwks_uri: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The URI of the application JWKS. Eg: "https://client.example.com/jwks"'
                    }).optional(),
                    jwks: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).meta({
                        description: 'The JWKS of the application. Eg: {"keys": [{"kty": "RSA", "alg": "RS256", "use": "sig", "n": "...", "e": "..."}]}'
                    }).optional(),
                    metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).meta({
                        description: 'The metadata of the application. Eg: {"key": "value"}'
                    }).optional(),
                    software_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The software ID of the application. Eg: "my-software"'
                    }).optional(),
                    software_version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The software version of the application. Eg: "1.0.0"'
                    }).optional(),
                    software_statement: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: "The software statement of the application."
                    }).optional()
                }),
                metadata: {
                    openapi: {
                        description: "Register an OAuth2 application",
                        responses: {
                            "200": {
                                description: "OAuth2 application registered successfully",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                name: {
                                                    type: "string",
                                                    description: "Name of the OAuth2 application"
                                                },
                                                icon: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "Icon URL for the application"
                                                },
                                                metadata: {
                                                    type: "object",
                                                    additionalProperties: true,
                                                    nullable: true,
                                                    description: "Additional metadata for the application"
                                                },
                                                clientId: {
                                                    type: "string",
                                                    description: "Unique identifier for the client"
                                                },
                                                clientSecret: {
                                                    type: "string",
                                                    description: "Secret key for the client"
                                                },
                                                redirectURLs: {
                                                    type: "array",
                                                    items: {
                                                        type: "string",
                                                        format: "uri"
                                                    },
                                                    description: "List of allowed redirect URLs"
                                                },
                                                type: {
                                                    type: "string",
                                                    description: "Type of the client",
                                                    enum: [
                                                        "web"
                                                    ]
                                                },
                                                authenticationScheme: {
                                                    type: "string",
                                                    description: "Authentication scheme used by the client",
                                                    enum: [
                                                        "client_secret"
                                                    ]
                                                },
                                                disabled: {
                                                    type: "boolean",
                                                    description: "Whether the client is disabled",
                                                    enum: [
                                                        false
                                                    ]
                                                },
                                                userId: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "ID of the user who registered the client, null if registered anonymously"
                                                },
                                                createdAt: {
                                                    type: "string",
                                                    format: "date-time",
                                                    description: "Creation timestamp"
                                                },
                                                updatedAt: {
                                                    type: "string",
                                                    format: "date-time",
                                                    description: "Last update timestamp"
                                                }
                                            },
                                            required: [
                                                "name",
                                                "clientId",
                                                "clientSecret",
                                                "redirectURLs",
                                                "type",
                                                "authenticationScheme",
                                                "disabled",
                                                "createdAt",
                                                "updatedAt"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                var _options_generateClientId, _options_generateClientSecret;
                const body = ctx.body;
                const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
                if (!session && !options.allowDynamicClientRegistration) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        error: "invalid_token",
                        error_description: "Authentication required for client registration"
                    });
                }
                if ((!body.grant_types || body.grant_types.includes("authorization_code") || body.grant_types.includes("implicit")) && (!body.redirect_uris || body.redirect_uris.length === 0)) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        error: "invalid_redirect_uri",
                        error_description: "Redirect URIs are required for authorization_code and implicit grant types"
                    });
                }
                if (body.grant_types && body.response_types) {
                    if (body.grant_types.includes("authorization_code") && !body.response_types.includes("code")) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                            error: "invalid_client_metadata",
                            error_description: "When 'authorization_code' grant type is used, 'code' response type must be included"
                        });
                    }
                    if (body.grant_types.includes("implicit") && !body.response_types.includes("token")) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                            error: "invalid_client_metadata",
                            error_description: "When 'implicit' grant type is used, 'token' response type must be included"
                        });
                    }
                }
                const clientId = ((_options_generateClientId = options.generateClientId) === null || _options_generateClientId === void 0 ? void 0 : _options_generateClientId.call(options)) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z");
                const clientSecret = ((_options_generateClientSecret = options.generateClientSecret) === null || _options_generateClientSecret === void 0 ? void 0 : _options_generateClientSecret.call(options)) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32, "a-z", "A-Z");
                const storedClientSecret = await storeClientSecret(ctx, clientSecret);
                const client = await ctx.context.adapter.create({
                    model: modelName.oauthClient,
                    data: {
                        name: body.client_name,
                        icon: body.logo_uri,
                        metadata: body.metadata ? JSON.stringify(body.metadata) : null,
                        clientId,
                        clientSecret: storedClientSecret,
                        redirectURLs: body.redirect_uris.join(","),
                        type: "web",
                        authenticationScheme: body.token_endpoint_auth_method || "client_secret_basic",
                        disabled: false,
                        userId: session === null || session === void 0 ? void 0 : session.session.userId,
                        createdAt: /* @__PURE__ */ new Date(),
                        updatedAt: /* @__PURE__ */ new Date()
                    }
                });
                return ctx.json({
                    client_id: clientId,
                    ...client.type !== "public" ? {
                        client_secret: clientSecret,
                        client_secret_expires_at: 0
                    } : {},
                    client_id_issued_at: Math.floor(Date.now() / 1e3),
                    client_secret_expires_at: 0,
                    // 0 means it doesn't expire
                    redirect_uris: body.redirect_uris,
                    token_endpoint_auth_method: body.token_endpoint_auth_method || "client_secret_basic",
                    grant_types: body.grant_types || [
                        "authorization_code"
                    ],
                    response_types: body.response_types || [
                        "code"
                    ],
                    client_name: body.client_name,
                    client_uri: body.client_uri,
                    logo_uri: body.logo_uri,
                    scope: body.scope,
                    contacts: body.contacts,
                    tos_uri: body.tos_uri,
                    policy_uri: body.policy_uri,
                    jwks_uri: body.jwks_uri,
                    jwks: body.jwks,
                    software_id: body.software_id,
                    software_version: body.software_version,
                    software_statement: body.software_statement,
                    metadata: body.metadata
                }, {
                    status: 201,
                    headers: {
                        "Cache-Control": "no-store",
                        Pragma: "no-cache"
                    }
                });
            }),
            getOAuthClient: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/oauth2/client/:id", {
                method: "GET",
                use: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
                ],
                metadata: {
                    openapi: {
                        description: "Get OAuth2 client details",
                        responses: {
                            "200": {
                                description: "OAuth2 client retrieved successfully",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                clientId: {
                                                    type: "string",
                                                    description: "Unique identifier for the client"
                                                },
                                                name: {
                                                    type: "string",
                                                    description: "Name of the OAuth2 application"
                                                },
                                                icon: {
                                                    type: "string",
                                                    nullable: true,
                                                    description: "Icon URL for the application"
                                                }
                                            },
                                            required: [
                                                "clientId",
                                                "name"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const client = await getClient(ctx.params.id, ctx.context.adapter, trustedClients);
                if (!client) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                        error_description: "client not found",
                        error: "not_found"
                    });
                }
                return ctx.json({
                    clientId: client.clientId,
                    name: client.name,
                    icon: client.icon
                });
            })
        },
        schema: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["m"])(schema, options === null || options === void 0 ? void 0 : options.schema)
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B-Ud-fSV.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "A",
    ()=>API_KEY_TABLE_NAME,
    "E",
    ()=>ERROR_CODES,
    "a",
    ()=>apiKey,
    "d",
    ()=>defaultKeyHasher,
    "o",
    ()=>oneTimeToken
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DVhkokI7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/organization/access/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$otp$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/otp.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$admin$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/admin/access/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$fetch$2f$fetch$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-fetch/fetch/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$custom$2d$session$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/custom-session/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$O2VtDkDK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.O2VtDkDK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BZZKN1g7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/access/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$device$2d$authorization$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/device-authorization/index.mjs [app-client] (ecmascript) <locals>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const apiKeySchema = (param)=>{
    let { timeWindow, rateLimitMax } = param;
    return {
        apikey: {
            fields: {
                /**
       * The name of the key.
       */ name: {
                    type: "string",
                    required: false,
                    input: false
                },
                /**
       * Shows the first few characters of the API key
       * This allows you to show those few characters in the UI to make it easier for users to identify the API key.
       */ start: {
                    type: "string",
                    required: false,
                    input: false
                },
                /**
       * The prefix of the key.
       */ prefix: {
                    type: "string",
                    required: false,
                    input: false
                },
                /**
       * The hashed key value.
       */ key: {
                    type: "string",
                    required: true,
                    input: false
                },
                /**
       * The user id of the user who created the key.
       */ userId: {
                    type: "string",
                    references: {
                        model: "user",
                        field: "id"
                    },
                    required: true,
                    input: false
                },
                /**
       * The interval to refill the key in milliseconds.
       */ refillInterval: {
                    type: "number",
                    required: false,
                    input: false
                },
                /**
       * The amount to refill the remaining count of the key.
       */ refillAmount: {
                    type: "number",
                    required: false,
                    input: false
                },
                /**
       * The date and time when the key was last refilled.
       */ lastRefillAt: {
                    type: "date",
                    required: false,
                    input: false
                },
                /**
       * Whether the key is enabled.
       */ enabled: {
                    type: "boolean",
                    required: false,
                    input: false,
                    defaultValue: true
                },
                /**
       * Whether the key has rate limiting enabled.
       */ rateLimitEnabled: {
                    type: "boolean",
                    required: false,
                    input: false,
                    defaultValue: true
                },
                /**
       * The time window in milliseconds for the rate limit.
       */ rateLimitTimeWindow: {
                    type: "number",
                    required: false,
                    input: false,
                    defaultValue: timeWindow
                },
                /**
       * The maximum number of requests allowed within the `rateLimitTimeWindow`.
       */ rateLimitMax: {
                    type: "number",
                    required: false,
                    input: false,
                    defaultValue: rateLimitMax
                },
                /**
       * The number of requests made within the rate limit time window
       */ requestCount: {
                    type: "number",
                    required: false,
                    input: false,
                    defaultValue: 0
                },
                /**
       * The remaining number of requests before the key is revoked.
       *
       * If this is null, then the key is not revoked.
       *
       * If `refillInterval` & `refillAmount` are provided, than this will refill accordingly.
       */ remaining: {
                    type: "number",
                    required: false,
                    input: false
                },
                /**
       * The date and time of the last request made to the key.
       */ lastRequest: {
                    type: "date",
                    required: false,
                    input: false
                },
                /**
       * The date and time when the key will expire.
       */ expiresAt: {
                    type: "date",
                    required: false,
                    input: false
                },
                /**
       * The date and time when the key was created.
       */ createdAt: {
                    type: "date",
                    required: true,
                    input: false
                },
                /**
       * The date and time when the key was last updated.
       */ updatedAt: {
                    type: "date",
                    required: true,
                    input: false
                },
                /**
       * The permissions of the key.
       */ permissions: {
                    type: "string",
                    required: false,
                    input: false
                },
                /**
       * Any additional metadata you want to store with the key.
       */ metadata: {
                    type: "string",
                    required: false,
                    input: true,
                    transform: {
                        input (value) {
                            return JSON.stringify(value);
                        },
                        output (value) {
                            if (!value) return null;
                            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["p"])(value);
                        }
                    }
                }
            }
        }
    };
};
function createApiKey(param) {
    let { keyGenerator, opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/create", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "Name of the Api Key"
            }).optional(),
            expiresIn: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Expiration time of the Api Key in seconds"
            }).min(1).optional().nullable().default(null),
            userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                description: 'User Id of the user that the Api Key belongs to. server-only. Eg: "user-id"'
            }).optional(),
            prefix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "Prefix of the Api Key"
            }).regex(/^[a-zA-Z0-9_-]+$/, {
                message: "Invalid prefix format, must be alphanumeric and contain only underscores and hyphens."
            }).optional(),
            remaining: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Remaining number of requests. Server side only"
            }).min(0).optional().nullable().default(null),
            metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]().optional(),
            refillAmount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Amount to refill the remaining count of the Api Key. server-only. Eg: 100"
            }).min(1).optional(),
            refillInterval: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Interval to refill the Api Key in milliseconds. server-only. Eg: 1000"
            }).optional(),
            rateLimitTimeWindow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "The duration in milliseconds where each request is counted. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 1000"
            }).optional(),
            rateLimitMax: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Maximum amount of requests allowed within a window. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 100"
            }).optional(),
            rateLimitEnabled: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().meta({
                description: "Whether the key has rate limiting enabled. server-only. Eg: true"
            }).optional(),
            permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).meta({
                description: "Permissions of the Api Key."
            }).optional()
        }),
        metadata: {
            openapi: {
                description: "Create a new API key for a user",
                responses: {
                    "200": {
                        description: "API key created successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "Unique identifier of the API key"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Creation timestamp"
                                        },
                                        updatedAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Last update timestamp"
                                        },
                                        name: {
                                            type: "string",
                                            nullable: true,
                                            description: "Name of the API key"
                                        },
                                        prefix: {
                                            type: "string",
                                            nullable: true,
                                            description: "Prefix of the API key"
                                        },
                                        start: {
                                            type: "string",
                                            nullable: true,
                                            description: "Starting characters of the key (if configured)"
                                        },
                                        key: {
                                            type: "string",
                                            description: "The full API key (only returned on creation)"
                                        },
                                        enabled: {
                                            type: "boolean",
                                            description: "Whether the key is enabled"
                                        },
                                        expiresAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "Expiration timestamp"
                                        },
                                        userId: {
                                            type: "string",
                                            description: "ID of the user owning the key"
                                        },
                                        lastRefillAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "Last refill timestamp"
                                        },
                                        lastRequest: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "Last request timestamp"
                                        },
                                        metadata: {
                                            type: "object",
                                            nullable: true,
                                            additionalProperties: true,
                                            description: "Metadata associated with the key"
                                        },
                                        rateLimitMax: {
                                            type: "number",
                                            nullable: true,
                                            description: "Maximum requests in time window"
                                        },
                                        rateLimitTimeWindow: {
                                            type: "number",
                                            nullable: true,
                                            description: "Rate limit time window in milliseconds"
                                        },
                                        remaining: {
                                            type: "number",
                                            nullable: true,
                                            description: "Remaining requests"
                                        },
                                        refillAmount: {
                                            type: "number",
                                            nullable: true,
                                            description: "Amount to refill"
                                        },
                                        refillInterval: {
                                            type: "number",
                                            nullable: true,
                                            description: "Refill interval in milliseconds"
                                        },
                                        rateLimitEnabled: {
                                            type: "boolean",
                                            description: "Whether rate limiting is enabled"
                                        },
                                        requestCount: {
                                            type: "number",
                                            description: "Current request count in window"
                                        },
                                        permissions: {
                                            type: "object",
                                            nullable: true,
                                            additionalProperties: {
                                                type: "array",
                                                items: {
                                                    type: "string"
                                                }
                                            },
                                            description: "Permissions associated with the key"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "createdAt",
                                        "updatedAt",
                                        "key",
                                        "enabled",
                                        "userId",
                                        "rateLimitEnabled",
                                        "requestCount"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _opts_permissions;
        const { name, expiresIn, prefix, remaining, metadata, refillAmount, refillInterval, permissions, rateLimitMax, rateLimitTimeWindow, rateLimitEnabled } = ctx.body;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        const authRequired = (ctx.request || ctx.headers) && !ctx.body.userId;
        var _session_user;
        const user = (_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : authRequired ? null : {
            id: ctx.body.userId
        };
        if (!(user === null || user === void 0 ? void 0 : user.id)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.UNAUTHORIZED_SESSION
            });
        }
        if (authRequired) {
            if (refillAmount !== void 0 || refillInterval !== void 0 || rateLimitMax !== void 0 || rateLimitTimeWindow !== void 0 || rateLimitEnabled !== void 0 || permissions !== void 0 || remaining !== null) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.SERVER_ONLY_PROPERTY
                });
            }
        }
        if (metadata) {
            if (opts.enableMetadata === false) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.METADATA_DISABLED
                });
            }
            if (typeof metadata !== "object") {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_METADATA_TYPE
                });
            }
        }
        if (refillAmount && !refillInterval) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ERROR_CODES.REFILL_AMOUNT_AND_INTERVAL_REQUIRED
            });
        }
        if (refillInterval && !refillAmount) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ERROR_CODES.REFILL_INTERVAL_AND_AMOUNT_REQUIRED
            });
        }
        if (expiresIn) {
            if (opts.keyExpiration.disableCustomExpiresTime === true) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.KEY_DISABLED_EXPIRATION
                });
            }
            const expiresIn_in_days = expiresIn / (60 * 60 * 24);
            if (opts.keyExpiration.minExpiresIn > expiresIn_in_days) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.EXPIRES_IN_IS_TOO_SMALL
                });
            } else if (opts.keyExpiration.maxExpiresIn < expiresIn_in_days) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.EXPIRES_IN_IS_TOO_LARGE
                });
            }
        }
        if (prefix) {
            if (prefix.length < opts.minimumPrefixLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_PREFIX_LENGTH
                });
            }
            if (prefix.length > opts.maximumPrefixLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_PREFIX_LENGTH
                });
            }
        }
        if (name) {
            if (name.length < opts.minimumNameLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_NAME_LENGTH
                });
            }
            if (name.length > opts.maximumNameLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_NAME_LENGTH
                });
            }
        } else if (opts.requireName) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ERROR_CODES.NAME_REQUIRED
            });
        }
        deleteAllExpiredApiKeys(ctx.context);
        const key = await keyGenerator({
            length: opts.defaultKeyLength,
            prefix: prefix || opts.defaultPrefix
        });
        const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);
        let start = null;
        if (opts.startingCharactersConfig.shouldStore) {
            start = key.substring(0, opts.startingCharactersConfig.charactersLength);
        }
        const defaultPermissions = ((_opts_permissions = opts.permissions) === null || _opts_permissions === void 0 ? void 0 : _opts_permissions.defaultPermissions) ? typeof opts.permissions.defaultPermissions === "function" ? await opts.permissions.defaultPermissions(user.id, ctx) : opts.permissions.defaultPermissions : void 0;
        const permissionsToApply = permissions ? JSON.stringify(permissions) : defaultPermissions ? JSON.stringify(defaultPermissions) : void 0;
        var _ref, _ref1, _ref2, _ref3, _opts_rateLimit_enabled;
        let data = {
            createdAt: /* @__PURE__ */ new Date(),
            updatedAt: /* @__PURE__ */ new Date(),
            name: name !== null && name !== void 0 ? name : null,
            prefix: (_ref = prefix !== null && prefix !== void 0 ? prefix : opts.defaultPrefix) !== null && _ref !== void 0 ? _ref : null,
            start,
            key: hashed,
            enabled: true,
            expiresAt: expiresIn ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(expiresIn, "sec") : opts.keyExpiration.defaultExpiresIn ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(opts.keyExpiration.defaultExpiresIn, "sec") : null,
            userId: user.id,
            lastRefillAt: null,
            lastRequest: null,
            metadata: null,
            rateLimitMax: (_ref1 = rateLimitMax !== null && rateLimitMax !== void 0 ? rateLimitMax : opts.rateLimit.maxRequests) !== null && _ref1 !== void 0 ? _ref1 : null,
            rateLimitTimeWindow: (_ref2 = rateLimitTimeWindow !== null && rateLimitTimeWindow !== void 0 ? rateLimitTimeWindow : opts.rateLimit.timeWindow) !== null && _ref2 !== void 0 ? _ref2 : null,
            remaining: remaining === null ? remaining : (_ref3 = remaining !== null && remaining !== void 0 ? remaining : refillAmount) !== null && _ref3 !== void 0 ? _ref3 : null,
            refillAmount: refillAmount !== null && refillAmount !== void 0 ? refillAmount : null,
            refillInterval: refillInterval !== null && refillInterval !== void 0 ? refillInterval : null,
            rateLimitEnabled: rateLimitEnabled === void 0 ? (_opts_rateLimit_enabled = opts.rateLimit.enabled) !== null && _opts_rateLimit_enabled !== void 0 ? _opts_rateLimit_enabled : true : rateLimitEnabled,
            requestCount: 0,
            //@ts-expect-error - we intentionally save the permissions as string on DB.
            permissions: permissionsToApply
        };
        if (metadata) {
            data.metadata = schema.apikey.fields.metadata.transform.input(metadata);
        }
        const apiKey = await ctx.context.adapter.create({
            model: API_KEY_TABLE_NAME,
            data
        });
        return ctx.json({
            ...apiKey,
            key,
            metadata: metadata !== null && metadata !== void 0 ? metadata : null,
            permissions: apiKey.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(apiKey.permissions) : null
        });
    });
}
function deleteApiKey(param) {
    let { opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/delete", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            keyId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The id of the Api Key"
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
        ],
        metadata: {
            openapi: {
                description: "Delete an existing API key",
                requestBody: {
                    content: {
                        "application/json": {
                            schema: {
                                type: "object",
                                properties: {
                                    keyId: {
                                        type: "string",
                                        description: "The id of the API key to delete"
                                    }
                                },
                                required: [
                                    "keyId"
                                ]
                            }
                        }
                    }
                },
                responses: {
                    "200": {
                        description: "API key deleted successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        success: {
                                            type: "boolean",
                                            description: "Indicates if the API key was successfully deleted"
                                        }
                                    },
                                    required: [
                                        "success"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const { keyId } = ctx.body;
        const session = ctx.context.session;
        if (session.user.banned === true) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.USER_BANNED
            });
        }
        const apiKey = await ctx.context.adapter.findOne({
            model: API_KEY_TABLE_NAME,
            where: [
                {
                    field: "id",
                    value: keyId
                }
            ]
        });
        if (!apiKey || apiKey.userId !== session.user.id) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                message: ERROR_CODES.KEY_NOT_FOUND
            });
        }
        try {
            await ctx.context.adapter.delete({
                model: API_KEY_TABLE_NAME,
                where: [
                    {
                        field: "id",
                        value: apiKey.id
                    }
                ]
            });
        } catch (error) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                message: error === null || error === void 0 ? void 0 : error.message
            });
        }
        deleteAllExpiredApiKeys(ctx.context);
        return ctx.json({
            success: true
        });
    });
}
function getApiKey(param) {
    let { opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/get", {
        method: "GET",
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The id of the Api Key"
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
        ],
        metadata: {
            openapi: {
                description: "Retrieve an existing API key by ID",
                responses: {
                    "200": {
                        description: "API key retrieved successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "ID"
                                        },
                                        name: {
                                            type: "string",
                                            nullable: true,
                                            description: "The name of the key"
                                        },
                                        start: {
                                            type: "string",
                                            nullable: true,
                                            description: "Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key."
                                        },
                                        prefix: {
                                            type: "string",
                                            nullable: true,
                                            description: "The API Key prefix. Stored as plain text."
                                        },
                                        userId: {
                                            type: "string",
                                            description: "The owner of the user id"
                                        },
                                        refillInterval: {
                                            type: "number",
                                            nullable: true,
                                            description: "The interval in which the `remaining` count is refilled by day. Example: 1 // every day"
                                        },
                                        refillAmount: {
                                            type: "number",
                                            nullable: true,
                                            description: "The amount to refill"
                                        },
                                        lastRefillAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "The last refill date"
                                        },
                                        enabled: {
                                            type: "boolean",
                                            description: "Sets if key is enabled or disabled",
                                            default: true
                                        },
                                        rateLimitEnabled: {
                                            type: "boolean",
                                            description: "Whether the key has rate limiting enabled"
                                        },
                                        rateLimitTimeWindow: {
                                            type: "number",
                                            nullable: true,
                                            description: "The duration in milliseconds"
                                        },
                                        rateLimitMax: {
                                            type: "number",
                                            nullable: true,
                                            description: "Maximum amount of requests allowed within a window"
                                        },
                                        requestCount: {
                                            type: "number",
                                            description: "The number of requests made within the rate limit time window"
                                        },
                                        remaining: {
                                            type: "number",
                                            nullable: true,
                                            description: "Remaining requests (every time api key is used this should updated and should be updated on refill as well)"
                                        },
                                        lastRequest: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "When last request occurred"
                                        },
                                        expiresAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "Expiry date of a key"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "created at"
                                        },
                                        updatedAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "updated at"
                                        },
                                        metadata: {
                                            type: "object",
                                            nullable: true,
                                            additionalProperties: true,
                                            description: "Extra metadata about the apiKey"
                                        },
                                        permissions: {
                                            type: "string",
                                            nullable: true,
                                            description: "Permissions for the api key (stored as JSON string)"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "userId",
                                        "enabled",
                                        "rateLimitEnabled",
                                        "requestCount",
                                        "createdAt",
                                        "updatedAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const { id } = ctx.query;
        const session = ctx.context.session;
        let apiKey = await ctx.context.adapter.findOne({
            model: API_KEY_TABLE_NAME,
            where: [
                {
                    field: "id",
                    value: id
                },
                {
                    field: "userId",
                    value: session.user.id
                }
            ]
        });
        if (!apiKey) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                message: ERROR_CODES.KEY_NOT_FOUND
            });
        }
        deleteAllExpiredApiKeys(ctx.context);
        apiKey.metadata = schema.apikey.fields.metadata.transform.output(apiKey.metadata);
        const { key, ...returningApiKey } = apiKey;
        return ctx.json({
            ...returningApiKey,
            permissions: returningApiKey.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(returningApiKey.permissions) : null
        });
    });
}
function updateApiKey(param) {
    let { opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/update", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            keyId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The id of the Api Key"
            }),
            userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                description: 'The id of the user which the api key belongs to. server-only. Eg: "some-user-id"'
            }).optional(),
            name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The name of the key"
            }).optional(),
            enabled: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().meta({
                description: "Whether the Api Key is enabled or not"
            }).optional(),
            remaining: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "The number of remaining requests"
            }).min(1).optional(),
            refillAmount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "The refill amount"
            }).optional(),
            refillInterval: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "The refill interval"
            }).optional(),
            metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]().optional(),
            expiresIn: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Expiration time of the Api Key in seconds"
            }).min(1).optional().nullable(),
            rateLimitEnabled: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().meta({
                description: "Whether the key has rate limiting enabled."
            }).optional(),
            rateLimitTimeWindow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "The duration in milliseconds where each request is counted. server-only. Eg: 1000"
            }).optional(),
            rateLimitMax: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().meta({
                description: "Maximum amount of requests allowed within a window. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 100"
            }).optional(),
            permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).meta({
                description: "Update the permissions on the API Key. server-only."
            }).optional().nullable()
        }),
        metadata: {
            openapi: {
                description: "Update an existing API key by ID",
                responses: {
                    "200": {
                        description: "API key updated successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "ID"
                                        },
                                        name: {
                                            type: "string",
                                            nullable: true,
                                            description: "The name of the key"
                                        },
                                        start: {
                                            type: "string",
                                            nullable: true,
                                            description: "Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key."
                                        },
                                        prefix: {
                                            type: "string",
                                            nullable: true,
                                            description: "The API Key prefix. Stored as plain text."
                                        },
                                        userId: {
                                            type: "string",
                                            description: "The owner of the user id"
                                        },
                                        refillInterval: {
                                            type: "number",
                                            nullable: true,
                                            description: "The interval in which the `remaining` count is refilled by day. Example: 1 // every day"
                                        },
                                        refillAmount: {
                                            type: "number",
                                            nullable: true,
                                            description: "The amount to refill"
                                        },
                                        lastRefillAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "The last refill date"
                                        },
                                        enabled: {
                                            type: "boolean",
                                            description: "Sets if key is enabled or disabled",
                                            default: true
                                        },
                                        rateLimitEnabled: {
                                            type: "boolean",
                                            description: "Whether the key has rate limiting enabled"
                                        },
                                        rateLimitTimeWindow: {
                                            type: "number",
                                            nullable: true,
                                            description: "The duration in milliseconds"
                                        },
                                        rateLimitMax: {
                                            type: "number",
                                            nullable: true,
                                            description: "Maximum amount of requests allowed within a window"
                                        },
                                        requestCount: {
                                            type: "number",
                                            description: "The number of requests made within the rate limit time window"
                                        },
                                        remaining: {
                                            type: "number",
                                            nullable: true,
                                            description: "Remaining requests (every time api key is used this should updated and should be updated on refill as well)"
                                        },
                                        lastRequest: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "When last request occurred"
                                        },
                                        expiresAt: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description: "Expiry date of a key"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "created at"
                                        },
                                        updatedAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "updated at"
                                        },
                                        metadata: {
                                            type: "object",
                                            nullable: true,
                                            additionalProperties: true,
                                            description: "Extra metadata about the apiKey"
                                        },
                                        permissions: {
                                            type: "string",
                                            nullable: true,
                                            description: "Permissions for the api key (stored as JSON string)"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "userId",
                                        "enabled",
                                        "rateLimitEnabled",
                                        "requestCount",
                                        "createdAt",
                                        "updatedAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const { keyId, expiresIn, enabled, metadata, refillAmount, refillInterval, remaining, name, permissions, rateLimitEnabled, rateLimitTimeWindow, rateLimitMax } = ctx.body;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        const authRequired = (ctx.request || ctx.headers) && !ctx.body.userId;
        var _session_user;
        const user = (_session_user = session === null || session === void 0 ? void 0 : session.user) !== null && _session_user !== void 0 ? _session_user : authRequired ? null : {
            id: ctx.body.userId
        };
        if (!(user === null || user === void 0 ? void 0 : user.id)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.UNAUTHORIZED_SESSION
            });
        }
        if (authRequired) {
            if (refillAmount !== void 0 || refillInterval !== void 0 || rateLimitMax !== void 0 || rateLimitTimeWindow !== void 0 || rateLimitEnabled !== void 0 || remaining !== void 0 || permissions !== void 0) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.SERVER_ONLY_PROPERTY
                });
            }
        }
        const apiKey = await ctx.context.adapter.findOne({
            model: API_KEY_TABLE_NAME,
            where: [
                {
                    field: "id",
                    value: keyId
                },
                {
                    field: "userId",
                    value: user.id
                }
            ]
        });
        if (!apiKey) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                message: ERROR_CODES.KEY_NOT_FOUND
            });
        }
        let newValues = {};
        if (name !== void 0) {
            if (name.length < opts.minimumNameLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_NAME_LENGTH
                });
            } else if (name.length > opts.maximumNameLength) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_NAME_LENGTH
                });
            }
            newValues.name = name;
        }
        if (enabled !== void 0) {
            newValues.enabled = enabled;
        }
        if (expiresIn !== void 0) {
            if (opts.keyExpiration.disableCustomExpiresTime === true) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.KEY_DISABLED_EXPIRATION
                });
            }
            if (expiresIn !== null) {
                const expiresIn_in_days = expiresIn / (60 * 60 * 24);
                if (expiresIn_in_days < opts.keyExpiration.minExpiresIn) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ERROR_CODES.EXPIRES_IN_IS_TOO_SMALL
                    });
                } else if (expiresIn_in_days > opts.keyExpiration.maxExpiresIn) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ERROR_CODES.EXPIRES_IN_IS_TOO_LARGE
                    });
                }
            }
            newValues.expiresAt = expiresIn ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(expiresIn, "sec") : null;
        }
        if (metadata !== void 0) {
            if (typeof metadata !== "object") {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.INVALID_METADATA_TYPE
                });
            }
            newValues.metadata = schema.apikey.fields.metadata.transform.input(metadata);
        }
        if (remaining !== void 0) {
            newValues.remaining = remaining;
        }
        if (refillAmount !== void 0 || refillInterval !== void 0) {
            if (refillAmount !== void 0 && refillInterval === void 0) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.REFILL_AMOUNT_AND_INTERVAL_REQUIRED
                });
            } else if (refillInterval !== void 0 && refillAmount === void 0) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ERROR_CODES.REFILL_INTERVAL_AND_AMOUNT_REQUIRED
                });
            }
            newValues.refillAmount = refillAmount;
            newValues.refillInterval = refillInterval;
        }
        if (rateLimitEnabled !== void 0) {
            newValues.rateLimitEnabled = rateLimitEnabled;
        }
        if (rateLimitTimeWindow !== void 0) {
            newValues.rateLimitTimeWindow = rateLimitTimeWindow;
        }
        if (rateLimitMax !== void 0) {
            newValues.rateLimitMax = rateLimitMax;
        }
        if (permissions !== void 0) {
            newValues.permissions = JSON.stringify(permissions);
        }
        if (Object.keys(newValues).length === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ERROR_CODES.NO_VALUES_TO_UPDATE
            });
        }
        let newApiKey = apiKey;
        try {
            let result = await ctx.context.adapter.update({
                model: API_KEY_TABLE_NAME,
                where: [
                    {
                        field: "id",
                        value: apiKey.id
                    }
                ],
                update: {
                    lastRequest: /* @__PURE__ */ new Date(),
                    remaining: apiKey.remaining === null ? null : apiKey.remaining - 1,
                    ...newValues
                }
            });
            if (result) newApiKey = result;
        } catch (error) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
                message: error === null || error === void 0 ? void 0 : error.message
            });
        }
        deleteAllExpiredApiKeys(ctx.context);
        newApiKey.metadata = schema.apikey.fields.metadata.transform.output(newApiKey.metadata);
        const { key, ...returningApiKey } = newApiKey;
        return ctx.json({
            ...returningApiKey,
            permissions: returningApiKey.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(returningApiKey.permissions) : null
        });
    });
}
function isRateLimited(apiKey, opts) {
    const now = /* @__PURE__ */ new Date();
    const lastRequest = apiKey.lastRequest;
    const rateLimitTimeWindow = apiKey.rateLimitTimeWindow;
    const rateLimitMax = apiKey.rateLimitMax;
    let requestCount = apiKey.requestCount;
    if (opts.rateLimit.enabled === false) return {
        success: true,
        message: null,
        update: {
            lastRequest: now
        },
        tryAgainIn: null
    };
    if (apiKey.rateLimitEnabled === false) return {
        success: true,
        message: null,
        update: {
            lastRequest: now
        },
        tryAgainIn: null
    };
    if (rateLimitTimeWindow === null || rateLimitMax === null) {
        return {
            success: true,
            message: null,
            update: null,
            tryAgainIn: null
        };
    }
    if (lastRequest === null) {
        return {
            success: true,
            message: null,
            update: {
                lastRequest: now,
                requestCount: 1
            },
            tryAgainIn: null
        };
    }
    const timeSinceLastRequest = now.getTime() - new Date(lastRequest).getTime();
    if (timeSinceLastRequest > rateLimitTimeWindow) {
        return {
            success: true,
            message: null,
            update: {
                lastRequest: now,
                requestCount: 1
            },
            tryAgainIn: null
        };
    }
    if (requestCount >= rateLimitMax) {
        return {
            success: false,
            message: ERROR_CODES.RATE_LIMIT_EXCEEDED,
            update: null,
            tryAgainIn: Math.ceil(rateLimitTimeWindow - timeSinceLastRequest)
        };
    }
    requestCount++;
    return {
        success: true,
        message: null,
        tryAgainIn: null,
        update: {
            lastRequest: now,
            requestCount
        }
    };
}
async function validateApiKey(param) {
    let { hashedKey, ctx, opts, schema, permissions } = param;
    const apiKey = await ctx.context.adapter.findOne({
        model: API_KEY_TABLE_NAME,
        where: [
            {
                field: "key",
                value: hashedKey
            }
        ]
    });
    if (!apiKey) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
            message: ERROR_CODES.INVALID_API_KEY
        });
    }
    if (apiKey.enabled === false) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
            message: ERROR_CODES.KEY_DISABLED,
            code: "KEY_DISABLED"
        });
    }
    if (apiKey.expiresAt) {
        const now = /* @__PURE__ */ new Date().getTime();
        const expiresAt = new Date(apiKey.expiresAt).getTime();
        if (now > expiresAt) {
            try {
                ctx.context.adapter.delete({
                    model: API_KEY_TABLE_NAME,
                    where: [
                        {
                            field: "id",
                            value: apiKey.id
                        }
                    ]
                });
            } catch (error) {
                ctx.context.logger.error("Failed to delete expired API keys:", error);
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.KEY_EXPIRED,
                code: "KEY_EXPIRED"
            });
        }
    }
    if (permissions) {
        const apiKeyPermissions = apiKey.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(apiKey.permissions) : null;
        if (!apiKeyPermissions) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.KEY_NOT_FOUND,
                code: "KEY_NOT_FOUND"
            });
        }
        const r = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["role"])(apiKeyPermissions);
        const result = r.authorize(permissions);
        if (!result.success) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ERROR_CODES.KEY_NOT_FOUND,
                code: "KEY_NOT_FOUND"
            });
        }
    }
    let remaining = apiKey.remaining;
    let lastRefillAt = apiKey.lastRefillAt;
    if (apiKey.remaining === 0 && apiKey.refillAmount === null) {
        try {
            ctx.context.adapter.delete({
                model: API_KEY_TABLE_NAME,
                where: [
                    {
                        field: "id",
                        value: apiKey.id
                    }
                ]
            });
        } catch (error) {
            ctx.context.logger.error("Failed to delete expired API keys:", error);
        }
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("TOO_MANY_REQUESTS", {
            message: ERROR_CODES.USAGE_EXCEEDED,
            code: "USAGE_EXCEEDED"
        });
    } else if (remaining !== null) {
        let now = /* @__PURE__ */ new Date().getTime();
        const refillInterval = apiKey.refillInterval;
        const refillAmount = apiKey.refillAmount;
        let lastTime = new Date(lastRefillAt !== null && lastRefillAt !== void 0 ? lastRefillAt : apiKey.createdAt).getTime();
        if (refillInterval && refillAmount) {
            const timeSinceLastRequest = (now - lastTime) / (1e3 * 60 * 60 * 24);
            if (timeSinceLastRequest > refillInterval) {
                remaining = refillAmount;
                lastRefillAt = /* @__PURE__ */ new Date();
            }
        }
        if (remaining === 0) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("TOO_MANY_REQUESTS", {
                message: ERROR_CODES.USAGE_EXCEEDED,
                code: "USAGE_EXCEEDED"
            });
        } else {
            remaining--;
        }
    }
    const { message, success, update, tryAgainIn } = isRateLimited(apiKey, opts);
    const newApiKey = await ctx.context.adapter.update({
        model: API_KEY_TABLE_NAME,
        where: [
            {
                field: "id",
                value: apiKey.id
            }
        ],
        update: {
            ...update,
            remaining,
            lastRefillAt
        }
    });
    if (!newApiKey) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("INTERNAL_SERVER_ERROR", {
            message: ERROR_CODES.FAILED_TO_UPDATE_API_KEY,
            code: "INTERNAL_SERVER_ERROR"
        });
    }
    if (success === false) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
            message: message !== null && message !== void 0 ? message : void 0,
            code: "RATE_LIMITED",
            details: {
                tryAgainIn
            }
        });
    }
    return newApiKey;
}
function verifyApiKey(param) {
    let { opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/verify", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The key to verify"
            }),
            permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).meta({
                description: "The permissions to verify."
            }).optional()
        }),
        metadata: {
            SERVER_ONLY: true
        }
    }, async (ctx)=>{
        const { key } = ctx.body;
        if (key.length < opts.defaultKeyLength) {
            return ctx.json({
                valid: false,
                error: {
                    message: ERROR_CODES.INVALID_API_KEY,
                    code: "KEY_NOT_FOUND"
                },
                key: null
            });
        }
        if (opts.customAPIKeyValidator) {
            const isValid = await opts.customAPIKeyValidator({
                ctx,
                key
            });
            if (!isValid) {
                return ctx.json({
                    valid: false,
                    error: {
                        message: ERROR_CODES.INVALID_API_KEY,
                        code: "KEY_NOT_FOUND"
                    },
                    key: null
                });
            }
        }
        const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);
        let apiKey = null;
        try {
            apiKey = await validateApiKey({
                hashedKey: hashed,
                permissions: ctx.body.permissions,
                ctx,
                opts,
                schema
            });
            await deleteAllExpiredApiKeys(ctx.context);
        } catch (error) {
            if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]) {
                var _error_body, _error_body1;
                return ctx.json({
                    valid: false,
                    error: {
                        message: (_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.message,
                        code: (_error_body1 = error.body) === null || _error_body1 === void 0 ? void 0 : _error_body1.code
                    },
                    key: null
                });
            }
            return ctx.json({
                valid: false,
                error: {
                    message: ERROR_CODES.INVALID_API_KEY,
                    code: "INVALID_API_KEY"
                },
                key: null
            });
        }
        const { key: _, ...returningApiKey } = apiKey !== null && apiKey !== void 0 ? apiKey : {
            key: 1,
            permissions: void 0
        };
        if ("metadata" in returningApiKey) {
            returningApiKey.metadata = schema.apikey.fields.metadata.transform.output(returningApiKey.metadata);
        }
        returningApiKey.permissions = returningApiKey.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(returningApiKey.permissions) : null;
        return ctx.json({
            valid: true,
            error: null,
            key: apiKey === null ? null : returningApiKey
        });
    });
}
function listApiKeys(param) {
    let { opts, schema, deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/list", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
        ],
        metadata: {
            openapi: {
                description: "List all API keys for the authenticated user",
                responses: {
                    "200": {
                        description: "API keys retrieved successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                        properties: {
                                            id: {
                                                type: "string",
                                                description: "ID"
                                            },
                                            name: {
                                                type: "string",
                                                nullable: true,
                                                description: "The name of the key"
                                            },
                                            start: {
                                                type: "string",
                                                nullable: true,
                                                description: "Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key."
                                            },
                                            prefix: {
                                                type: "string",
                                                nullable: true,
                                                description: "The API Key prefix. Stored as plain text."
                                            },
                                            userId: {
                                                type: "string",
                                                description: "The owner of the user id"
                                            },
                                            refillInterval: {
                                                type: "number",
                                                nullable: true,
                                                description: "The interval in which the `remaining` count is refilled by day. Example: 1 // every day"
                                            },
                                            refillAmount: {
                                                type: "number",
                                                nullable: true,
                                                description: "The amount to refill"
                                            },
                                            lastRefillAt: {
                                                type: "string",
                                                format: "date-time",
                                                nullable: true,
                                                description: "The last refill date"
                                            },
                                            enabled: {
                                                type: "boolean",
                                                description: "Sets if key is enabled or disabled",
                                                default: true
                                            },
                                            rateLimitEnabled: {
                                                type: "boolean",
                                                description: "Whether the key has rate limiting enabled"
                                            },
                                            rateLimitTimeWindow: {
                                                type: "number",
                                                nullable: true,
                                                description: "The duration in milliseconds"
                                            },
                                            rateLimitMax: {
                                                type: "number",
                                                nullable: true,
                                                description: "Maximum amount of requests allowed within a window"
                                            },
                                            requestCount: {
                                                type: "number",
                                                description: "The number of requests made within the rate limit time window"
                                            },
                                            remaining: {
                                                type: "number",
                                                nullable: true,
                                                description: "Remaining requests (every time api key is used this should updated and should be updated on refill as well)"
                                            },
                                            lastRequest: {
                                                type: "string",
                                                format: "date-time",
                                                nullable: true,
                                                description: "When last request occurred"
                                            },
                                            expiresAt: {
                                                type: "string",
                                                format: "date-time",
                                                nullable: true,
                                                description: "Expiry date of a key"
                                            },
                                            createdAt: {
                                                type: "string",
                                                format: "date-time",
                                                description: "created at"
                                            },
                                            updatedAt: {
                                                type: "string",
                                                format: "date-time",
                                                description: "updated at"
                                            },
                                            metadata: {
                                                type: "object",
                                                nullable: true,
                                                additionalProperties: true,
                                                description: "Extra metadata about the apiKey"
                                            },
                                            permissions: {
                                                type: "string",
                                                nullable: true,
                                                description: "Permissions for the api key (stored as JSON string)"
                                            }
                                        },
                                        required: [
                                            "id",
                                            "userId",
                                            "enabled",
                                            "rateLimitEnabled",
                                            "requestCount",
                                            "createdAt",
                                            "updatedAt"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const session = ctx.context.session;
        let apiKeys = await ctx.context.adapter.findMany({
            model: API_KEY_TABLE_NAME,
            where: [
                {
                    field: "userId",
                    value: session.user.id
                }
            ]
        });
        deleteAllExpiredApiKeys(ctx.context);
        apiKeys = apiKeys.map((apiKey)=>{
            return {
                ...apiKey,
                metadata: schema.apikey.fields.metadata.transform.output(apiKey.metadata)
            };
        });
        let returningApiKey = apiKeys.map((x)=>{
            const { key, ...returningApiKey2 } = x;
            return {
                ...returningApiKey2,
                permissions: returningApiKey2.permissions ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BZZKN1g7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(returningApiKey2.permissions) : null
            };
        });
        return ctx.json(returningApiKey);
    });
}
function deleteAllExpiredApiKeysEndpoint(param) {
    let { deleteAllExpiredApiKeys } = param;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/api-key/delete-all-expired-api-keys", {
        method: "POST",
        metadata: {
            SERVER_ONLY: true,
            client: false
        }
    }, async (ctx)=>{
        try {
            await deleteAllExpiredApiKeys(ctx.context, true);
        } catch (error) {
            ctx.context.logger.error("[API KEY PLUGIN] Failed to delete expired API keys:", error);
            return ctx.json({
                success: false,
                error
            });
        }
        return ctx.json({
            success: true,
            error: null
        });
    });
}
let lastChecked = null;
async function deleteAllExpiredApiKeys(ctx) {
    let byPassLastCheckTime = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (lastChecked && !byPassLastCheckTime) {
        const now = /* @__PURE__ */ new Date();
        const diff = now.getTime() - lastChecked.getTime();
        if (diff < 1e4) {
            return;
        }
    }
    lastChecked = /* @__PURE__ */ new Date();
    await ctx.adapter.deleteMany({
        model: API_KEY_TABLE_NAME,
        where: [
            {
                field: "expiresAt",
                operator: "lt",
                value: /* @__PURE__ */ new Date()
            },
            {
                field: "expiresAt",
                operator: "ne",
                value: null
            }
        ]
    }).catch((error)=>{
        ctx.logger.error("Failed to delete expired API keys:", error);
    });
}
function createApiKeyRoutes(param) {
    let { keyGenerator, opts, schema } = param;
    return {
        createApiKey: createApiKey({
            keyGenerator,
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        verifyApiKey: verifyApiKey({
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        getApiKey: getApiKey({
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        updateApiKey: updateApiKey({
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        deleteApiKey: deleteApiKey({
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        listApiKeys: listApiKeys({
            opts,
            schema,
            deleteAllExpiredApiKeys
        }),
        deleteAllExpiredApiKeys: deleteAllExpiredApiKeysEndpoint({
            deleteAllExpiredApiKeys
        })
    };
}
const defaultKeyHasher = async (key)=>{
    const hash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createHash"])("SHA-256").digest(new TextEncoder().encode(key));
    const hashed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64Url"].encode(new Uint8Array(hash), {
        padding: false
    });
    return hashed;
};
const ERROR_CODES = {
    INVALID_METADATA_TYPE: "metadata must be an object or undefined",
    REFILL_AMOUNT_AND_INTERVAL_REQUIRED: "refillAmount is required when refillInterval is provided",
    REFILL_INTERVAL_AND_AMOUNT_REQUIRED: "refillInterval is required when refillAmount is provided",
    USER_BANNED: "User is banned",
    UNAUTHORIZED_SESSION: "Unauthorized or invalid session",
    KEY_NOT_FOUND: "API Key not found",
    KEY_DISABLED: "API Key is disabled",
    KEY_EXPIRED: "API Key has expired",
    USAGE_EXCEEDED: "API Key has reached its usage limit",
    KEY_NOT_RECOVERABLE: "API Key is not recoverable",
    EXPIRES_IN_IS_TOO_SMALL: "The expiresIn is smaller than the predefined minimum value.",
    EXPIRES_IN_IS_TOO_LARGE: "The expiresIn is larger than the predefined maximum value.",
    INVALID_REMAINING: "The remaining count is either too large or too small.",
    INVALID_PREFIX_LENGTH: "The prefix length is either too large or too small.",
    INVALID_NAME_LENGTH: "The name length is either too large or too small.",
    METADATA_DISABLED: "Metadata is disabled.",
    RATE_LIMIT_EXCEEDED: "Rate limit exceeded.",
    NO_VALUES_TO_UPDATE: "No values to update.",
    KEY_DISABLED_EXPIRATION: "Custom key expiration values are disabled.",
    INVALID_API_KEY: "Invalid API key.",
    INVALID_USER_ID_FROM_API_KEY: "The user id from the API key is invalid.",
    INVALID_API_KEY_GETTER_RETURN_TYPE: "API Key getter returned an invalid key type. Expected string.",
    SERVER_ONLY_PROPERTY: "The property you're trying to set can only be set from the server auth instance only.",
    FAILED_TO_UPDATE_API_KEY: "Failed to update API key",
    NAME_REQUIRED: "API Key name is required."
};
const API_KEY_TABLE_NAME = "apikey";
const apiKey = (options)=>{
    var _options_rateLimit, _options_rateLimit1, _options_rateLimit2, _options_rateLimit3, _options_keyExpiration, _options_keyExpiration1, _options_keyExpiration2, _options_keyExpiration3, _options_startingCharactersConfig, _options_startingCharactersConfig1;
    var _options_apiKeyHeaders, _options_maximumPrefixLength, _options_minimumPrefixLength, _options_maximumNameLength, _options_minimumNameLength, _options_enableMetadata, _options_disableKeyHashing, _options_requireName, _options_rateLimit_timeWindow, _options_rateLimit_maxRequests, _options_keyExpiration_defaultExpiresIn, _options_keyExpiration_disableCustomExpiresTime, _options_keyExpiration_maxExpiresIn, _options_keyExpiration_minExpiresIn, _options_startingCharactersConfig_shouldStore, _options_startingCharactersConfig_charactersLength, _options_disableSessionForAPIKeys;
    const opts = {
        ...options,
        apiKeyHeaders: (_options_apiKeyHeaders = options === null || options === void 0 ? void 0 : options.apiKeyHeaders) !== null && _options_apiKeyHeaders !== void 0 ? _options_apiKeyHeaders : "x-api-key",
        defaultKeyLength: (options === null || options === void 0 ? void 0 : options.defaultKeyLength) || 64,
        maximumPrefixLength: (_options_maximumPrefixLength = options === null || options === void 0 ? void 0 : options.maximumPrefixLength) !== null && _options_maximumPrefixLength !== void 0 ? _options_maximumPrefixLength : 32,
        minimumPrefixLength: (_options_minimumPrefixLength = options === null || options === void 0 ? void 0 : options.minimumPrefixLength) !== null && _options_minimumPrefixLength !== void 0 ? _options_minimumPrefixLength : 1,
        maximumNameLength: (_options_maximumNameLength = options === null || options === void 0 ? void 0 : options.maximumNameLength) !== null && _options_maximumNameLength !== void 0 ? _options_maximumNameLength : 32,
        minimumNameLength: (_options_minimumNameLength = options === null || options === void 0 ? void 0 : options.minimumNameLength) !== null && _options_minimumNameLength !== void 0 ? _options_minimumNameLength : 1,
        enableMetadata: (_options_enableMetadata = options === null || options === void 0 ? void 0 : options.enableMetadata) !== null && _options_enableMetadata !== void 0 ? _options_enableMetadata : false,
        disableKeyHashing: (_options_disableKeyHashing = options === null || options === void 0 ? void 0 : options.disableKeyHashing) !== null && _options_disableKeyHashing !== void 0 ? _options_disableKeyHashing : false,
        requireName: (_options_requireName = options === null || options === void 0 ? void 0 : options.requireName) !== null && _options_requireName !== void 0 ? _options_requireName : false,
        rateLimit: {
            enabled: (options === null || options === void 0 ? void 0 : (_options_rateLimit = options.rateLimit) === null || _options_rateLimit === void 0 ? void 0 : _options_rateLimit.enabled) === void 0 ? true : options === null || options === void 0 ? void 0 : (_options_rateLimit1 = options.rateLimit) === null || _options_rateLimit1 === void 0 ? void 0 : _options_rateLimit1.enabled,
            timeWindow: (_options_rateLimit_timeWindow = options === null || options === void 0 ? void 0 : (_options_rateLimit2 = options.rateLimit) === null || _options_rateLimit2 === void 0 ? void 0 : _options_rateLimit2.timeWindow) !== null && _options_rateLimit_timeWindow !== void 0 ? _options_rateLimit_timeWindow : 1e3 * 60 * 60 * 24,
            maxRequests: (_options_rateLimit_maxRequests = options === null || options === void 0 ? void 0 : (_options_rateLimit3 = options.rateLimit) === null || _options_rateLimit3 === void 0 ? void 0 : _options_rateLimit3.maxRequests) !== null && _options_rateLimit_maxRequests !== void 0 ? _options_rateLimit_maxRequests : 10
        },
        keyExpiration: {
            defaultExpiresIn: (_options_keyExpiration_defaultExpiresIn = options === null || options === void 0 ? void 0 : (_options_keyExpiration = options.keyExpiration) === null || _options_keyExpiration === void 0 ? void 0 : _options_keyExpiration.defaultExpiresIn) !== null && _options_keyExpiration_defaultExpiresIn !== void 0 ? _options_keyExpiration_defaultExpiresIn : null,
            disableCustomExpiresTime: (_options_keyExpiration_disableCustomExpiresTime = options === null || options === void 0 ? void 0 : (_options_keyExpiration1 = options.keyExpiration) === null || _options_keyExpiration1 === void 0 ? void 0 : _options_keyExpiration1.disableCustomExpiresTime) !== null && _options_keyExpiration_disableCustomExpiresTime !== void 0 ? _options_keyExpiration_disableCustomExpiresTime : false,
            maxExpiresIn: (_options_keyExpiration_maxExpiresIn = options === null || options === void 0 ? void 0 : (_options_keyExpiration2 = options.keyExpiration) === null || _options_keyExpiration2 === void 0 ? void 0 : _options_keyExpiration2.maxExpiresIn) !== null && _options_keyExpiration_maxExpiresIn !== void 0 ? _options_keyExpiration_maxExpiresIn : 365,
            minExpiresIn: (_options_keyExpiration_minExpiresIn = options === null || options === void 0 ? void 0 : (_options_keyExpiration3 = options.keyExpiration) === null || _options_keyExpiration3 === void 0 ? void 0 : _options_keyExpiration3.minExpiresIn) !== null && _options_keyExpiration_minExpiresIn !== void 0 ? _options_keyExpiration_minExpiresIn : 1
        },
        startingCharactersConfig: {
            shouldStore: (_options_startingCharactersConfig_shouldStore = options === null || options === void 0 ? void 0 : (_options_startingCharactersConfig = options.startingCharactersConfig) === null || _options_startingCharactersConfig === void 0 ? void 0 : _options_startingCharactersConfig.shouldStore) !== null && _options_startingCharactersConfig_shouldStore !== void 0 ? _options_startingCharactersConfig_shouldStore : true,
            charactersLength: (_options_startingCharactersConfig_charactersLength = options === null || options === void 0 ? void 0 : (_options_startingCharactersConfig1 = options.startingCharactersConfig) === null || _options_startingCharactersConfig1 === void 0 ? void 0 : _options_startingCharactersConfig1.charactersLength) !== null && _options_startingCharactersConfig_charactersLength !== void 0 ? _options_startingCharactersConfig_charactersLength : 6
        },
        disableSessionForAPIKeys: (_options_disableSessionForAPIKeys = options === null || options === void 0 ? void 0 : options.disableSessionForAPIKeys) !== null && _options_disableSessionForAPIKeys !== void 0 ? _options_disableSessionForAPIKeys : false
    };
    const schema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["m"])(apiKeySchema({
        rateLimitMax: opts.rateLimit.maxRequests,
        timeWindow: opts.rateLimit.timeWindow
    }), opts.schema);
    const getter = opts.customAPIKeyGetter || ((ctx)=>{
        if (Array.isArray(opts.apiKeyHeaders)) {
            for (const header of opts.apiKeyHeaders){
                var _ctx_headers;
                const value = (_ctx_headers = ctx.headers) === null || _ctx_headers === void 0 ? void 0 : _ctx_headers.get(header);
                if (value) {
                    return value;
                }
            }
        } else {
            var _ctx_headers1;
            return (_ctx_headers1 = ctx.headers) === null || _ctx_headers1 === void 0 ? void 0 : _ctx_headers1.get(opts.apiKeyHeaders);
        }
    });
    const keyGenerator = opts.customKeyGenerator || (async (options2)=>{
        const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        let apiKey2 = "".concat(options2.prefix || "");
        for(let i = 0; i < options2.length; i++){
            const randomIndex = Math.floor(Math.random() * characters.length);
            apiKey2 += characters[randomIndex];
        }
        return apiKey2;
    });
    const routes = createApiKeyRoutes({
        keyGenerator,
        opts,
        schema
    });
    return {
        id: "api-key",
        $ERROR_CODES: ERROR_CODES,
        hooks: {
            before: [
                {
                    matcher: (ctx)=>!!getter(ctx) && opts.disableSessionForAPIKeys === false,
                    handler: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(async (ctx)=>{
                        var _ctx_request, _ctx_context_options_session;
                        const key = getter(ctx);
                        if (typeof key !== "string") {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                                message: ERROR_CODES.INVALID_API_KEY_GETTER_RETURN_TYPE
                            });
                        }
                        if (key.length < opts.defaultKeyLength) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                                message: ERROR_CODES.INVALID_API_KEY
                            });
                        }
                        if (opts.customAPIKeyValidator) {
                            const isValid = await opts.customAPIKeyValidator({
                                ctx,
                                key
                            });
                            if (!isValid) {
                                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                                    message: ERROR_CODES.INVALID_API_KEY
                                });
                            }
                        }
                        const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);
                        const apiKey2 = await validateApiKey({
                            hashedKey: hashed,
                            ctx,
                            opts,
                            schema
                        });
                        deleteAllExpiredApiKeys(ctx.context).catch((err)=>{
                            ctx.context.logger.error("Failed to delete expired API keys:", err);
                        });
                        const user = await ctx.context.internalAdapter.findUserById(apiKey2.userId);
                        if (!user) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                                message: ERROR_CODES.INVALID_USER_ID_FROM_API_KEY
                            });
                        }
                        var _ctx_request_headers_get;
                        const session = {
                            user,
                            session: {
                                id: apiKey2.id,
                                token: key,
                                userId: apiKey2.userId,
                                userAgent: (_ctx_request_headers_get = (_ctx_request = ctx.request) === null || _ctx_request === void 0 ? void 0 : _ctx_request.headers.get("user-agent")) !== null && _ctx_request_headers_get !== void 0 ? _ctx_request_headers_get : null,
                                ipAddress: ctx.request ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$O2VtDkDK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.request, ctx.context.options) : null,
                                createdAt: /* @__PURE__ */ new Date(),
                                updatedAt: /* @__PURE__ */ new Date(),
                                expiresAt: apiKey2.expiresAt || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(((_ctx_context_options_session = ctx.context.options.session) === null || _ctx_context_options_session === void 0 ? void 0 : _ctx_context_options_session.expiresIn) || 60 * 60 * 24 * 7, // 7 days
                                "ms")
                            }
                        };
                        ctx.context.session = session;
                        if (ctx.path === "/get-session") {
                            return session;
                        } else {
                            return {
                                context: ctx
                            };
                        }
                    })
                }
            ]
        },
        endpoints: {
            /**
       * ### Endpoint
       *
       * POST `/api-key/create`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.createApiKey`
       *
       * **client:**
       * `authClient.apiKey.create`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-create)
       */ createApiKey: routes.createApiKey,
            /**
       * ### Endpoint
       *
       * POST `/api-key/verify`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.verifyApiKey`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-verify)
       */ verifyApiKey: routes.verifyApiKey,
            /**
       * ### Endpoint
       *
       * GET `/api-key/get`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.getApiKey`
       *
       * **client:**
       * `authClient.apiKey.get`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-get)
       */ getApiKey: routes.getApiKey,
            /**
       * ### Endpoint
       *
       * POST `/api-key/update`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.updateApiKey`
       *
       * **client:**
       * `authClient.apiKey.update`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-update)
       */ updateApiKey: routes.updateApiKey,
            /**
       * ### Endpoint
       *
       * POST `/api-key/delete`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.deleteApiKey`
       *
       * **client:**
       * `authClient.apiKey.delete`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-delete)
       */ deleteApiKey: routes.deleteApiKey,
            /**
       * ### Endpoint
       *
       * GET `/api-key/list`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.listApiKeys`
       *
       * **client:**
       * `authClient.apiKey.list`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-list)
       */ listApiKeys: routes.listApiKeys,
            /**
       * ### Endpoint
       *
       * POST `/api-key/delete-all-expired-api-keys`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.deleteAllExpiredApiKeys`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-delete-all-expired-api-keys)
       */ deleteAllExpiredApiKeys: routes.deleteAllExpiredApiKeys
        },
        schema
    };
};
const oneTimeToken = (options)=>{
    const opts = {
        storeToken: "plain",
        ...options
    };
    async function storeToken(ctx, token) {
        if (opts.storeToken === "hashed") {
            return await defaultKeyHasher(token);
        }
        if (typeof opts.storeToken === "object" && "type" in opts.storeToken && opts.storeToken.type === "custom-hasher") {
            return await opts.storeToken.hash(token);
        }
        return token;
    }
    return {
        id: "one-time-token",
        endpoints: {
            /**
       * ### Endpoint
       *
       * GET `/one-time-token/generate`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.generateOneTimeToken`
       *
       * **client:**
       * `authClient.oneTimeToken.generate`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/one-time-token#api-method-one-time-token-generate)
       */ generateOneTimeToken: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/one-time-token/generate", {
                method: "GET",
                use: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
                ]
            }, async (c)=>{
                if ((opts === null || opts === void 0 ? void 0 : opts.disableClientRequest) && c.request) {
                    throw c.error("BAD_REQUEST", {
                        message: "Client requests are disabled"
                    });
                }
                const session = c.context.session;
                const token = (opts === null || opts === void 0 ? void 0 : opts.generateToken) ? await opts.generateToken(session, c) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32);
                var _opts_expiresIn;
                const expiresAt = new Date(Date.now() + ((_opts_expiresIn = opts === null || opts === void 0 ? void 0 : opts.expiresIn) !== null && _opts_expiresIn !== void 0 ? _opts_expiresIn : 3) * 60 * 1e3);
                const storedToken = await storeToken(c, token);
                await c.context.internalAdapter.createVerificationValue({
                    value: session.session.token,
                    identifier: "one-time-token:".concat(storedToken),
                    expiresAt
                });
                return c.json({
                    token
                });
            }),
            /**
       * ### Endpoint
       *
       * POST `/one-time-token/verify`
       *
       * ### API Methods
       *
       * **server:**
       * `auth.api.verifyOneTimeToken`
       *
       * **client:**
       * `authClient.oneTimeToken.verify`
       *
       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/one-time-token#api-method-one-time-token-verify)
       */ verifyOneTimeToken: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/one-time-token/verify", {
                method: "POST",
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    token: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                        description: 'The token to verify. Eg: "some-token"'
                    })
                })
            }, async (c)=>{
                const { token } = c.body;
                const storedToken = await storeToken(c, token);
                const verificationValue = await c.context.internalAdapter.findVerificationValue("one-time-token:".concat(storedToken));
                if (!verificationValue) {
                    throw c.error("BAD_REQUEST", {
                        message: "Invalid token"
                    });
                }
                if (verificationValue.expiresAt < /* @__PURE__ */ new Date()) {
                    await c.context.internalAdapter.deleteVerificationValue(verificationValue.id);
                    throw c.error("BAD_REQUEST", {
                        message: "Token expired"
                    });
                }
                await c.context.internalAdapter.deleteVerificationValue(verificationValue.id);
                const session = await c.context.internalAdapter.findSession(verificationValue.value);
                if (!session) {
                    throw c.error("BAD_REQUEST", {
                        message: "Session not found"
                    });
                }
                return c.json(session);
            })
        }
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript) <export a as createAuthEndpoint>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "createAuthEndpoint",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DIVj9vPt.mjs [app-client] (ecmascript) <export o as oidcProvider>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "oidcProvider",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DIVj9vPt$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DIVj9vPt$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DIVj9vPt.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript) <export s as setSessionCookie>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "setSessionCookie",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript) <export g as generateRandomString>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "generateRandomString",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B-Ud-fSV.mjs [app-client] (ecmascript) <export o as oneTimeToken>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "oneTimeToken",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B$2d$Ud$2d$fSV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B$2d$Ud$2d$fSV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B-Ud-fSV.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DlWzob1-.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "b",
    ()=>betterAuth,
    "c",
    ()=>createTelemetry,
    "g",
    ()=>getTelemetryAuthConfig
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$api$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/api/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$defu$2f$dist$2f$defu$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/defu/dist/defu.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/crypto/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CSVCtb77$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CSVCtb77.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B_PTVODM.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$YwDQhoPc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CuS_eDdK.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$fetch$2f$fetch$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-fetch/fetch/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B8b3lep0.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const DEFAULT_SECRET = "better-auth-secret-123456789";
let packageJSONCache;
async function readRootPackageJson() {
    if (packageJSONCache) return packageJSONCache;
    try {
        const cwd = typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd === "function" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd() : "";
        if (!cwd) return void 0;
        const importRuntime = (m)=>Function("mm", "return import(mm)")(m);
        const [{ default: fs }, { default: path }] = await Promise.all([
            importRuntime("fs/promises"),
            importRuntime("path")
        ]);
        const raw = await fs.readFile(path.join(cwd, "package.json"), "utf-8");
        packageJSONCache = JSON.parse(raw);
        return packageJSONCache;
    } catch (e) {}
    return void 0;
}
async function getPackageVersion(pkg) {
    if (packageJSONCache) {
        var _packageJSONCache_dependencies, _packageJSONCache_devDependencies, _packageJSONCache_peerDependencies;
        return ((_packageJSONCache_dependencies = packageJSONCache.dependencies) === null || _packageJSONCache_dependencies === void 0 ? void 0 : _packageJSONCache_dependencies[pkg]) || ((_packageJSONCache_devDependencies = packageJSONCache.devDependencies) === null || _packageJSONCache_devDependencies === void 0 ? void 0 : _packageJSONCache_devDependencies[pkg]) || ((_packageJSONCache_peerDependencies = packageJSONCache.peerDependencies) === null || _packageJSONCache_peerDependencies === void 0 ? void 0 : _packageJSONCache_peerDependencies[pkg]);
    }
    try {
        const cwd = typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd === "function" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].cwd() : "";
        if (!cwd) throw new Error("no-cwd");
        const importRuntime = (m)=>Function("mm", "return import(mm)")(m);
        const [{ default: fs }, { default: path }] = await Promise.all([
            importRuntime("fs/promises"),
            importRuntime("path")
        ]);
        const pkgJsonPath = path.join(cwd, "node_modules", pkg, "package.json");
        const raw = await fs.readFile(pkgJsonPath, "utf-8");
        const json = JSON.parse(raw);
        const resolved = json.version || await getVersionFromLocalPackageJson(pkg) || void 0;
        return resolved;
    } catch (e) {}
    const fromRoot = await getVersionFromLocalPackageJson(pkg);
    return fromRoot;
}
async function getVersionFromLocalPackageJson(pkg) {
    const json = await readRootPackageJson();
    if (!json) return void 0;
    const allDeps = {
        ...json.dependencies,
        ...json.devDependencies,
        ...json.peerDependencies
    };
    return allDeps[pkg];
}
async function getNameFromLocalPackageJson() {
    const json = await readRootPackageJson();
    return json === null || json === void 0 ? void 0 : json.name;
}
let projectIdCached = null;
async function getProjectId(baseUrl) {
    if (projectIdCached) return projectIdCached;
    const projectName = await getNameFromLocalPackageJson();
    if (projectName) {
        projectIdCached = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hashToBase64"])(baseUrl ? baseUrl + projectName : projectName);
        return projectIdCached;
    }
    if (baseUrl) {
        projectIdCached = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hashToBase64"])(baseUrl);
        return projectIdCached;
    }
    projectIdCached = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(32);
    return projectIdCached;
}
const importRuntime = (m)=>{
    return Function("mm", "return import(mm)")(m);
};
function getVendor() {
    const hasAny = function() {
        for(var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++){
            keys[_key] = arguments[_key];
        }
        return keys.some((k)=>Boolean(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"][k]));
    };
    if (hasAny("CF_PAGES", "CF_PAGES_URL", "CF_ACCOUNT_ID") || typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers") {
        return "cloudflare";
    }
    if (hasAny("VERCEL", "VERCEL_URL", "VERCEL_ENV")) return "vercel";
    if (hasAny("NETLIFY", "NETLIFY_URL")) return "netlify";
    if (hasAny("RENDER", "RENDER_URL", "RENDER_INTERNAL_HOSTNAME", "RENDER_SERVICE_ID")) {
        return "render";
    }
    if (hasAny("AWS_LAMBDA_FUNCTION_NAME", "AWS_EXECUTION_ENV", "LAMBDA_TASK_ROOT")) {
        return "aws";
    }
    if (hasAny("GOOGLE_CLOUD_FUNCTION_NAME", "GOOGLE_CLOUD_PROJECT", "GCP_PROJECT", "K_SERVICE")) {
        return "gcp";
    }
    if (hasAny("AZURE_FUNCTION_NAME", "FUNCTIONS_WORKER_RUNTIME", "WEBSITE_INSTANCE_ID", "WEBSITE_SITE_NAME")) {
        return "azure";
    }
    if (hasAny("DENO_DEPLOYMENT_ID", "DENO_REGION")) return "deno-deploy";
    if (hasAny("FLY_APP_NAME", "FLY_REGION", "FLY_ALLOC_ID")) return "fly-io";
    if (hasAny("RAILWAY_STATIC_URL", "RAILWAY_ENVIRONMENT_NAME")) return "railway";
    if (hasAny("DYNO", "HEROKU_APP_NAME")) return "heroku";
    if (hasAny("DO_DEPLOYMENT_ID", "DO_APP_NAME", "DIGITALOCEAN")) return "digitalocean";
    if (hasAny("KOYEB", "KOYEB_DEPLOYMENT_ID", "KOYEB_APP_NAME")) return "koyeb";
    return null;
}
async function detectSystemInfo() {
    try {
        if (getVendor() === "cloudflare") return "cloudflare";
        const os = await importRuntime("os");
        const cpus = os.cpus();
        return {
            deploymentVendor: getVendor(),
            systemPlatform: os.platform(),
            systemRelease: os.release(),
            systemArchitecture: os.arch(),
            cpuCount: cpus.length,
            cpuModel: cpus.length ? cpus[0].model : null,
            cpuSpeed: cpus.length ? cpus[0].speed : null,
            memory: os.totalmem(),
            isWSL: await isWsl(),
            isDocker: await isDocker(),
            isTTY: typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].stdout ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].stdout.isTTY : null
        };
    } catch (e) {
        return {
            systemPlatform: null,
            systemRelease: null,
            systemArchitecture: null,
            cpuCount: null,
            cpuModel: null,
            cpuSpeed: null,
            memory: null,
            isWSL: null,
            isDocker: null,
            isTTY: null
        };
    }
}
let isDockerCached;
async function hasDockerEnv() {
    if (getVendor() === "cloudflare") return false;
    try {
        const fs = await importRuntime("fs");
        fs.statSync("/.dockerenv");
        return true;
    } catch (e) {
        return false;
    }
}
async function hasDockerCGroup() {
    if (getVendor() === "cloudflare") return false;
    try {
        const fs = await importRuntime("fs");
        return fs.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
    } catch (e) {
        return false;
    }
}
async function isDocker() {
    if (getVendor() === "cloudflare") return false;
    if (isDockerCached === void 0) {
        isDockerCached = await hasDockerEnv() || await hasDockerCGroup();
    }
    return isDockerCached;
}
async function isWsl() {
    try {
        if (getVendor() === "cloudflare") return false;
        if ("TURBOPACK compile-time truthy", 1) {
            return false;
        }
        //TURBOPACK unreachable
        ;
        const fs = undefined;
        const os = undefined;
    } catch (e) {
        return false;
    }
}
let isInsideContainerCached;
const hasContainerEnv = async ()=>{
    if (getVendor() === "cloudflare") return false;
    try {
        const fs = await importRuntime("fs");
        fs.statSync("/run/.containerenv");
        return true;
    } catch (e) {
        return false;
    }
};
async function isInsideContainer() {
    if (isInsideContainerCached === void 0) {
        isInsideContainerCached = await hasContainerEnv() || await isDocker();
    }
    return isInsideContainerCached;
}
function isCI() {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].CI !== "false" && ("BUILD_ID" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Jenkins, Cloudbees
    "BUILD_NUMBER" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Jenkins, TeamCity (fixed typo: extra space removed)
    "CI" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari, Cloudflare
    "CI_APP_ID" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Appflow
    "CI_BUILD_ID" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Appflow
    "CI_BUILD_NUMBER" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Appflow
    "CI_NAME" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Codeship and others
    "CONTINUOUS_INTEGRATION" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"] || // Travis CI, Cirrus CI
    "RUN_ID" in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"]);
}
function detectRuntime() {
    var _process_versions, _process;
    if (typeof Deno !== "undefined") {
        var _Deno_version, _Deno;
        var _Deno_version_deno;
        const denoVersion = (_Deno_version_deno = (_Deno = Deno) === null || _Deno === void 0 ? void 0 : (_Deno_version = _Deno.version) === null || _Deno_version === void 0 ? void 0 : _Deno_version.deno) !== null && _Deno_version_deno !== void 0 ? _Deno_version_deno : null;
        return {
            name: "deno",
            version: denoVersion
        };
    }
    if (typeof Bun !== "undefined") {
        var _Bun;
        var _Bun_version;
        const bunVersion = (_Bun_version = (_Bun = Bun) === null || _Bun === void 0 ? void 0 : _Bun.version) !== null && _Bun_version !== void 0 ? _Bun_version : null;
        return {
            name: "bun",
            version: bunVersion
        };
    }
    if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && ((_process = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) === null || _process === void 0 ? void 0 : (_process_versions = _process.versions) === null || _process_versions === void 0 ? void 0 : _process_versions.node)) {
        var _process_versions_node;
        return {
            name: "node",
            version: (_process_versions_node = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].versions.node) !== null && _process_versions_node !== void 0 ? _process_versions_node : null
        };
    }
    return {
        name: "edge",
        version: null
    };
}
function detectEnvironment() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])("NODE_ENV") === "production" ? "production" : isCI() ? "ci" : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])() ? "test" : "development";
}
const DATABASES = {
    pg: "postgresql",
    mysql: "mysql",
    mariadb: "mariadb",
    sqlite3: "sqlite",
    "better-sqlite3": "sqlite",
    "@prisma/client": "prisma",
    mongoose: "mongodb",
    mongodb: "mongodb",
    "drizzle-orm": "drizzle"
};
async function detectDatabase() {
    for (const [pkg, name] of Object.entries(DATABASES)){
        const version = await getPackageVersion(pkg);
        if (version) return {
            name,
            version
        };
    }
    return void 0;
}
const FRAMEWORKS = {
    next: "next",
    nuxt: "nuxt",
    "@remix-run/server-runtime": "remix",
    astro: "astro",
    "@sveltejs/kit": "sveltekit",
    "solid-start": "solid-start",
    "tanstack-start": "tanstack-start",
    hono: "hono",
    express: "express",
    elysia: "elysia",
    expo: "expo"
};
async function detectFramework() {
    for (const [pkg, name] of Object.entries(FRAMEWORKS)){
        const version = await getPackageVersion(pkg);
        if (version) return {
            name,
            version
        };
    }
    return void 0;
}
function detectPackageManager() {
    const userAgent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].npm_config_user_agent;
    if (!userAgent) {
        return void 0;
    }
    const pmSpec = userAgent.split(" ")[0];
    const separatorPos = pmSpec.lastIndexOf("/");
    const name = pmSpec.substring(0, separatorPos);
    return {
        name: name === "npminstall" ? "cnpm" : name,
        version: pmSpec.substring(separatorPos + 1)
    };
}
function getTelemetryAuthConfig(options, context) {
    var _options_emailVerification, _options_emailVerification1, _options_emailVerification2, _options_emailVerification3, _options_emailVerification4, _options_emailVerification5, _options_emailVerification6, _options_emailAndPassword, _options_emailAndPassword1, _options_emailAndPassword2, _options_emailAndPassword3, _options_emailAndPassword4, _options_emailAndPassword5, _options_emailAndPassword6, _options_emailAndPassword7, _options_emailAndPassword_password, _options_emailAndPassword8, _options_emailAndPassword_password1, _options_emailAndPassword9, _options_emailAndPassword10, _options_emailAndPassword11, _options_plugins, _options_user, _options_user1, _options_user2, _options_user_changeEmail, _options_user3, _options_user_changeEmail1, _options_user4, _options_verification, _options_verification1, _options_verification2, _options_session, _options_session1, _options_session_cookieCache, _options_session2, _options_session_cookieCache1, _options_session3, _options_session4, _options_session5, _options_session6, _options_session7, _options_session8, _options_session9, _options_session10, _options_account, _options_account1, _options_account2, _options_account3, _options_account_accountLinking, _options_account4, _options_account_accountLinking1, _options_account5, _options_account_accountLinking2, _options_account6, _options_account_accountLinking3, _options_account7, _options_hooks, _options_hooks1, _options_advanced, _options_advanced1, _options_advanced_crossSubDomainCookies, _options_advanced2, _options_advanced_crossSubDomainCookies1, _options_advanced3, _options_advanced_crossSubDomainCookies2, _options_advanced4, _options_advanced_database, _options_advanced5, _options_advanced_database1, _options_advanced6, _options_advanced_database2, _options_advanced7, _options_advanced8, _options_advanced_ipAddress, _options_advanced9, _options_advanced_ipAddress1, _options_advanced10, _options_advanced11, _options_advanced_defaultCookieAttributes, _options_advanced12, _options_advanced_defaultCookieAttributes1, _options_advanced13, _options_advanced_defaultCookieAttributes2, _options_advanced14, _options_advanced_defaultCookieAttributes3, _options_advanced15, _options_advanced_defaultCookieAttributes4, _options_advanced16, _options_advanced_defaultCookieAttributes5, _options_advanced17, _options_trustedOrigins, _options_rateLimit, _options_rateLimit1, _options_rateLimit2, _options_rateLimit3, _options_rateLimit4, _options_rateLimit5, _options_onAPIError, _options_onAPIError1, _options_onAPIError2, _options_logger, _options_logger1, _options_logger2, _options_databaseHooks_user_create, _options_databaseHooks_user, _options_databaseHooks, _options_databaseHooks_user_create1, _options_databaseHooks_user1, _options_databaseHooks1, _options_databaseHooks_user_update, _options_databaseHooks_user2, _options_databaseHooks2, _options_databaseHooks_user_update1, _options_databaseHooks_user3, _options_databaseHooks3, _options_databaseHooks_session_create, _options_databaseHooks_session, _options_databaseHooks4, _options_databaseHooks_session_create1, _options_databaseHooks_session1, _options_databaseHooks5, _options_databaseHooks_session_update, _options_databaseHooks_session2, _options_databaseHooks6, _options_databaseHooks_session_update1, _options_databaseHooks_session3, _options_databaseHooks7, _options_databaseHooks_account_create, _options_databaseHooks_account, _options_databaseHooks8, _options_databaseHooks_account_create1, _options_databaseHooks_account1, _options_databaseHooks9, _options_databaseHooks_account_update, _options_databaseHooks_account2, _options_databaseHooks10, _options_databaseHooks_account_update1, _options_databaseHooks_account3, _options_databaseHooks11, _options_databaseHooks_verification_create, _options_databaseHooks_verification, _options_databaseHooks12, _options_databaseHooks_verification_create1, _options_databaseHooks_verification1, _options_databaseHooks13, _options_databaseHooks_verification_update, _options_databaseHooks_verification2, _options_databaseHooks14, _options_databaseHooks_verification_update1, _options_databaseHooks_verification3, _options_databaseHooks15;
    return {
        database: context === null || context === void 0 ? void 0 : context.database,
        adapter: context === null || context === void 0 ? void 0 : context.adapter,
        emailVerification: {
            sendVerificationEmail: !!((_options_emailVerification = options.emailVerification) === null || _options_emailVerification === void 0 ? void 0 : _options_emailVerification.sendVerificationEmail),
            sendOnSignUp: !!((_options_emailVerification1 = options.emailVerification) === null || _options_emailVerification1 === void 0 ? void 0 : _options_emailVerification1.sendOnSignUp),
            sendOnSignIn: !!((_options_emailVerification2 = options.emailVerification) === null || _options_emailVerification2 === void 0 ? void 0 : _options_emailVerification2.sendOnSignIn),
            autoSignInAfterVerification: !!((_options_emailVerification3 = options.emailVerification) === null || _options_emailVerification3 === void 0 ? void 0 : _options_emailVerification3.autoSignInAfterVerification),
            expiresIn: (_options_emailVerification4 = options.emailVerification) === null || _options_emailVerification4 === void 0 ? void 0 : _options_emailVerification4.expiresIn,
            onEmailVerification: !!((_options_emailVerification5 = options.emailVerification) === null || _options_emailVerification5 === void 0 ? void 0 : _options_emailVerification5.onEmailVerification),
            afterEmailVerification: !!((_options_emailVerification6 = options.emailVerification) === null || _options_emailVerification6 === void 0 ? void 0 : _options_emailVerification6.afterEmailVerification)
        },
        emailAndPassword: {
            enabled: !!((_options_emailAndPassword = options.emailAndPassword) === null || _options_emailAndPassword === void 0 ? void 0 : _options_emailAndPassword.enabled),
            disableSignUp: !!((_options_emailAndPassword1 = options.emailAndPassword) === null || _options_emailAndPassword1 === void 0 ? void 0 : _options_emailAndPassword1.disableSignUp),
            requireEmailVerification: !!((_options_emailAndPassword2 = options.emailAndPassword) === null || _options_emailAndPassword2 === void 0 ? void 0 : _options_emailAndPassword2.requireEmailVerification),
            maxPasswordLength: (_options_emailAndPassword3 = options.emailAndPassword) === null || _options_emailAndPassword3 === void 0 ? void 0 : _options_emailAndPassword3.maxPasswordLength,
            minPasswordLength: (_options_emailAndPassword4 = options.emailAndPassword) === null || _options_emailAndPassword4 === void 0 ? void 0 : _options_emailAndPassword4.minPasswordLength,
            sendResetPassword: !!((_options_emailAndPassword5 = options.emailAndPassword) === null || _options_emailAndPassword5 === void 0 ? void 0 : _options_emailAndPassword5.sendResetPassword),
            resetPasswordTokenExpiresIn: (_options_emailAndPassword6 = options.emailAndPassword) === null || _options_emailAndPassword6 === void 0 ? void 0 : _options_emailAndPassword6.resetPasswordTokenExpiresIn,
            onPasswordReset: !!((_options_emailAndPassword7 = options.emailAndPassword) === null || _options_emailAndPassword7 === void 0 ? void 0 : _options_emailAndPassword7.onPasswordReset),
            password: {
                hash: !!((_options_emailAndPassword8 = options.emailAndPassword) === null || _options_emailAndPassword8 === void 0 ? void 0 : (_options_emailAndPassword_password = _options_emailAndPassword8.password) === null || _options_emailAndPassword_password === void 0 ? void 0 : _options_emailAndPassword_password.hash),
                verify: !!((_options_emailAndPassword9 = options.emailAndPassword) === null || _options_emailAndPassword9 === void 0 ? void 0 : (_options_emailAndPassword_password1 = _options_emailAndPassword9.password) === null || _options_emailAndPassword_password1 === void 0 ? void 0 : _options_emailAndPassword_password1.verify)
            },
            autoSignIn: !!((_options_emailAndPassword10 = options.emailAndPassword) === null || _options_emailAndPassword10 === void 0 ? void 0 : _options_emailAndPassword10.autoSignIn),
            revokeSessionsOnPasswordReset: !!((_options_emailAndPassword11 = options.emailAndPassword) === null || _options_emailAndPassword11 === void 0 ? void 0 : _options_emailAndPassword11.revokeSessionsOnPasswordReset)
        },
        socialProviders: Object.keys(options.socialProviders || {}).map((p)=>{
            var _options_socialProviders;
            const provider = (_options_socialProviders = options.socialProviders) === null || _options_socialProviders === void 0 ? void 0 : _options_socialProviders[p];
            if (!provider) return {};
            return {
                id: p,
                mapProfileToUser: !!provider.mapProfileToUser,
                disableDefaultScope: !!provider.disableDefaultScope,
                disableIdTokenSignIn: !!provider.disableIdTokenSignIn,
                disableImplicitSignUp: provider.disableImplicitSignUp,
                disableSignUp: provider.disableSignUp,
                getUserInfo: !!provider.getUserInfo,
                overrideUserInfoOnSignIn: !!provider.overrideUserInfoOnSignIn,
                prompt: provider.prompt,
                verifyIdToken: !!provider.verifyIdToken,
                scope: provider.scope,
                refreshAccessToken: !!provider.refreshAccessToken
            };
        }),
        plugins: (_options_plugins = options.plugins) === null || _options_plugins === void 0 ? void 0 : _options_plugins.map((p)=>p.id.toString()),
        user: {
            modelName: (_options_user = options.user) === null || _options_user === void 0 ? void 0 : _options_user.modelName,
            fields: (_options_user1 = options.user) === null || _options_user1 === void 0 ? void 0 : _options_user1.fields,
            additionalFields: (_options_user2 = options.user) === null || _options_user2 === void 0 ? void 0 : _options_user2.additionalFields,
            changeEmail: {
                enabled: (_options_user3 = options.user) === null || _options_user3 === void 0 ? void 0 : (_options_user_changeEmail = _options_user3.changeEmail) === null || _options_user_changeEmail === void 0 ? void 0 : _options_user_changeEmail.enabled,
                sendChangeEmailVerification: !!((_options_user4 = options.user) === null || _options_user4 === void 0 ? void 0 : (_options_user_changeEmail1 = _options_user4.changeEmail) === null || _options_user_changeEmail1 === void 0 ? void 0 : _options_user_changeEmail1.sendChangeEmailVerification)
            }
        },
        verification: {
            modelName: (_options_verification = options.verification) === null || _options_verification === void 0 ? void 0 : _options_verification.modelName,
            disableCleanup: (_options_verification1 = options.verification) === null || _options_verification1 === void 0 ? void 0 : _options_verification1.disableCleanup,
            fields: (_options_verification2 = options.verification) === null || _options_verification2 === void 0 ? void 0 : _options_verification2.fields
        },
        session: {
            modelName: (_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.modelName,
            additionalFields: (_options_session1 = options.session) === null || _options_session1 === void 0 ? void 0 : _options_session1.additionalFields,
            cookieCache: {
                enabled: (_options_session2 = options.session) === null || _options_session2 === void 0 ? void 0 : (_options_session_cookieCache = _options_session2.cookieCache) === null || _options_session_cookieCache === void 0 ? void 0 : _options_session_cookieCache.enabled,
                maxAge: (_options_session3 = options.session) === null || _options_session3 === void 0 ? void 0 : (_options_session_cookieCache1 = _options_session3.cookieCache) === null || _options_session_cookieCache1 === void 0 ? void 0 : _options_session_cookieCache1.maxAge
            },
            disableSessionRefresh: (_options_session4 = options.session) === null || _options_session4 === void 0 ? void 0 : _options_session4.disableSessionRefresh,
            expiresIn: (_options_session5 = options.session) === null || _options_session5 === void 0 ? void 0 : _options_session5.expiresIn,
            fields: (_options_session6 = options.session) === null || _options_session6 === void 0 ? void 0 : _options_session6.fields,
            freshAge: (_options_session7 = options.session) === null || _options_session7 === void 0 ? void 0 : _options_session7.freshAge,
            preserveSessionInDatabase: (_options_session8 = options.session) === null || _options_session8 === void 0 ? void 0 : _options_session8.preserveSessionInDatabase,
            storeSessionInDatabase: (_options_session9 = options.session) === null || _options_session9 === void 0 ? void 0 : _options_session9.storeSessionInDatabase,
            updateAge: (_options_session10 = options.session) === null || _options_session10 === void 0 ? void 0 : _options_session10.updateAge
        },
        account: {
            modelName: (_options_account = options.account) === null || _options_account === void 0 ? void 0 : _options_account.modelName,
            fields: (_options_account1 = options.account) === null || _options_account1 === void 0 ? void 0 : _options_account1.fields,
            encryptOAuthTokens: (_options_account2 = options.account) === null || _options_account2 === void 0 ? void 0 : _options_account2.encryptOAuthTokens,
            updateAccountOnSignIn: (_options_account3 = options.account) === null || _options_account3 === void 0 ? void 0 : _options_account3.updateAccountOnSignIn,
            accountLinking: {
                enabled: (_options_account4 = options.account) === null || _options_account4 === void 0 ? void 0 : (_options_account_accountLinking = _options_account4.accountLinking) === null || _options_account_accountLinking === void 0 ? void 0 : _options_account_accountLinking.enabled,
                trustedProviders: (_options_account5 = options.account) === null || _options_account5 === void 0 ? void 0 : (_options_account_accountLinking1 = _options_account5.accountLinking) === null || _options_account_accountLinking1 === void 0 ? void 0 : _options_account_accountLinking1.trustedProviders,
                updateUserInfoOnLink: (_options_account6 = options.account) === null || _options_account6 === void 0 ? void 0 : (_options_account_accountLinking2 = _options_account6.accountLinking) === null || _options_account_accountLinking2 === void 0 ? void 0 : _options_account_accountLinking2.updateUserInfoOnLink,
                allowUnlinkingAll: (_options_account7 = options.account) === null || _options_account7 === void 0 ? void 0 : (_options_account_accountLinking3 = _options_account7.accountLinking) === null || _options_account_accountLinking3 === void 0 ? void 0 : _options_account_accountLinking3.allowUnlinkingAll
            }
        },
        hooks: {
            after: !!((_options_hooks = options.hooks) === null || _options_hooks === void 0 ? void 0 : _options_hooks.after),
            before: !!((_options_hooks1 = options.hooks) === null || _options_hooks1 === void 0 ? void 0 : _options_hooks1.before)
        },
        secondaryStorage: !!options.secondaryStorage,
        advanced: {
            cookiePrefix: !!((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : _options_advanced.cookiePrefix),
            //this shouldn't be tracked
            cookies: !!((_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : _options_advanced1.cookies),
            crossSubDomainCookies: {
                domain: !!((_options_advanced2 = options.advanced) === null || _options_advanced2 === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies = _options_advanced2.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies === void 0 ? void 0 : _options_advanced_crossSubDomainCookies.domain),
                enabled: (_options_advanced3 = options.advanced) === null || _options_advanced3 === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies1 = _options_advanced3.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies1 === void 0 ? void 0 : _options_advanced_crossSubDomainCookies1.enabled,
                additionalCookies: (_options_advanced4 = options.advanced) === null || _options_advanced4 === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies2 = _options_advanced4.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies2 === void 0 ? void 0 : _options_advanced_crossSubDomainCookies2.additionalCookies
            },
            database: {
                useNumberId: !!((_options_advanced5 = options.advanced) === null || _options_advanced5 === void 0 ? void 0 : (_options_advanced_database = _options_advanced5.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.useNumberId),
                generateId: (_options_advanced6 = options.advanced) === null || _options_advanced6 === void 0 ? void 0 : (_options_advanced_database1 = _options_advanced6.database) === null || _options_advanced_database1 === void 0 ? void 0 : _options_advanced_database1.generateId,
                defaultFindManyLimit: (_options_advanced7 = options.advanced) === null || _options_advanced7 === void 0 ? void 0 : (_options_advanced_database2 = _options_advanced7.database) === null || _options_advanced_database2 === void 0 ? void 0 : _options_advanced_database2.defaultFindManyLimit
            },
            useSecureCookies: (_options_advanced8 = options.advanced) === null || _options_advanced8 === void 0 ? void 0 : _options_advanced8.useSecureCookies,
            ipAddress: {
                disableIpTracking: (_options_advanced9 = options.advanced) === null || _options_advanced9 === void 0 ? void 0 : (_options_advanced_ipAddress = _options_advanced9.ipAddress) === null || _options_advanced_ipAddress === void 0 ? void 0 : _options_advanced_ipAddress.disableIpTracking,
                ipAddressHeaders: (_options_advanced10 = options.advanced) === null || _options_advanced10 === void 0 ? void 0 : (_options_advanced_ipAddress1 = _options_advanced10.ipAddress) === null || _options_advanced_ipAddress1 === void 0 ? void 0 : _options_advanced_ipAddress1.ipAddressHeaders
            },
            disableCSRFCheck: (_options_advanced11 = options.advanced) === null || _options_advanced11 === void 0 ? void 0 : _options_advanced11.disableCSRFCheck,
            cookieAttributes: {
                expires: (_options_advanced12 = options.advanced) === null || _options_advanced12 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes = _options_advanced12.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes === void 0 ? void 0 : _options_advanced_defaultCookieAttributes.expires,
                secure: (_options_advanced13 = options.advanced) === null || _options_advanced13 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes1 = _options_advanced13.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes1 === void 0 ? void 0 : _options_advanced_defaultCookieAttributes1.secure,
                sameSite: (_options_advanced14 = options.advanced) === null || _options_advanced14 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes2 = _options_advanced14.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes2 === void 0 ? void 0 : _options_advanced_defaultCookieAttributes2.sameSite,
                domain: !!((_options_advanced15 = options.advanced) === null || _options_advanced15 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes3 = _options_advanced15.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes3 === void 0 ? void 0 : _options_advanced_defaultCookieAttributes3.domain),
                path: (_options_advanced16 = options.advanced) === null || _options_advanced16 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes4 = _options_advanced16.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes4 === void 0 ? void 0 : _options_advanced_defaultCookieAttributes4.path,
                httpOnly: (_options_advanced17 = options.advanced) === null || _options_advanced17 === void 0 ? void 0 : (_options_advanced_defaultCookieAttributes5 = _options_advanced17.defaultCookieAttributes) === null || _options_advanced_defaultCookieAttributes5 === void 0 ? void 0 : _options_advanced_defaultCookieAttributes5.httpOnly
            }
        },
        trustedOrigins: (_options_trustedOrigins = options.trustedOrigins) === null || _options_trustedOrigins === void 0 ? void 0 : _options_trustedOrigins.length,
        rateLimit: {
            storage: (_options_rateLimit = options.rateLimit) === null || _options_rateLimit === void 0 ? void 0 : _options_rateLimit.storage,
            modelName: (_options_rateLimit1 = options.rateLimit) === null || _options_rateLimit1 === void 0 ? void 0 : _options_rateLimit1.modelName,
            window: (_options_rateLimit2 = options.rateLimit) === null || _options_rateLimit2 === void 0 ? void 0 : _options_rateLimit2.window,
            customStorage: !!((_options_rateLimit3 = options.rateLimit) === null || _options_rateLimit3 === void 0 ? void 0 : _options_rateLimit3.customStorage),
            enabled: (_options_rateLimit4 = options.rateLimit) === null || _options_rateLimit4 === void 0 ? void 0 : _options_rateLimit4.enabled,
            max: (_options_rateLimit5 = options.rateLimit) === null || _options_rateLimit5 === void 0 ? void 0 : _options_rateLimit5.max
        },
        onAPIError: {
            errorURL: (_options_onAPIError = options.onAPIError) === null || _options_onAPIError === void 0 ? void 0 : _options_onAPIError.errorURL,
            onError: !!((_options_onAPIError1 = options.onAPIError) === null || _options_onAPIError1 === void 0 ? void 0 : _options_onAPIError1.onError),
            throw: (_options_onAPIError2 = options.onAPIError) === null || _options_onAPIError2 === void 0 ? void 0 : _options_onAPIError2.throw
        },
        logger: {
            disabled: (_options_logger = options.logger) === null || _options_logger === void 0 ? void 0 : _options_logger.disabled,
            level: (_options_logger1 = options.logger) === null || _options_logger1 === void 0 ? void 0 : _options_logger1.level,
            log: !!((_options_logger2 = options.logger) === null || _options_logger2 === void 0 ? void 0 : _options_logger2.log)
        },
        databaseHooks: {
            user: {
                create: {
                    after: !!((_options_databaseHooks = options.databaseHooks) === null || _options_databaseHooks === void 0 ? void 0 : (_options_databaseHooks_user = _options_databaseHooks.user) === null || _options_databaseHooks_user === void 0 ? void 0 : (_options_databaseHooks_user_create = _options_databaseHooks_user.create) === null || _options_databaseHooks_user_create === void 0 ? void 0 : _options_databaseHooks_user_create.after),
                    before: !!((_options_databaseHooks1 = options.databaseHooks) === null || _options_databaseHooks1 === void 0 ? void 0 : (_options_databaseHooks_user1 = _options_databaseHooks1.user) === null || _options_databaseHooks_user1 === void 0 ? void 0 : (_options_databaseHooks_user_create1 = _options_databaseHooks_user1.create) === null || _options_databaseHooks_user_create1 === void 0 ? void 0 : _options_databaseHooks_user_create1.before)
                },
                update: {
                    after: !!((_options_databaseHooks2 = options.databaseHooks) === null || _options_databaseHooks2 === void 0 ? void 0 : (_options_databaseHooks_user2 = _options_databaseHooks2.user) === null || _options_databaseHooks_user2 === void 0 ? void 0 : (_options_databaseHooks_user_update = _options_databaseHooks_user2.update) === null || _options_databaseHooks_user_update === void 0 ? void 0 : _options_databaseHooks_user_update.after),
                    before: !!((_options_databaseHooks3 = options.databaseHooks) === null || _options_databaseHooks3 === void 0 ? void 0 : (_options_databaseHooks_user3 = _options_databaseHooks3.user) === null || _options_databaseHooks_user3 === void 0 ? void 0 : (_options_databaseHooks_user_update1 = _options_databaseHooks_user3.update) === null || _options_databaseHooks_user_update1 === void 0 ? void 0 : _options_databaseHooks_user_update1.before)
                }
            },
            session: {
                create: {
                    after: !!((_options_databaseHooks4 = options.databaseHooks) === null || _options_databaseHooks4 === void 0 ? void 0 : (_options_databaseHooks_session = _options_databaseHooks4.session) === null || _options_databaseHooks_session === void 0 ? void 0 : (_options_databaseHooks_session_create = _options_databaseHooks_session.create) === null || _options_databaseHooks_session_create === void 0 ? void 0 : _options_databaseHooks_session_create.after),
                    before: !!((_options_databaseHooks5 = options.databaseHooks) === null || _options_databaseHooks5 === void 0 ? void 0 : (_options_databaseHooks_session1 = _options_databaseHooks5.session) === null || _options_databaseHooks_session1 === void 0 ? void 0 : (_options_databaseHooks_session_create1 = _options_databaseHooks_session1.create) === null || _options_databaseHooks_session_create1 === void 0 ? void 0 : _options_databaseHooks_session_create1.before)
                },
                update: {
                    after: !!((_options_databaseHooks6 = options.databaseHooks) === null || _options_databaseHooks6 === void 0 ? void 0 : (_options_databaseHooks_session2 = _options_databaseHooks6.session) === null || _options_databaseHooks_session2 === void 0 ? void 0 : (_options_databaseHooks_session_update = _options_databaseHooks_session2.update) === null || _options_databaseHooks_session_update === void 0 ? void 0 : _options_databaseHooks_session_update.after),
                    before: !!((_options_databaseHooks7 = options.databaseHooks) === null || _options_databaseHooks7 === void 0 ? void 0 : (_options_databaseHooks_session3 = _options_databaseHooks7.session) === null || _options_databaseHooks_session3 === void 0 ? void 0 : (_options_databaseHooks_session_update1 = _options_databaseHooks_session3.update) === null || _options_databaseHooks_session_update1 === void 0 ? void 0 : _options_databaseHooks_session_update1.before)
                }
            },
            account: {
                create: {
                    after: !!((_options_databaseHooks8 = options.databaseHooks) === null || _options_databaseHooks8 === void 0 ? void 0 : (_options_databaseHooks_account = _options_databaseHooks8.account) === null || _options_databaseHooks_account === void 0 ? void 0 : (_options_databaseHooks_account_create = _options_databaseHooks_account.create) === null || _options_databaseHooks_account_create === void 0 ? void 0 : _options_databaseHooks_account_create.after),
                    before: !!((_options_databaseHooks9 = options.databaseHooks) === null || _options_databaseHooks9 === void 0 ? void 0 : (_options_databaseHooks_account1 = _options_databaseHooks9.account) === null || _options_databaseHooks_account1 === void 0 ? void 0 : (_options_databaseHooks_account_create1 = _options_databaseHooks_account1.create) === null || _options_databaseHooks_account_create1 === void 0 ? void 0 : _options_databaseHooks_account_create1.before)
                },
                update: {
                    after: !!((_options_databaseHooks10 = options.databaseHooks) === null || _options_databaseHooks10 === void 0 ? void 0 : (_options_databaseHooks_account2 = _options_databaseHooks10.account) === null || _options_databaseHooks_account2 === void 0 ? void 0 : (_options_databaseHooks_account_update = _options_databaseHooks_account2.update) === null || _options_databaseHooks_account_update === void 0 ? void 0 : _options_databaseHooks_account_update.after),
                    before: !!((_options_databaseHooks11 = options.databaseHooks) === null || _options_databaseHooks11 === void 0 ? void 0 : (_options_databaseHooks_account3 = _options_databaseHooks11.account) === null || _options_databaseHooks_account3 === void 0 ? void 0 : (_options_databaseHooks_account_update1 = _options_databaseHooks_account3.update) === null || _options_databaseHooks_account_update1 === void 0 ? void 0 : _options_databaseHooks_account_update1.before)
                }
            },
            verification: {
                create: {
                    after: !!((_options_databaseHooks12 = options.databaseHooks) === null || _options_databaseHooks12 === void 0 ? void 0 : (_options_databaseHooks_verification = _options_databaseHooks12.verification) === null || _options_databaseHooks_verification === void 0 ? void 0 : (_options_databaseHooks_verification_create = _options_databaseHooks_verification.create) === null || _options_databaseHooks_verification_create === void 0 ? void 0 : _options_databaseHooks_verification_create.after),
                    before: !!((_options_databaseHooks13 = options.databaseHooks) === null || _options_databaseHooks13 === void 0 ? void 0 : (_options_databaseHooks_verification1 = _options_databaseHooks13.verification) === null || _options_databaseHooks_verification1 === void 0 ? void 0 : (_options_databaseHooks_verification_create1 = _options_databaseHooks_verification1.create) === null || _options_databaseHooks_verification_create1 === void 0 ? void 0 : _options_databaseHooks_verification_create1.before)
                },
                update: {
                    after: !!((_options_databaseHooks14 = options.databaseHooks) === null || _options_databaseHooks14 === void 0 ? void 0 : (_options_databaseHooks_verification2 = _options_databaseHooks14.verification) === null || _options_databaseHooks_verification2 === void 0 ? void 0 : (_options_databaseHooks_verification_update = _options_databaseHooks_verification2.update) === null || _options_databaseHooks_verification_update === void 0 ? void 0 : _options_databaseHooks_verification_update.after),
                    before: !!((_options_databaseHooks15 = options.databaseHooks) === null || _options_databaseHooks15 === void 0 ? void 0 : (_options_databaseHooks_verification3 = _options_databaseHooks15.verification) === null || _options_databaseHooks_verification3 === void 0 ? void 0 : (_options_databaseHooks_verification_update1 = _options_databaseHooks_verification3.update) === null || _options_databaseHooks_verification_update1 === void 0 ? void 0 : _options_databaseHooks_verification_update1.before)
                }
            }
        }
    };
}
async function createTelemetry(options, context) {
    var _options_telemetry;
    const debugEnabled = ((_options_telemetry = options.telemetry) === null || _options_telemetry === void 0 ? void 0 : _options_telemetry.debug) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])("BETTER_AUTH_TELEMETRY_DEBUG", false);
    const TELEMETRY_ENDPOINT = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"].BETTER_AUTH_TELEMETRY_ENDPOINT;
    const track = async (event)=>{
        try {
            if (context === null || context === void 0 ? void 0 : context.customTrack) {
                await context.customTrack(event);
            } else {
                if (debugEnabled) {
                    await Promise.resolve(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].info("telemetry event", JSON.stringify(event, null, 2)));
                } else {
                    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$fetch$2f$fetch$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["betterFetch"])(TELEMETRY_ENDPOINT, {
                        method: "POST",
                        body: event
                    });
                }
            }
        } catch (e) {}
    };
    const isEnabled = async ()=>{
        var _options_telemetry;
        const telemetryEnabled = ((_options_telemetry = options.telemetry) === null || _options_telemetry === void 0 ? void 0 : _options_telemetry.enabled) !== void 0 ? options.telemetry.enabled : false;
        const envEnabled = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])("BETTER_AUTH_TELEMETRY", false);
        return (envEnabled || telemetryEnabled) && ((context === null || context === void 0 ? void 0 : context.skipTestCheck) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])());
    };
    const enabled = await isEnabled();
    let anonymousId;
    if (enabled) {
        anonymousId = await getProjectId(options.baseURL);
        const payload = {
            config: getTelemetryAuthConfig(options),
            runtime: detectRuntime(),
            database: await detectDatabase(),
            framework: await detectFramework(),
            environment: detectEnvironment(),
            systemInfo: await detectSystemInfo(),
            packageManager: detectPackageManager()
        };
        void track({
            type: "init",
            payload,
            anonymousId
        });
    }
    return {
        publish: async (event)=>{
            if (!enabled) return;
            if (!anonymousId) {
                anonymousId = await getProjectId(options.baseURL);
            }
            await track({
                type: event.type,
                payload: event.payload,
                anonymousId
            });
        }
    };
}
const init = async (options)=>{
    var _options_session, _options_session1, _options_session2, _options_rateLimit, _options_rateLimit1, _options_rateLimit2, _options_rateLimit3, _options_emailAndPassword_password, _options_emailAndPassword, _options_emailAndPassword_password1, _options_emailAndPassword1, _options_emailAndPassword2, _options_emailAndPassword3;
    const adapter = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CSVCtb77$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(options);
    const plugins = options.plugins || [];
    const internalPlugins = getInternalPlugins(options);
    const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(options.logger);
    const baseURL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(options.baseURL, options.basePath);
    const secret = options.secret || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BETTER_AUTH_SECRET || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].AUTH_SECRET || DEFAULT_SECRET;
    if (secret === DEFAULT_SECRET) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]) {
            logger.error("You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.");
        }
    }
    options = {
        ...options,
        secret,
        baseURL: baseURL ? new URL(baseURL).origin : "",
        basePath: options.basePath || "/api/auth",
        plugins: plugins.concat(internalPlugins)
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$api$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["checkEndpointConflicts"])(options, logger);
    const cookies = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options);
    const tables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B_PTVODM$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options);
    const providers = Object.entries(options.socialProviders || {}).map((param)=>{
        let [key, config] = param;
        if (config == null) {
            return null;
        }
        if (config.enabled === false) {
            return null;
        }
        if (!config.clientId) {
            logger.warn("Social provider ".concat(key, " is missing clientId or clientSecret"));
        }
        const provider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["U"][key](config);
        provider.disableImplicitSignUp = config.disableImplicitSignUp;
        return provider;
    }).filter((x)=>x !== null);
    const generateIdFunc = (param)=>{
        let { model, size } = param;
        var _options_advanced, _options_advanced_database, _options_advanced1;
        if (typeof ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : _options_advanced.generateId) === "function") {
            return options.advanced.generateId({
                model,
                size
            });
        }
        if (typeof (options === null || options === void 0 ? void 0 : (_options_advanced1 = options.advanced) === null || _options_advanced1 === void 0 ? void 0 : (_options_advanced_database = _options_advanced1.database) === null || _options_advanced_database === void 0 ? void 0 : _options_advanced_database.generateId) === "function") {
            return options.advanced.database.generateId({
                model,
                size
            });
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BUPPRXfK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(size);
    };
    const { publish } = await createTelemetry(options, {
        adapter: adapter.id,
        database: typeof options.database === "function" ? "adapter" : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B8b3lep0$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(options.database) || "unknown"
    });
    var _options_rateLimit_enabled;
    let ctx = {
        appName: options.appName || "Better Auth",
        socialProviders: providers,
        options,
        tables,
        trustedOrigins: getTrustedOrigins(options),
        baseURL: baseURL || "",
        sessionConfig: {
            updateAge: ((_options_session = options.session) === null || _options_session === void 0 ? void 0 : _options_session.updateAge) !== void 0 ? options.session.updateAge : 24 * 60 * 60,
            // 24 hours
            expiresIn: ((_options_session1 = options.session) === null || _options_session1 === void 0 ? void 0 : _options_session1.expiresIn) || 60 * 60 * 24 * 7,
            // 7 days
            freshAge: ((_options_session2 = options.session) === null || _options_session2 === void 0 ? void 0 : _options_session2.freshAge) === void 0 ? 60 * 60 * 24 : options.session.freshAge
        },
        secret,
        rateLimit: {
            ...options.rateLimit,
            enabled: (_options_rateLimit_enabled = (_options_rateLimit = options.rateLimit) === null || _options_rateLimit === void 0 ? void 0 : _options_rateLimit.enabled) !== null && _options_rateLimit_enabled !== void 0 ? _options_rateLimit_enabled : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"],
            window: ((_options_rateLimit1 = options.rateLimit) === null || _options_rateLimit1 === void 0 ? void 0 : _options_rateLimit1.window) || 10,
            max: ((_options_rateLimit2 = options.rateLimit) === null || _options_rateLimit2 === void 0 ? void 0 : _options_rateLimit2.max) || 100,
            storage: ((_options_rateLimit3 = options.rateLimit) === null || _options_rateLimit3 === void 0 ? void 0 : _options_rateLimit3.storage) || (options.secondaryStorage ? "secondary-storage" : "memory")
        },
        authCookies: cookies,
        logger,
        generateId: generateIdFunc,
        session: null,
        secondaryStorage: options.secondaryStorage,
        password: {
            hash: ((_options_emailAndPassword = options.emailAndPassword) === null || _options_emailAndPassword === void 0 ? void 0 : (_options_emailAndPassword_password = _options_emailAndPassword.password) === null || _options_emailAndPassword_password === void 0 ? void 0 : _options_emailAndPassword_password.hash) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hashPassword"],
            verify: ((_options_emailAndPassword1 = options.emailAndPassword) === null || _options_emailAndPassword1 === void 0 ? void 0 : (_options_emailAndPassword_password1 = _options_emailAndPassword1.password) === null || _options_emailAndPassword_password1 === void 0 ? void 0 : _options_emailAndPassword_password1.verify) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$crypto$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["verifyPassword"],
            config: {
                minPasswordLength: ((_options_emailAndPassword2 = options.emailAndPassword) === null || _options_emailAndPassword2 === void 0 ? void 0 : _options_emailAndPassword2.minPasswordLength) || 8,
                maxPasswordLength: ((_options_emailAndPassword3 = options.emailAndPassword) === null || _options_emailAndPassword3 === void 0 ? void 0 : _options_emailAndPassword3.maxPasswordLength) || 128
            },
            checkPassword: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$YwDQhoPc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"]
        },
        setNewSession (session) {
            this.newSession = session;
        },
        newSession: null,
        adapter,
        internalAdapter: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CSVCtb77$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(adapter, {
            options,
            logger,
            hooks: options.databaseHooks ? [
                options.databaseHooks
            ] : []
        }),
        createAuthCookie: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(options),
        async runMigrations () {
            if (!options.database || "updateMany" in options.database) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Database is not provided or it's an adapter. Migrations are only supported with a database instance.");
            }
            const { runMigrations } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CSVCtb77$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"])(options);
            await runMigrations();
        },
        publishTelemetry: publish
    };
    let { context } = runPluginInit(ctx);
    return context;
};
function runPluginInit(ctx) {
    let options = ctx.options;
    const plugins = options.plugins || [];
    let context = ctx;
    const dbHooks = [];
    for (const plugin of plugins){
        if (plugin.init) {
            const result = plugin.init(context);
            if (typeof result === "object") {
                if (result.options) {
                    const { databaseHooks, ...restOpts } = result.options;
                    if (databaseHooks) {
                        dbHooks.push(databaseHooks);
                    }
                    options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$defu$2f$dist$2f$defu$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defu"])(options, restOpts);
                }
                if (result.context) {
                    context = {
                        ...context,
                        ...result.context
                    };
                }
            }
        }
    }
    dbHooks.push(options.databaseHooks);
    context.internalAdapter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CSVCtb77$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(ctx.adapter, {
        options,
        logger: ctx.logger,
        hooks: dbHooks.filter((u)=>u !== void 0),
        generateId: ctx.generateId
    });
    context.options = options;
    return {
        context
    };
}
function getInternalPlugins(options) {
    var _options_advanced_crossSubDomainCookies, _options_advanced;
    const plugins = [];
    if ((_options_advanced = options.advanced) === null || _options_advanced === void 0 ? void 0 : (_options_advanced_crossSubDomainCookies = _options_advanced.crossSubDomainCookies) === null || _options_advanced_crossSubDomainCookies === void 0 ? void 0 : _options_advanced_crossSubDomainCookies.enabled) ;
    return plugins;
}
function getTrustedOrigins(options) {
    const baseURL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(options.baseURL, options.basePath);
    if (!baseURL) {
        return [];
    }
    const trustedOrigins = [
        new URL(baseURL).origin
    ];
    if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {
        trustedOrigins.push(...options.trustedOrigins);
    }
    const envTrustedOrigins = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["e"].BETTER_AUTH_TRUSTED_ORIGINS;
    if (envTrustedOrigins) {
        trustedOrigins.push(...envTrustedOrigins.split(","));
    }
    if (trustedOrigins.filter((x)=>!x).length) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("A provided trusted origin is invalid, make sure your trusted origins list is properly defined.");
    }
    return trustedOrigins;
}
const betterAuth = (options)=>{
    var _options_plugins;
    const authContext = init(options);
    const { api } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$api$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getEndpoints"])(authContext, options);
    const errorCodes = (_options_plugins = options.plugins) === null || _options_plugins === void 0 ? void 0 : _options_plugins.reduce((acc, plugin)=>{
        if (plugin.$ERROR_CODES) {
            return {
                ...acc,
                ...plugin.$ERROR_CODES
            };
        }
        return acc;
    }, {});
    return {
        handler: async (request)=>{
            const ctx = await authContext;
            const basePath = ctx.options.basePath || "/api/auth";
            if (!ctx.options.baseURL) {
                const baseURL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(void 0, basePath, request);
                if (baseURL) {
                    ctx.baseURL = baseURL;
                    ctx.options.baseURL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CuS_eDdK$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.baseURL) || void 0;
                } else {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Could not get base URL from request. Please provide a valid base URL.");
                }
            }
            ctx.trustedOrigins = [
                ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],
                ctx.options.baseURL
            ];
            const { handler } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$api$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["router"])(ctx, options);
            return handler(request);
        },
        api,
        options,
        $context: authContext,
        $Infer: {},
        $ERROR_CODES: {
            ...errorCodes,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]
        }
    };
};
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "c",
    ()=>capitalizeFirstLetter
]);
function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
;
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.DlWzob1-.mjs [app-client] (ecmascript) <export b as betterAuth>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "betterAuth",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DlWzob1$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DlWzob1$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DlWzob1-.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.B-Ud-fSV.mjs [app-client] (ecmascript) <export a as apiKey>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "apiKey",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B$2d$Ud$2d$fSV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B$2d$Ud$2d$fSV$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B-Ud-fSV.mjs [app-client] (ecmascript)");
}),
"[project]/node_modules/better-auth/dist/shared/better-auth.BYiVM63b.mjs [app-client] (ecmascript) <export o as organization>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "organization",
    ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BYiVM63b$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BYiVM63b$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BYiVM63b.mjs [app-client] (ecmascript)");
}),
]);

//# sourceMappingURL=node_modules_better-auth_dist_shared_50bc9063._.js.map