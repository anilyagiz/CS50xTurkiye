(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/convex-helpers/index.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * asyncMap returns the results of applying an async function over an list.
 *
 * The list can even be a promise, or an iterable like a Set.
 * @param list - Iterable object of items, e.g. an Array, Set, Object.keys
 * @param asyncTransform
 * @returns
 */ __turbopack_context__.s([
    "NullDocumentError",
    ()=>NullDocumentError,
    "assert",
    ()=>assert,
    "asyncMap",
    ()=>asyncMap,
    "nullThrows",
    ()=>nullThrows,
    "omit",
    ()=>omit,
    "pick",
    ()=>pick,
    "pruneNull",
    ()=>pruneNull,
    "withoutSystemFields",
    ()=>withoutSystemFields
]);
async function asyncMap(list, asyncTransform) {
    const promises = [];
    let index = 0;
    list = await list;
    for (const item of list){
        promises.push(asyncTransform(item, index));
        index += 1;
    }
    return Promise.all(promises);
}
function pruneNull(list) {
    return list.filter((i)=>i !== null);
}
class NullDocumentError extends Error {
}
function nullThrows(doc, message) {
    if (doc === null) {
        throw new NullDocumentError(message !== null && message !== void 0 ? message : "Unexpected null document.");
    }
    return doc;
}
function pick(obj, keys) {
    return Object.fromEntries(Object.entries(obj).filter((param)=>{
        let [k] = param;
        return keys.includes(k);
    }));
}
function omit(obj, keys) {
    return Object.fromEntries(Object.entries(obj).filter((param)=>{
        let [k] = param;
        return !keys.includes(k);
    }));
}
function withoutSystemFields(obj) {
    return omit(obj, [
        "_id",
        "_creationTime"
    ]);
}
// Type utils:
const _error = Symbol();
function assert(value, message) {
    if (!value) {
        throw new Error(message);
    }
}
}),
"[project]/node_modules/convex-helpers/validators.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "ValidationError",
    ()=>ValidationError,
    "addFieldsToValidator",
    ()=>addFieldsToValidator,
    "any",
    ()=>any,
    "array",
    ()=>array,
    "arrayBuffer",
    ()=>arrayBuffer,
    "biging",
    ()=>biging,
    "boolean",
    ()=>boolean,
    "brandedString",
    ()=>brandedString,
    "bytes",
    ()=>bytes,
    "deprecated",
    ()=>deprecated,
    "doc",
    ()=>doc,
    "float64",
    ()=>float64,
    "id",
    ()=>id,
    "int64",
    ()=>int64,
    "literal",
    ()=>literal,
    "literals",
    ()=>literals,
    "null_",
    ()=>null_,
    "nullable",
    ()=>nullable,
    "number",
    ()=>number,
    "object",
    ()=>object,
    "optional",
    ()=>optional,
    "parse",
    ()=>parse,
    "partial",
    ()=>partial,
    "pretend",
    ()=>pretend,
    "pretendRequired",
    ()=>pretendRequired,
    "string",
    ()=>string,
    "systemFields",
    ()=>systemFields,
    "typedV",
    ()=>typedV,
    "union",
    ()=>union,
    "validate",
    ()=>validate,
    "withSystemFields",
    ()=>withSystemFields
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/values/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/values/validator.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2d$helpers$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex-helpers/index.js [app-client] (ecmascript)");
;
;
;
const literals = function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].union(...args.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].literal));
};
const nullable = (x)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].union(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].null(), x);
function partial(fieldsOrObjOrUnion) {
    if (fieldsOrObjOrUnion.isConvexValidator) {
        if (fieldsOrObjOrUnion.kind === "object") {
            return partialVObject(fieldsOrObjOrUnion);
        }
        if (fieldsOrObjOrUnion.kind === "union") {
            return partialUnion(fieldsOrObjOrUnion);
        }
        throw new Error("partial only works with union or object Validators, or a Record<string, Validator> currently");
    }
    return partialFields(fieldsOrObjOrUnion);
}
/**
 * partialFields helps you define an object of optional validators more concisely.
 *
 * e.g. `partialFields({a: v.string(), b: v.number()})` is equivalent to
 * `{a: v.optional(v.string()), b: v.optional(v.number())}`
 *
 * @param obj The object of validators to make optional. e.g. {a: v.string()}
 * @returns A new object of validators that can be the value or undefined.
 */ function partialFields(obj) {
    return Object.fromEntries(Object.entries(obj).map((param)=>{
        let [k, vv] = param;
        return [
            k,
            vv.isOptional === "optional" ? vv : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(vv)
        ];
    }));
}
/**
 * partialObject helps you define an object of optional validators more concisely.
 *
 * e.g. `partialObject({a: v.string(), b: v.number()})` is equivalent to
 * `{a: v.optional(v.string()), b: v.optional(v.number())}`
 *
 * @param obj The object of validators to make optional. e.g. {a: v.string()}
 * @returns A new object of validators that can be the value or undefined.
 */ function partialVObject(obj) {
    const o = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].object(partialFields(obj.fields));
    if (obj.isOptional === "optional") {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(o);
    }
    return o;
}
function partialUnion(union) {
    const u = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].union(...union.members.map((m)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2d$helpers$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assert"])(m.isOptional === "required", "Union members cannot be optional");
        if (m.kind === "object") {
            return partialVObject(m);
        }
        if (m.kind === "union") {
            return partialUnion(m);
        }
        throw new Error("Invalid union member type: ".concat(m.kind));
    }));
    if (union.isOptional === "optional") {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(u);
    }
    return u;
}
const string = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].string();
const number = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].float64();
const float64 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].float64();
const boolean = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].boolean();
const biging = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].int64();
const int64 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].int64();
const any = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].any();
const null_ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].null();
const { id, object, array, bytes, literal, optional, union } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"];
const arrayBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].bytes();
const systemFields = (tableName)=>({
        _id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].id(tableName),
        _creationTime: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].number()
    });
const withSystemFields = (tableName, fields)=>{
    const system = systemFields(tableName);
    return {
        ...fields,
        ...system
    };
};
function addFieldsToValidator(validatorOrFields, fields) {
    const validator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["asObjectValidator"])(validatorOrFields);
    if (Object.keys(fields).length === 0) {
        return validator;
    }
    switch(validator.kind){
        case "object":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].object(intersectValidators(validator.fields, fields));
        case "union":
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].union(...validator.members.map((m)=>addFieldsToValidator(m, fields)));
        default:
            throw new Error("Cannot add arguments to a validator that is not an object or union.");
    }
}
function intersectValidators(fields, fields2) {
    const specificFields = {
        ...fields
    };
    for (const [k, v] of Object.entries(fields2)){
        const existing = specificFields[k];
        if (existing) {
            if (existing.kind !== v.kind) {
                // TODO: handle unions & literals & other sub-types (incl. optionals)
                throw new Error("Cannot intersect validators with different kinds: ".concat(existing.kind, " and ").concat(v.kind));
            }
            if (existing.isOptional !== v.isOptional) {
                if (existing.isOptional === "optional") {
                    // prefer the required validator
                    specificFields[k] = v;
                }
            }
        } else {
            specificFields[k] = v;
        }
    }
    return specificFields;
}
const doc = (schema, tableName)=>{
    function addSystemFields(validator) {
        if (validator.kind === "object") {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].object({
                ...validator.fields,
                ...systemFields(tableName)
            });
        }
        if (validator.kind !== "union") {
            throw new Error("Only object and union validators are supported for documents");
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].union(...validator.members.map(addSystemFields));
    }
    return addSystemFields(schema.tables[tableName].validator);
};
function typedV(schema) {
    return {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"],
        /**
         * Similar to v.id but is type-safe on the table name.
         * @param tableName A table named in your schema.
         * @returns A validator for an ID to the named table.
         */ id: (tableName)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].id(tableName),
        /**
         * Generates a validator for a document, including system fields.
         * To be used in validators when passing a full document in or out of a
         * function.
         * @param tableName A table named in your schema.
         * @returns A validator that matches the schema validator, adding _id and
         * _creationTime. If the validator was a union, it will update all documents
         * recursively, but will currently lose the VUnion-specific type.
         */ doc: (tableName)=>doc(schema, tableName)
    };
}
const brandedString = (_brand)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].string();
const deprecated = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].any());
const pretend = (_typeToImmitate)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].any());
const pretendRequired = (optionalType)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$validator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["v"].optional(optionalType);
class ValidationError extends Error {
    constructor(expected, got, path){
        const message = "Validator error".concat(path ? " for ".concat(path) : "", ": Expected `").concat(expected, "`, got `").concat(got, "`");
        super(message), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "expected", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "got", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "path", void 0);
        this.expected = expected;
        this.got = got;
        this.path = path;
        this.name = "ValidationError";
    }
}
function validate(validator, value, opts) {
    let valid = true;
    let expected = validator.kind;
    let got;
    if (value === undefined) {
        if (validator.isOptional !== "optional") {
            valid = false;
        }
    } else {
        switch(validator.kind){
            case "null":
                {
                    if (value !== null) {
                        valid = false;
                    }
                    break;
                }
            case "float64":
                {
                    if (typeof value !== "number") {
                        expected = "number";
                        valid = false;
                    }
                    break;
                }
            case "int64":
                {
                    if (typeof value !== "bigint") {
                        expected = "bigint";
                        valid = false;
                    }
                    break;
                }
            case "boolean":
                {
                    if (typeof value !== "boolean") {
                        valid = false;
                    }
                    break;
                }
            case "string":
                {
                    if (typeof value !== "string") {
                        valid = false;
                    }
                    break;
                }
            case "bytes":
                {
                    if (!(value instanceof ArrayBuffer)) {
                        valid = false;
                    }
                    break;
                }
            case "any":
                {
                    break;
                }
            case "literal":
                {
                    if (value !== validator.value) {
                        valid = false;
                        expected = validator.value;
                        if ([
                            "string",
                            "number",
                            "boolean",
                            "bigint"
                        ].includes(typeof value)) {
                            got = '"'.concat(value, '"');
                        }
                    }
                    break;
                }
            case "id":
                {
                    if (typeof value !== "string") {
                        valid = false;
                    } else if (opts === null || opts === void 0 ? void 0 : opts.db) {
                        expected = "Id<".concat(validator.tableName, ">");
                        const id = opts.db.normalizeId(validator.tableName, value);
                        if (!id) {
                            valid = false;
                        }
                    }
                    break;
                }
            case "array":
                {
                    if (!Array.isArray(value)) {
                        valid = false;
                        break;
                    }
                    for (const [index, v] of value.entries()){
                        var _opts__pathPrefix;
                        const path = "".concat((_opts__pathPrefix = opts === null || opts === void 0 ? void 0 : opts._pathPrefix) !== null && _opts__pathPrefix !== void 0 ? _opts__pathPrefix : "", "[").concat(index, "]");
                        valid = validate(validator.element, v, {
                            ...opts,
                            _pathPrefix: path
                        });
                        if (!valid) {
                            expected = validator.element.kind;
                            break;
                        }
                    }
                    break;
                }
            case "object":
                {
                    var // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous
                    // conditions but are still simple objects.
                    _prototype_constructor;
                    if (typeof value !== "object" || value === null) {
                        valid = false;
                        break;
                    }
                    const prototype = Object.getPrototypeOf(value);
                    const isSimple = prototype === null || prototype === Object.prototype || (prototype === null || prototype === void 0 ? void 0 : (_prototype_constructor = prototype.constructor) === null || _prototype_constructor === void 0 ? void 0 : _prototype_constructor.name) === "Object";
                    if (!isSimple) {
                        var _prototype_constructor1;
                        var _prototype_constructor_name;
                        expected = ((_prototype_constructor_name = prototype === null || prototype === void 0 ? void 0 : (_prototype_constructor1 = prototype.constructor) === null || _prototype_constructor1 === void 0 ? void 0 : _prototype_constructor1.name) !== null && _prototype_constructor_name !== void 0 ? _prototype_constructor_name : typeof prototype) || "object";
                        valid = false;
                        break;
                    }
                    for (const [k, fieldValidator] of Object.entries(validator.fields)){
                        valid = validate(fieldValidator, value[k], {
                            ...opts,
                            _pathPrefix: appendPath(opts, k)
                        });
                        if (!valid) {
                            break;
                        }
                    }
                    if (!(opts === null || opts === void 0 ? void 0 : opts.allowUnknownFields)) {
                        for (const k of Object.keys(value)){
                            if (validator.fields[k] === undefined) {
                                if (opts === null || opts === void 0 ? void 0 : opts.throw) {
                                    throw new ValidationError("nothing", typeof value[k], appendPath(opts, k));
                                }
                                valid = false;
                                break;
                            }
                        }
                    }
                    break;
                }
            case "union":
                {
                    valid = false;
                    let error;
                    for (const member of validator.members){
                        try {
                            if (validate(member, value, opts)) {
                                valid = true;
                                break;
                            }
                        } catch (e) {
                            error = e;
                        }
                    }
                    if (!valid && error) {
                        throw error;
                    }
                    break;
                }
            case "record":
                {
                    if (typeof value !== "object" || value === null) {
                        valid = false;
                        break;
                    }
                    for (const [k, fieldValue] of Object.entries(value)){
                        valid = validate(validator.key, k, {
                            ...opts,
                            _pathPrefix: appendPath(opts, k)
                        });
                        if (!valid) {
                            expected = validator.key.kind;
                            break;
                        }
                        valid = validate(validator.value, fieldValue, {
                            ...opts,
                            _pathPrefix: appendPath(opts, k)
                        });
                        if (!valid) {
                            expected = validator.value.kind;
                            break;
                        }
                    }
                    break;
                }
        }
    }
    if (!valid && (opts === null || opts === void 0 ? void 0 : opts.throw)) {
        throw new ValidationError(expected, got !== null && got !== void 0 ? got : value === null ? "null" : typeof value, opts === null || opts === void 0 ? void 0 : opts._pathPrefix);
    }
    return valid;
}
function parse(validator, value) {
    validate(validator, value, {
        allowUnknownFields: true,
        throw: true
    });
    return stripUnknownFields(validator, value);
}
function stripUnknownFields(validator, value) {
    if (validator.isOptional === "optional" && value === undefined) {
        return value;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2d$helpers$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assert"])(value !== undefined);
    switch(validator.kind){
        case "object":
            {
                const result = {};
                for (const [k, v] of Object.entries(value)){
                    if (validator.fields[k] !== undefined && v !== undefined) {
                        result[k] = stripUnknownFields(validator.fields[k], v);
                    }
                }
                return result;
            }
        case "record":
            {
                const result = {};
                for (const [k, v] of Object.entries(value)){
                    result[k] = stripUnknownFields(validator.value, v);
                }
                return result;
            }
        case "array":
            {
                return value.map((e)=>stripUnknownFields(validator.element, e));
            }
        case "union":
            {
                // First try a strict match
                for (const member of validator.members){
                    if (validate(member, value, {
                        allowUnknownFields: false
                    })) {
                        return stripUnknownFields(member, value);
                    }
                }
                // Then try a permissive match
                for (const member of validator.members){
                    if (validate(member, value, {
                        allowUnknownFields: true
                    })) {
                        return stripUnknownFields(member, value);
                    }
                }
                throw new Error("No matching member in union");
            }
        default:
            {
                return value;
            }
    }
}
function appendPath(opts, path) {
    return (opts === null || opts === void 0 ? void 0 : opts._pathPrefix) ? "".concat(opts._pathPrefix, ".").concat(path) : path;
}
}),
"[project]/node_modules/convex-helpers/server/stream.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "EmptyStream",
    ()=>EmptyStream,
    "MergedStream",
    ()=>MergedStream,
    "OrderedStreamQuery",
    ()=>OrderedStreamQuery,
    "QueryStream",
    ()=>QueryStream,
    "SingletonStream",
    ()=>SingletonStream,
    "StreamDatabaseReader",
    ()=>StreamDatabaseReader,
    "StreamQuery",
    ()=>StreamQuery,
    "StreamQueryInitializer",
    ()=>StreamQueryInitializer,
    "StreamableQuery",
    ()=>StreamableQuery,
    "getIndexFields",
    ()=>getIndexFields,
    "mergedStream",
    ()=>mergedStream,
    "stream",
    ()=>stream,
    "streamIndexRange",
    ()=>streamIndexRange
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_field_get.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_field_init.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_field_set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_update$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_field_update.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_method_get.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_class_private_method_init.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/values/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/values/value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/values/compare.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
//
// Helper functions
//
function makeExclusive(boundType) {
    if (boundType === "gt" || boundType === "gte") {
        return "gt";
    }
    return "lt";
}
/** Split a range query between two index keys into a series of range queries
 * that should be executed in sequence. This is necessary because Convex only
 * supports range queries of the form
 * q.eq("f1", v).eq("f2", v).lt("f3", v).gt("f3", v).
 * i.e. all fields must be equal except for the last field, which can have
 * two inequalities.
 *
 * For example, the range from >[1, 2, 3] to <=[1, 3, 2] would be split into
 * the following queries:
 * 1. q.eq("f1", 1).eq("f2", 2).gt("f3", 3)
 * 2. q.eq("f1", 1).gt("f2", 2).lt("f2", 3)
 * 3. q.eq("f1", 1).eq("f2", 3).lte("f3", 2)
 */ function splitRange(indexFields, // For descending queries, the resulting queries are reversed.
order, startBound, endBound, startBoundType, endBoundType) {
    // Three parts to the split:
    // 1. reduce down from startBound to common prefix
    // 2. range with common prefix
    // 3. build back up from common prefix to endBound
    const commonPrefix = [];
    while(startBound.length > 0 && endBound.length > 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareValues"])(startBound[0], endBound[0]) === 0){
        const indexField = indexFields[0];
        indexFields = indexFields.slice(1);
        const eqBound = startBound[0];
        startBound = startBound.slice(1);
        endBound = endBound.slice(1);
        commonPrefix.push([
            "eq",
            indexField,
            eqBound
        ]);
    }
    const makeCompare = (boundType, key)=>{
        const range = commonPrefix.slice();
        let i = 0;
        for(; i < key.length - 1; i++){
            range.push([
                "eq",
                indexFields[i],
                key[i]
            ]);
        }
        if (i < key.length) {
            range.push([
                boundType,
                indexFields[i],
                key[i]
            ]);
        }
        return range;
    };
    // Stage 1.
    const startRanges = [];
    while(startBound.length > 1){
        startRanges.push(makeCompare(startBoundType, startBound));
        startBoundType = makeExclusive(startBoundType);
        startBound = startBound.slice(0, -1);
    }
    // Stage 3.
    const endRanges = [];
    while(endBound.length > 1){
        endRanges.push(makeCompare(endBoundType, endBound));
        endBoundType = makeExclusive(endBoundType);
        endBound = endBound.slice(0, -1);
    }
    endRanges.reverse();
    // Stage 2.
    let middleRange;
    if (endBound.length === 0) {
        middleRange = makeCompare(startBoundType, startBound);
    } else if (startBound.length === 0) {
        middleRange = makeCompare(endBoundType, endBound);
    } else {
        const startValue = startBound[0];
        const endValue = endBound[0];
        middleRange = commonPrefix.slice();
        middleRange.push([
            startBoundType,
            indexFields[0],
            startValue
        ]);
        middleRange.push([
            endBoundType,
            indexFields[0],
            endValue
        ]);
    }
    const ranges = [
        ...startRanges,
        middleRange,
        ...endRanges
    ];
    if (order === "desc") {
        ranges.reverse();
    }
    return ranges;
}
function rangeToQuery(range) {
    return (q)=>{
        for (const [boundType, field, value] of range){
            q = q[boundType](field, value);
        }
        return q;
    };
}
function getIndexFields(table, index, schema) {
    const indexDescriptor = String(index !== null && index !== void 0 ? index : "by_creation_time");
    if (indexDescriptor === "by_creation_time") {
        return [
            "_creationTime",
            "_id"
        ];
    }
    if (indexDescriptor === "by_id") {
        return [
            "_id"
        ];
    }
    if (!schema) {
        throw new Error("schema is required to infer index fields");
    }
    const tableInfo = schema.tables[table];
    const indexInfo = tableInfo.indexes.find((index)=>index.indexDescriptor === indexDescriptor);
    if (!indexInfo) {
        throw new Error("Index ".concat(indexDescriptor, " not found in table ").concat(table));
    }
    const fields = indexInfo.fields.slice();
    fields.push("_creationTime");
    fields.push("_id");
    return fields;
}
function getIndexKey(doc, indexFields) {
    const key = [];
    for (const field of indexFields){
        let obj = doc;
        for (const subfield of field.split(".")){
            obj = obj[subfield];
        }
        key.push(obj);
    }
    return key;
}
function stream(db, schema) {
    return new StreamDatabaseReader(db, schema);
}
class QueryStream {
    /// Methods for creating new streams as modifications of the current stream.
    /**
     * Create a new stream with a TypeScript filter applied.
     *
     * This is similar to `db.query(tableName).filter(predicate)`, but it's more
     * general because it can call arbitrary TypeScript code, including more
     * database queries.
     *
     * All documents filtered out are still considered "read" from the database;
     * they are just excluded from the output stream.
     *
     * In contrast to `filter` from convex-helpers/server/filter, this filterWith
     * is applied *before* any pagination. That means if the filter excludes a lot
     * of documents, the `.paginate()` method will read a lot of documents until
     * it gets as many documents as it wants. If you run into issues with reading
     * too much data, you can pass `maximumRowsRead` to `paginate()`.
     */ filterWith(predicate) {
        const order = this.getOrder();
        return new FlatMapStream(this, async (doc)=>{
            const filtered = await predicate(doc) ? doc : null;
            return new SingletonStream(filtered, order, [], [], []);
        }, []);
    }
    /**
     * Create a new stream where each element is the result of applying the mapper
     * function to the elements of the original stream.
     *
     * Similar to how [1, 2, 3].map(x => x * 2) => [2, 4, 6]
     */ map(mapper) {
        const order = this.getOrder();
        return new FlatMapStream(this, async (doc)=>{
            const mapped = await mapper(doc);
            return new SingletonStream(mapped, order, [], [], []);
        }, []);
    }
    /**
     * Similar to flatMap on an array, but iterate over a stream, and the for each
     * element, iterate over the stream created by the mapper function.
     *
     * Ordered by the original stream order, then the mapped stream. Similar to
     * how ["a", "b"].flatMap(letter => [letter, letter]) => ["a", "a", "b", "b"]
     *
     * @param mapper A function that takes a document and returns a new stream.
     * @param mappedIndexFields The index fields of the streams created by mapper.
     * @returns A stream of documents returned by the mapper streams,
     *   grouped by the documents in the original stream.
     */ flatMap(mapper, mappedIndexFields) {
        normalizeIndexFields(mappedIndexFields);
        return new FlatMapStream(this, mapper, mappedIndexFields);
    }
    /**
     * Get the first item from the original stream for each distinct value of the
     * selected index fields.
     *
     * e.g. if the stream has an equality filter on `a`, and index fields `[a, b, c]`,
     * we can do `stream.distinct(["b"])` to get a stream of the first item for
     * each distinct value of `b`.
     * Similarly, you could do `stream.distinct(["a", "b"])` with the same result,
     * or `stream.distinct(["a", "b", "c"])` to get the original stream.
     *
     * This stream efficiently skips past items with the same value for the selected
     * distinct index fields.
     *
     * This can be used to perform a loose index scan.
     */ distinct(distinctIndexFields) {
        return new DistinctStream(this, distinctIndexFields);
    }
    /// Implementation of OrderedQuery
    filter(_predicate) {
        throw new Error("Cannot call .filter() directly on a query stream. Use .filterWith() for filtering or .collect() if you want to convert the stream to an array first.");
    }
    async paginate(opts) {
        if (opts.numItems === 0) {
            if (opts.cursor === null) {
                throw new Error(".paginate called with cursor of null and 0 for numItems. " + "This is not supported, as null is not a valid continueCursor. " + "Advice: avoid calling paginate entirely in these cases.");
            }
            return {
                page: [],
                isDone: false,
                continueCursor: opts.cursor
            };
        }
        const order = this.getOrder();
        let newStartKey = {
            key: [],
            inclusive: true
        };
        if (opts.cursor !== null) {
            newStartKey = {
                key: deserializeCursor(opts.cursor),
                inclusive: false
            };
        }
        let newEndKey = {
            key: [],
            inclusive: true
        };
        const maxRowsToRead = opts.maximumRowsRead;
        const softMaxRowsToRead = opts.numItems + 1;
        let maxRows = opts.numItems;
        if (opts.endCursor) {
            newEndKey = {
                key: deserializeCursor(opts.endCursor),
                inclusive: true
            };
            // If there's an endCursor, continue until we get there even if it's more
            // than numItems.
            maxRows = undefined;
        }
        const newLowerBound = order === "asc" ? newStartKey : newEndKey;
        const newUpperBound = order === "asc" ? newEndKey : newStartKey;
        const narrowStream = this.narrow({
            lowerBound: newLowerBound.key,
            lowerBoundInclusive: newLowerBound.inclusive,
            upperBound: newUpperBound.key,
            upperBoundInclusive: newUpperBound.inclusive
        });
        const page = [];
        const indexKeys = [];
        let hasMore = opts.endCursor && opts.endCursor !== "[]";
        var _opts_endCursor;
        let continueCursor = (_opts_endCursor = opts.endCursor) !== null && _opts_endCursor !== void 0 ? _opts_endCursor : "[]";
        for await (const [doc, indexKey] of narrowStream.iterWithKeys()){
            if (doc !== null) {
                page.push(doc);
            }
            indexKeys.push(indexKey);
            if (maxRows !== undefined && page.length >= maxRows || maxRowsToRead !== undefined && indexKeys.length >= maxRowsToRead) {
                hasMore = true;
                continueCursor = serializeCursor(indexKey);
                break;
            }
        }
        let pageStatus = undefined;
        let splitCursor = undefined;
        if (indexKeys.length === maxRowsToRead) {
            pageStatus = "SplitRequired";
            splitCursor = indexKeys[Math.floor((indexKeys.length - 1) / 2)];
        } else if (indexKeys.length >= softMaxRowsToRead) {
            pageStatus = "SplitRecommended";
            splitCursor = indexKeys[Math.floor((indexKeys.length - 1) / 2)];
        }
        return {
            page,
            isDone: !hasMore,
            continueCursor,
            pageStatus,
            splitCursor: splitCursor ? serializeCursor(splitCursor) : undefined
        };
    }
    async collect() {
        return await this.take(Infinity);
    }
    async take(n) {
        const results = [];
        for await (const [doc, _] of this.iterWithKeys()){
            if (doc === null) {
                continue;
            }
            results.push(doc);
            if (results.length === n) {
                break;
            }
        }
        return results;
    }
    async unique() {
        const docs = await this.take(2);
        if (docs.length === 2) {
            throw new Error("Query is not unique");
        }
        var _docs_;
        return (_docs_ = docs[0]) !== null && _docs_ !== void 0 ? _docs_ : null;
    }
    async first() {
        const docs = await this.take(1);
        var _docs_;
        return (_docs_ = docs[0]) !== null && _docs_ !== void 0 ? _docs_ : null;
    }
    [Symbol.asyncIterator]() {
        const iterator = this.iterWithKeys()[Symbol.asyncIterator]();
        return {
            async next () {
                const result = await iterator.next();
                if (result.done) {
                    return {
                        done: true,
                        value: undefined
                    };
                }
                return {
                    done: false,
                    value: result.value[0]
                };
            }
        };
    }
}
class StreamDatabaseReader {
    query(tableName) {
        return new StreamQueryInitializer(this, tableName);
    }
    get(_id) {
        throw new Error("get() not supported for `paginator`");
    }
    normalizeId(_tableName, _id) {
        throw new Error("normalizeId() not supported for `paginator`.");
    }
    constructor(db, schema){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "db", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "schema", void 0);
        // TODO: support system tables
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "system", void 0);
        this.db = db;
        this.schema = schema;
        this.system = db.system;
    }
}
class StreamableQuery extends QueryStream {
}
class StreamQueryInitializer extends StreamableQuery {
    fullTableScan() {
        return this.withIndex("by_creation_time");
    }
    withIndex(indexName, indexRange) {
        const indexFields = getIndexFields(this.table, indexName, this.parent.schema);
        const q = new ReflectIndexRange(indexFields);
        if (indexRange) {
            indexRange(q);
        }
        return new StreamQuery(this, indexName, q, indexRange);
    }
    withSearchIndex(_indexName, _searchFilter) {
        throw new Error("Cannot paginate withSearchIndex");
    }
    inner() {
        return this.fullTableScan();
    }
    order(order) {
        return this.inner().order(order);
    }
    reflect() {
        return this.inner().reflect();
    }
    iterWithKeys() {
        return this.inner().iterWithKeys();
    }
    getOrder() {
        return this.inner().getOrder();
    }
    getEqualityIndexFilter() {
        return this.inner().getEqualityIndexFilter();
    }
    getIndexFields() {
        return this.inner().getIndexFields();
    }
    narrow(indexBounds) {
        return this.inner().narrow(indexBounds);
    }
    constructor(parent, table){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "parent", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "table", void 0);
        this.parent = parent;
        this.table = table;
    }
}
class StreamQuery extends StreamableQuery {
    order(order) {
        return new OrderedStreamQuery(this, order);
    }
    inner() {
        return this.order("asc");
    }
    reflect() {
        return this.inner().reflect();
    }
    iterWithKeys() {
        return this.inner().iterWithKeys();
    }
    getOrder() {
        return this.inner().getOrder();
    }
    getEqualityIndexFilter() {
        return this.inner().getEqualityIndexFilter();
    }
    getIndexFields() {
        return this.inner().getIndexFields();
    }
    narrow(indexBounds) {
        return this.inner().narrow(indexBounds);
    }
    constructor(parent, index, q, indexRange){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "parent", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "index", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "q", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "indexRange", void 0);
        this.parent = parent;
        this.index = index;
        this.q = q;
        this.indexRange = indexRange;
    }
}
class OrderedStreamQuery extends StreamableQuery {
    reflect() {
        var _this_parent_q_lowerBoundIndexKey, _this_parent_q_upperBoundIndexKey;
        return {
            db: this.parent.parent.parent.db,
            schema: this.parent.parent.parent.schema,
            table: this.parent.parent.table,
            index: this.parent.index,
            indexFields: this.parent.q.indexFields,
            order: this.order,
            bounds: {
                lowerBound: (_this_parent_q_lowerBoundIndexKey = this.parent.q.lowerBoundIndexKey) !== null && _this_parent_q_lowerBoundIndexKey !== void 0 ? _this_parent_q_lowerBoundIndexKey : [],
                lowerBoundInclusive: this.parent.q.lowerBoundInclusive,
                upperBound: (_this_parent_q_upperBoundIndexKey = this.parent.q.upperBoundIndexKey) !== null && _this_parent_q_upperBoundIndexKey !== void 0 ? _this_parent_q_upperBoundIndexKey : [],
                upperBoundInclusive: this.parent.q.upperBoundInclusive
            },
            indexRange: this.parent.indexRange
        };
    }
    /**
     * inner() is as if you had used ctx.db to construct the query.
     */ inner() {
        const { db, table, index, order, indexRange } = this.reflect();
        return db.query(table).withIndex(index, indexRange).order(order);
    }
    iterWithKeys() {
        const { indexFields } = this.reflect();
        const iterable = this.inner();
        return {
            [Symbol.asyncIterator] () {
                const iterator = iterable[Symbol.asyncIterator]();
                return {
                    async next () {
                        const result = await iterator.next();
                        if (result.done) {
                            return {
                                done: true,
                                value: undefined
                            };
                        }
                        return {
                            done: false,
                            value: [
                                result.value,
                                getIndexKey(result.value, indexFields)
                            ]
                        };
                    }
                };
            }
        };
    }
    getOrder() {
        return this.order;
    }
    getEqualityIndexFilter() {
        return this.parent.q.equalityIndexFilter;
    }
    getIndexFields() {
        return this.parent.q.indexFields;
    }
    narrow(indexBounds) {
        const { db, table, index, order, bounds, schema } = this.reflect();
        let maxLowerBound = bounds.lowerBound;
        let maxLowerBoundInclusive = bounds.lowerBoundInclusive;
        if (compareKeys({
            value: indexBounds.lowerBound,
            kind: indexBounds.lowerBoundInclusive ? "predecessor" : "successor"
        }, {
            value: bounds.lowerBound,
            kind: bounds.lowerBoundInclusive ? "predecessor" : "successor"
        }) > 0) {
            maxLowerBound = indexBounds.lowerBound;
            maxLowerBoundInclusive = indexBounds.lowerBoundInclusive;
        }
        let minUpperBound = bounds.upperBound;
        let minUpperBoundInclusive = bounds.upperBoundInclusive;
        if (compareKeys({
            value: indexBounds.upperBound,
            kind: indexBounds.upperBoundInclusive ? "successor" : "predecessor"
        }, {
            value: bounds.upperBound,
            kind: bounds.upperBoundInclusive ? "successor" : "predecessor"
        }) < 0) {
            minUpperBound = indexBounds.upperBound;
            minUpperBoundInclusive = indexBounds.upperBoundInclusive;
        }
        return streamIndexRange(db, schema, table, index, {
            lowerBound: maxLowerBound,
            lowerBoundInclusive: maxLowerBoundInclusive,
            upperBound: minUpperBound,
            upperBoundInclusive: minUpperBoundInclusive
        }, order);
    }
    constructor(parent, order){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "parent", void 0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "order", void 0);
        this.parent = parent;
        this.order = order;
    }
}
function streamIndexRange(db, schema, table, index, bounds, order) {
    const indexFields = getIndexFields(table, index, schema);
    const splitBounds = splitRange(indexFields, order, bounds.lowerBound, bounds.upperBound, bounds.lowerBoundInclusive ? "gte" : "gt", bounds.upperBoundInclusive ? "lte" : "lt");
    const subQueries = splitBounds.map((splitBound)=>stream(db, schema).query(table).withIndex(index, rangeToQuery(splitBound)).order(order));
    return new ConcatStreams(...subQueries);
}
var _hasSuffix = /*#__PURE__*/ new WeakMap(), _canLowerBound = /*#__PURE__*/ new WeakSet(), _canUpperBound = /*#__PURE__*/ new WeakSet();
class ReflectIndexRange {
    eq(field, value) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canLowerBound, canLowerBound).call(this, field) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canUpperBound, canUpperBound).call(this, field)) {
            throw new Error("Cannot use eq on field '".concat(field, "'"));
        }
        var _this_lowerBoundIndexKey;
        this.lowerBoundIndexKey = (_this_lowerBoundIndexKey = this.lowerBoundIndexKey) !== null && _this_lowerBoundIndexKey !== void 0 ? _this_lowerBoundIndexKey : [];
        this.lowerBoundIndexKey.push(value);
        var _this_upperBoundIndexKey;
        this.upperBoundIndexKey = (_this_upperBoundIndexKey = this.upperBoundIndexKey) !== null && _this_upperBoundIndexKey !== void 0 ? _this_upperBoundIndexKey : [];
        this.upperBoundIndexKey.push(value);
        this.equalityIndexFilter.push(value);
        return this;
    }
    lt(field, value) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canUpperBound, canUpperBound).call(this, field)) {
            throw new Error("Cannot use lt on field '".concat(field, "'"));
        }
        var _this_upperBoundIndexKey;
        this.upperBoundIndexKey = (_this_upperBoundIndexKey = this.upperBoundIndexKey) !== null && _this_upperBoundIndexKey !== void 0 ? _this_upperBoundIndexKey : [];
        this.upperBoundIndexKey.push(value);
        this.upperBoundInclusive = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix, true);
        return this;
    }
    lte(field, value) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canUpperBound, canUpperBound).call(this, field)) {
            throw new Error("Cannot use lte on field '".concat(field, "'"));
        }
        var _this_upperBoundIndexKey;
        this.upperBoundIndexKey = (_this_upperBoundIndexKey = this.upperBoundIndexKey) !== null && _this_upperBoundIndexKey !== void 0 ? _this_upperBoundIndexKey : [];
        this.upperBoundIndexKey.push(value);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix, true);
        return this;
    }
    gt(field, value) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canLowerBound, canLowerBound).call(this, field)) {
            throw new Error("Cannot use gt on field '".concat(field, "'"));
        }
        var _this_lowerBoundIndexKey;
        this.lowerBoundIndexKey = (_this_lowerBoundIndexKey = this.lowerBoundIndexKey) !== null && _this_lowerBoundIndexKey !== void 0 ? _this_lowerBoundIndexKey : [];
        this.lowerBoundIndexKey.push(value);
        this.lowerBoundInclusive = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix, true);
        return this;
    }
    gte(field, value) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canLowerBound, canLowerBound).call(this, field)) {
            throw new Error("Cannot use gte on field '".concat(field, "'"));
        }
        var _this_lowerBoundIndexKey;
        this.lowerBoundIndexKey = (_this_lowerBoundIndexKey = this.lowerBoundIndexKey) !== null && _this_lowerBoundIndexKey !== void 0 ? _this_lowerBoundIndexKey : [];
        this.lowerBoundIndexKey.push(value);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix, true);
        return this;
    }
    constructor(indexFields){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canLowerBound);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_method_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _canUpperBound);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "indexFields", void 0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix, {
            writable: true,
            value: false
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "lowerBoundIndexKey", undefined);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "lowerBoundInclusive", true);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "upperBoundIndexKey", undefined);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "upperBoundInclusive", true);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "equalityIndexFilter", []);
        this.indexFields = indexFields;
    }
}
function canLowerBound(field) {
    var _this_lowerBoundIndexKey, _this_upperBoundIndexKey;
    var _this_lowerBoundIndexKey_length;
    const currentLowerBoundLength = (_this_lowerBoundIndexKey_length = (_this_lowerBoundIndexKey = this.lowerBoundIndexKey) === null || _this_lowerBoundIndexKey === void 0 ? void 0 : _this_lowerBoundIndexKey.length) !== null && _this_lowerBoundIndexKey_length !== void 0 ? _this_lowerBoundIndexKey_length : 0;
    var _this_upperBoundIndexKey_length;
    const currentUpperBoundLength = (_this_upperBoundIndexKey_length = (_this_upperBoundIndexKey = this.upperBoundIndexKey) === null || _this_upperBoundIndexKey === void 0 ? void 0 : _this_upperBoundIndexKey.length) !== null && _this_upperBoundIndexKey_length !== void 0 ? _this_upperBoundIndexKey_length : 0;
    if (currentLowerBoundLength > currentUpperBoundLength) {
        // Already have a lower bound.
        return false;
    }
    if (currentLowerBoundLength === currentUpperBoundLength && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix)) {
        // Already have a lower bound and an upper bound.
        return false;
    }
    return currentLowerBoundLength < this.indexFields.length && this.indexFields[currentLowerBoundLength] === field;
}
function canUpperBound(field) {
    var _this_lowerBoundIndexKey, _this_upperBoundIndexKey;
    var _this_lowerBoundIndexKey_length;
    const currentLowerBoundLength = (_this_lowerBoundIndexKey_length = (_this_lowerBoundIndexKey = this.lowerBoundIndexKey) === null || _this_lowerBoundIndexKey === void 0 ? void 0 : _this_lowerBoundIndexKey.length) !== null && _this_lowerBoundIndexKey_length !== void 0 ? _this_lowerBoundIndexKey_length : 0;
    var _this_upperBoundIndexKey_length;
    const currentUpperBoundLength = (_this_upperBoundIndexKey_length = (_this_upperBoundIndexKey = this.upperBoundIndexKey) === null || _this_upperBoundIndexKey === void 0 ? void 0 : _this_upperBoundIndexKey.length) !== null && _this_upperBoundIndexKey_length !== void 0 ? _this_upperBoundIndexKey_length : 0;
    if (currentUpperBoundLength > currentLowerBoundLength) {
        // Already have an upper bound.
        return false;
    }
    if (currentLowerBoundLength === currentUpperBoundLength && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _hasSuffix)) {
        // Already have a lower bound and an upper bound.
        return false;
    }
    return currentUpperBoundLength < this.indexFields.length && this.indexFields[currentUpperBoundLength] === field;
}
function mergedStream(streams, orderByIndexFields) {
    return new MergedStream(streams, orderByIndexFields);
}
var _order = /*#__PURE__*/ new WeakMap(), _streams = /*#__PURE__*/ new WeakMap(), _equalityIndexFilter = /*#__PURE__*/ new WeakMap(), _indexFields = /*#__PURE__*/ new WeakMap();
class MergedStream extends QueryStream {
    iterWithKeys() {
        const iterables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams).map((stream)=>stream.iterWithKeys());
        const comparisonInversion = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order) === "asc" ? 1 : -1;
        return {
            [Symbol.asyncIterator] () {
                const iterators = iterables.map((iterable)=>iterable[Symbol.asyncIterator]());
                const results = Array.from({
                    length: iterators.length
                }, ()=>({
                        done: false,
                        value: undefined
                    }));
                return {
                    async next () {
                        // Fill results from iterators with no value yet.
                        await Promise.all(iterators.map(async (iterator, i)=>{
                            if (!results[i].done && !results[i].value) {
                                const result = await iterator.next();
                                results[i] = result;
                            }
                        }));
                        // Find index for the value with the lowest index key.
                        let minIndexKeyAndIndex = undefined;
                        for(let i = 0; i < results.length; i++){
                            const result = results[i];
                            if (result.done || !result.value) {
                                continue;
                            }
                            const [_, resultIndexKey] = result.value;
                            if (minIndexKeyAndIndex === undefined) {
                                minIndexKeyAndIndex = [
                                    resultIndexKey,
                                    i
                                ];
                                continue;
                            }
                            const [prevMin, _prevMinIndex] = minIndexKeyAndIndex;
                            if (compareKeys({
                                value: resultIndexKey,
                                kind: "exact"
                            }, {
                                value: prevMin,
                                kind: "exact"
                            }) * comparisonInversion < 0) {
                                minIndexKeyAndIndex = [
                                    resultIndexKey,
                                    i
                                ];
                            }
                        }
                        if (minIndexKeyAndIndex === undefined) {
                            return {
                                done: true,
                                value: undefined
                            };
                        }
                        const [_, minIndex] = minIndexKeyAndIndex;
                        const result = results[minIndex].value;
                        // indicate that we've used this result
                        results[minIndex].value = undefined;
                        return {
                            done: false,
                            value: result
                        };
                    }
                };
            }
        };
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order);
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter);
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields);
    }
    narrow(indexBounds) {
        return new MergedStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams).map((stream)=>stream.narrow(indexBounds)), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields));
    }
    constructor(streams, orderByIndexFields){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields, {
            writable: true,
            value: void 0
        });
        if (streams.length === 0) {
            throw new Error("Cannot union empty array of streams");
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order, allSame(streams.map((stream)=>stream.getOrder()), "Cannot merge streams with different orders"));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams, streams.map((stream)=>new OrderByStream(stream, orderByIndexFields)));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields, allSame((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams).map((stream)=>stream.getIndexFields()), "Cannot merge streams with different index fields. Consider using .orderBy()"));
        // Calculate common prefix of equality index filters.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter, commonPrefix((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams).map((stream)=>stream.getEqualityIndexFilter())));
    }
}
function allSame(values, errorMessage) {
    const first = values[0];
    for (const value of values){
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareValues"])(value, first)) {
            throw new Error(errorMessage);
        }
    }
    return first;
}
function commonPrefix(values) {
    let commonPrefix = values[0];
    for (const value of values){
        for(let i = 0; i < commonPrefix.length; i++){
            if (i >= value.length || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareValues"])(commonPrefix[i], value[i])) {
                commonPrefix = commonPrefix.slice(0, i);
                break;
            }
        }
    }
    return commonPrefix;
}
var _order1 = /*#__PURE__*/ new WeakMap(), _streams1 = /*#__PURE__*/ new WeakMap(), _equalityIndexFilter1 = /*#__PURE__*/ new WeakMap(), _indexFields1 = /*#__PURE__*/ new WeakMap();
/**
 * Concatenate multiple streams into a single stream.
 * This assumes that the streams correspond to disjoint index ranges,
 * and are provided in the same order as the index ranges.
 *
 * e.g. ```ts
 * new ConcatStreams(
 *   stream(db, schema).query("messages").withIndex("by_author", q => q.eq("author", "user1")),
 *   stream(db, schema).query("messages").withIndex("by_author", q => q.eq("author", "user2")),
 * )
 * ```
 *
 * is valid, but if the stream arguments were reversed, or the queries were
 * `.order("desc")`, it would be invalid.
 *
 * It's not recommended to use `ConcatStreams` directly, since it has the same
 * behavior as `MergedStream`, but with fewer runtime checks.
 */ class ConcatStreams extends QueryStream {
    iterWithKeys() {
        const iterables = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams1).map((stream)=>stream.iterWithKeys());
        const comparisonInversion = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order1) === "asc" ? 1 : -1;
        let previousIndexKey = undefined;
        return {
            [Symbol.asyncIterator] () {
                const iterators = iterables.map((iterable)=>iterable[Symbol.asyncIterator]());
                return {
                    async next () {
                        while(iterators.length > 0){
                            const result = await iterators[0].next();
                            if (result.done) {
                                iterators.shift();
                            } else {
                                const [_, indexKey] = result.value;
                                if (previousIndexKey !== undefined && compareKeys({
                                    value: previousIndexKey,
                                    kind: "exact"
                                }, {
                                    value: indexKey,
                                    kind: "exact"
                                }) * comparisonInversion > 0) {
                                    throw new Error("ConcatStreams in wrong order: ".concat(JSON.stringify(previousIndexKey), ", ").concat(JSON.stringify(indexKey)));
                                }
                                previousIndexKey = indexKey;
                                return result;
                            }
                        }
                        return {
                            done: true,
                            value: undefined
                        };
                    }
                };
            }
        };
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order1);
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter1);
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields1);
    }
    narrow(indexBounds) {
        return new ConcatStreams(...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams1).map((stream)=>stream.narrow(indexBounds)));
    }
    constructor(...streams){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order1, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams1, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter1, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields1, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _streams1, streams);
        if (streams.length === 0) {
            throw new Error("Cannot concat empty array of streams");
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order1, allSame(streams.map((stream)=>stream.getOrder()), "Cannot concat streams with different orders. Consider using .orderBy()"));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields1, allSame(streams.map((stream)=>stream.getIndexFields()), "Cannot concat streams with different index fields. Consider using .orderBy()"));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter1, commonPrefix(streams.map((stream)=>stream.getEqualityIndexFilter())));
    }
}
var _outerStream = /*#__PURE__*/ new WeakMap(), _outerIterator = /*#__PURE__*/ new WeakMap(), _currentOuterItem = /*#__PURE__*/ new WeakMap(), _mapper = /*#__PURE__*/ new WeakMap(), _mappedIndexFields = /*#__PURE__*/ new WeakMap();
class FlatMapStreamIterator {
    singletonSkipInnerStream() {
        // If the outer stream is a filtered value, yield a singleton
        // filtered value from the inner stream, with index key of nulls.
        const indexKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields).map(()=>null);
        return new SingletonStream(null, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerStream).getOrder(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields), indexKey, indexKey);
    }
    async setCurrentOuterItem(item) {
        const [t, indexKey] = item;
        let innerStream;
        if (t === null) {
            innerStream = this.singletonSkipInnerStream();
        } else {
            innerStream = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper).call(this, t);
            if (!equalIndexFields(innerStream.getIndexFields(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields))) {
                throw new Error("FlatMapStream: inner stream has different index fields than expected: ".concat(JSON.stringify(innerStream.getIndexFields()), " vs ").concat(JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields))));
            }
            if (innerStream.getOrder() !== (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerStream).getOrder()) {
                throw new Error("FlatMapStream: inner stream has different order than outer stream: ".concat(innerStream.getOrder(), " vs ").concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerStream).getOrder()));
            }
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem, {
            t,
            indexKey,
            innerIterator: innerStream.iterWithKeys()[Symbol.asyncIterator](),
            count: 0
        });
    }
    async next() {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem) === null) {
            const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerIterator).next();
            if (result.done) {
                return {
                    done: true,
                    value: undefined
                };
            }
            await this.setCurrentOuterItem(result.value);
            return await this.next();
        }
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem).innerIterator.next();
        if (result.done) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem).count > 0) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem, null);
            } else {
                // The inner stream was completely empty, so we should inject a null
                // (which will be skipped by everything except the maximumRowsRead count)
                // to account for the cost of the outer stream.
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem).innerIterator = this.singletonSkipInnerStream().iterWithKeys()[Symbol.asyncIterator]();
            }
            return await this.next();
        }
        const [u, indexKey] = result.value;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_update$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem).value.count++;
        const fullIndexKey = [
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem).indexKey,
            ...indexKey
        ];
        return {
            done: false,
            value: [
                u,
                fullIndexKey
            ]
        };
    }
    constructor(outerStream, mapper, mappedIndexFields){
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerStream, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerIterator, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _currentOuterItem, {
            writable: true,
            value: null
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerIterator, outerStream.iterWithKeys()[Symbol.asyncIterator]());
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _outerStream, outerStream);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper, mapper);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields, mappedIndexFields);
    }
}
var _stream = /*#__PURE__*/ new WeakMap(), _mapper1 = /*#__PURE__*/ new WeakMap(), _mappedIndexFields1 = /*#__PURE__*/ new WeakMap();
class FlatMapStream extends QueryStream {
    iterWithKeys() {
        const outerStream = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream);
        const mapper = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper1);
        const mappedIndexFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields1);
        return {
            [Symbol.asyncIterator] () {
                return new FlatMapStreamIterator(outerStream, mapper, mappedIndexFields);
            }
        };
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream).getOrder();
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream).getEqualityIndexFilter();
    }
    getIndexFields() {
        return [
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream).getIndexFields(),
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields1)
        ];
    }
    narrow(indexBounds) {
        const outerLength = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream).getIndexFields().length;
        const outerLowerBound = indexBounds.lowerBound.slice(0, outerLength);
        const outerUpperBound = indexBounds.upperBound.slice(0, outerLength);
        const innerLowerBound = indexBounds.lowerBound.slice(outerLength);
        const innerUpperBound = indexBounds.upperBound.slice(outerLength);
        const outerIndexBounds = {
            lowerBound: outerLowerBound,
            lowerBoundInclusive: innerLowerBound.length === 0 ? indexBounds.lowerBoundInclusive : true,
            upperBound: outerUpperBound,
            upperBoundInclusive: innerUpperBound.length === 0 ? indexBounds.upperBoundInclusive : true
        };
        const innerIndexBounds = {
            lowerBound: innerLowerBound,
            lowerBoundInclusive: innerLowerBound.length === 0 ? true : indexBounds.lowerBoundInclusive,
            upperBound: innerUpperBound,
            upperBoundInclusive: innerUpperBound.length === 0 ? true : indexBounds.upperBoundInclusive
        };
        return new FlatMapStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream).narrow(outerIndexBounds), async (t)=>{
            const innerStream = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper1).call(this, t);
            return innerStream.narrow(innerIndexBounds);
        }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields1));
    }
    constructor(stream, mapper, mappedIndexFields){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper1, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields1, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream, stream);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mapper1, mapper);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _mappedIndexFields1, mappedIndexFields);
    }
}
var _value = /*#__PURE__*/ new WeakMap(), _order2 = /*#__PURE__*/ new WeakMap(), _indexFields2 = /*#__PURE__*/ new WeakMap(), _indexKey = /*#__PURE__*/ new WeakMap(), _equalityIndexFilter2 = /*#__PURE__*/ new WeakMap();
class SingletonStream extends QueryStream {
    iterWithKeys() {
        const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _value);
        const indexKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey);
        return {
            [Symbol.asyncIterator] () {
                let sent = false;
                return {
                    async next () {
                        if (sent) {
                            return {
                                done: true,
                                value: undefined
                            };
                        }
                        sent = true;
                        return {
                            done: false,
                            value: [
                                value,
                                indexKey
                            ]
                        };
                    }
                };
            }
        };
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order2);
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields2);
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter2);
    }
    narrow(indexBounds) {
        const compareLowerBound = compareKeys({
            value: indexBounds.lowerBound,
            kind: indexBounds.lowerBoundInclusive ? "exact" : "successor"
        }, {
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey),
            kind: "exact"
        });
        const compareUpperBound = compareKeys({
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey),
            kind: "exact"
        }, {
            value: indexBounds.upperBound,
            kind: indexBounds.upperBoundInclusive ? "exact" : "predecessor"
        });
        // If lowerBound <= this.indexKey <= upperBound, return this.value
        if (compareLowerBound <= 0 && compareUpperBound <= 0) {
            return new SingletonStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _value), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter2));
        }
        return new EmptyStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order2), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields2));
    }
    constructor(value, order = "asc", indexFields, indexKey, equalityIndexFilter){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _value, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order2, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields2, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter2, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _value, value);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order2, order);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields2, indexFields);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexKey, indexKey);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _equalityIndexFilter2, equalityIndexFilter);
        if (indexKey.length !== indexFields.length) {
            throw new Error("indexKey must have the same length as indexFields: ".concat(JSON.stringify(indexKey), " vs ").concat(JSON.stringify(indexFields)));
        }
    }
}
var _order3 = /*#__PURE__*/ new WeakMap(), _indexFields3 = /*#__PURE__*/ new WeakMap();
class EmptyStream extends QueryStream {
    iterWithKeys() {
        return {
            [Symbol.asyncIterator] () {
                return {
                    async next () {
                        return {
                            done: true,
                            value: undefined
                        };
                    }
                };
            }
        };
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order3);
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields3);
    }
    getEqualityIndexFilter() {
        return [];
    }
    narrow(_indexBounds) {
        return this;
    }
    constructor(order, indexFields){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order3, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields3, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _order3, order);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields3, indexFields);
    }
}
function normalizeIndexFields(indexFields) {
    // Append _creationTime and _id to the index fields if they're not already there
    if (!indexFields.includes("_creationTime")) {
        // With one exception: if indexFields is ["_id"], we don't need to add _creationTime
        if (indexFields.length !== 1 || indexFields[0] !== "_id") {
            indexFields.push("_creationTime");
        }
    }
    if (!indexFields.includes("_id")) {
        indexFields.push("_id");
    }
}
// Given a stream ordered by `indexFields`, where the first `equalityIndexLength`
// fields are bounded by equality filters, return a generator of the possible
// index fields used for ordering.
function* getOrderingIndexFields(stream) {
    const streamEqualityIndexLength = stream.getEqualityIndexFilter().length;
    const streamIndexFields = stream.getIndexFields();
    for(let i = 0; i <= streamEqualityIndexLength; i++){
        yield streamIndexFields.slice(i);
    }
}
var _staticFilter = /*#__PURE__*/ new WeakMap(), _stream1 = /*#__PURE__*/ new WeakMap(), _indexFields4 = /*#__PURE__*/ new WeakMap();
class OrderByStream extends QueryStream {
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1).getOrder();
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1).getEqualityIndexFilter().slice((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter).length);
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields4);
    }
    iterWithKeys() {
        const iterable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1).iterWithKeys();
        const staticFilter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter);
        return {
            [Symbol.asyncIterator] () {
                const iterator = iterable[Symbol.asyncIterator]();
                return {
                    async next () {
                        const result = await iterator.next();
                        if (result.done) {
                            return result;
                        }
                        const [doc, indexKey] = result.value;
                        return {
                            done: false,
                            value: [
                                doc,
                                indexKey.slice(staticFilter.length)
                            ]
                        };
                    }
                };
            }
        };
    }
    narrow(indexBounds) {
        return new OrderByStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1).narrow({
            lowerBound: [
                ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter),
                ...indexBounds.lowerBound
            ],
            lowerBoundInclusive: indexBounds.lowerBoundInclusive,
            upperBound: [
                ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter),
                ...indexBounds.upperBound
            ],
            upperBoundInclusive: indexBounds.upperBoundInclusive
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields4));
    }
    constructor(stream, indexFields){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields4, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream1, stream);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields4, indexFields);
        normalizeIndexFields((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _indexFields4));
        // indexFields must be a suffix of the stream's index fields, and include
        // all of the non-equality index fields.
        const streamIndexFields = stream.getIndexFields();
        const orderingIndexFields = Array.from(getOrderingIndexFields(stream));
        if (!orderingIndexFields.some((orderingIndexFields)=>equalIndexFields(orderingIndexFields, indexFields))) {
            throw new Error("indexFields must be some sequence of fields the stream is ordered by: ".concat(JSON.stringify(indexFields), ", ").concat(JSON.stringify(streamIndexFields), " (").concat(stream.getEqualityIndexFilter().length, " equality fields)"));
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _staticFilter, stream.getEqualityIndexFilter().slice(0, streamIndexFields.length - indexFields.length));
    }
}
var _distinctIndexFieldsLength = /*#__PURE__*/ new WeakMap(), _stream2 = /*#__PURE__*/ new WeakMap(), _distinctIndexFields = /*#__PURE__*/ new WeakMap();
class DistinctStream extends QueryStream {
    iterWithKeys() {
        const stream = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2);
        const distinctIndexFieldsLength = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFieldsLength);
        return {
            [Symbol.asyncIterator] () {
                let currentStream = stream;
                let currentIterator = currentStream.iterWithKeys()[Symbol.asyncIterator]();
                return {
                    async next () {
                        const result = await currentIterator.next();
                        if (result.done) {
                            return {
                                done: true,
                                value: undefined
                            };
                        }
                        const [doc, indexKey] = result.value;
                        if (doc === null) {
                            // If the original stream has a post-filter `.filterWith`, we will
                            // iterate over filtered items -- possibly many with the same set of
                            // distinct index fields -- before finding the first item for the set
                            // of distinct index fields.
                            // So it's recommended to put `.filterWith` after `.distinct`.
                            return {
                                done: false,
                                value: [
                                    null,
                                    indexKey
                                ]
                            };
                        }
                        const distinctIndexKey = indexKey.slice(0, distinctIndexFieldsLength);
                        if (stream.getOrder() === "asc") {
                            currentStream = currentStream.narrow({
                                lowerBound: distinctIndexKey,
                                lowerBoundInclusive: false,
                                upperBound: [],
                                upperBoundInclusive: true
                            });
                        } else {
                            currentStream = currentStream.narrow({
                                lowerBound: [],
                                lowerBoundInclusive: true,
                                upperBound: distinctIndexKey,
                                upperBoundInclusive: false
                            });
                        }
                        currentIterator = currentStream.iterWithKeys()[Symbol.asyncIterator]();
                        return result;
                    }
                };
            }
        };
    }
    narrow(indexBounds) {
        const indexBoundsPrefix = {
            ...indexBounds,
            lowerBound: indexBounds.lowerBound.slice(0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFieldsLength)),
            upperBound: indexBounds.upperBound.slice(0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFieldsLength))
        };
        return new DistinctStream((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2).narrow(indexBoundsPrefix), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFields));
    }
    getOrder() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2).getOrder();
    }
    getIndexFields() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2).getIndexFields();
    }
    getEqualityIndexFilter() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_get$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2).getEqualityIndexFilter();
    }
    constructor(stream, distinctIndexFields){
        super(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFieldsLength, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2, {
            writable: true,
            value: void 0
        }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_init$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFields, {
            writable: true,
            value: void 0
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _stream2, stream);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFields, distinctIndexFields);
        // distinctIndexFields must be a prefix of the stream's ordering index fields
        let distinctIndexFieldsLength = undefined;
        for (const orderingIndexFields of getOrderingIndexFields(stream)){
            const prefix = orderingIndexFields.slice(0, distinctIndexFields.length);
            if (equalIndexFields(prefix, distinctIndexFields)) {
                const equalityLength = stream.getIndexFields().length - orderingIndexFields.length;
                distinctIndexFieldsLength = equalityLength + distinctIndexFields.length;
                break;
            }
        }
        if (distinctIndexFieldsLength === undefined) {
            throw new Error("distinctIndexFields must be a prefix of the stream's ordering index fields: ".concat(JSON.stringify(distinctIndexFields), ", ").concat(JSON.stringify(stream.getIndexFields()), " (").concat(stream.getEqualityIndexFilter().length, " equality fields)"));
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_class_private_field_set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, _distinctIndexFieldsLength, distinctIndexFieldsLength);
    }
}
function equalIndexFields(indexFields1, indexFields2) {
    if (indexFields1.length !== indexFields2.length) {
        return false;
    }
    for(let i = 0; i < indexFields1.length; i++){
        if (indexFields1[i] !== indexFields2[i]) {
            return false;
        }
    }
    return true;
}
function getValueAtIndex(v, index) {
    if (index >= v.length) {
        return undefined;
    }
    return {
        kind: "found",
        value: v[index]
    };
}
function compareDanglingSuffix(shorterKeyKind, longerKeyKind, shorterKey, longerKey) {
    if (shorterKeyKind === "exact" && longerKeyKind === "exact") {
        throw new Error("Exact keys are not the same length:  ".concat(JSON.stringify(shorterKey.value), ", ").concat(JSON.stringify(longerKey.value)));
    }
    if (shorterKeyKind === "exact") {
        throw new Error("Exact key is shorter than prefix: ".concat(JSON.stringify(shorterKey.value), ", ").concat(JSON.stringify(longerKey.value)));
    }
    if (shorterKeyKind === "predecessor" && longerKeyKind === "successor") {
        // successor is longer than predecessor, so it is bigger
        return -1;
    }
    if (shorterKeyKind === "successor" && longerKeyKind === "predecessor") {
        // successor is shorter than predecessor, so it is larger
        return 1;
    }
    if (shorterKeyKind === "predecessor" && longerKeyKind === "predecessor") {
        // predecessor of [2, 3] contains [2, 1] while predecessor of [2] doesn't, so longer predecessors are larger
        return -1;
    }
    if (shorterKeyKind === "successor" && longerKeyKind === "successor") {
        // successor of [2, 3] contains [2, 4] while successor of [2] doesn't, so longer successors are smaller
        return 1;
    }
    if (shorterKeyKind === "predecessor" && longerKeyKind === "exact") {
        return -1;
    }
    if (shorterKeyKind === "successor" && longerKeyKind === "exact") {
        return 1;
    }
    throw new Error("Unexpected key kinds: ".concat(shorterKeyKind, ", ").concat(longerKeyKind));
}
function compareKeys(key1, key2) {
    let i = 0;
    while(i < Math.max(key1.value.length, key2.value.length)){
        const v1 = getValueAtIndex(key1.value, i);
        const v2 = getValueAtIndex(key2.value, i);
        if (v1 === undefined) {
            return compareDanglingSuffix(key1.kind, key2.kind, key1, key2);
        }
        if (v2 === undefined) {
            return -1 * compareDanglingSuffix(key2.kind, key1.kind, key2, key1);
        }
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$compare$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compareValues"])(v1.value, v2.value);
        if (result !== 0) {
            return result;
        }
        // if the prefixes are the same so far, keep going with the comparison
        i++;
    }
    if (key1.kind === key2.kind) {
        return 0;
    }
    // keys are the same length and values
    if (key1.kind === "exact") {
        if (key2.kind === "successor") {
            return -1;
        } else {
            return 1;
        }
    }
    if (key1.kind === "predecessor") {
        return -1;
    }
    if (key1.kind === "successor") {
        return 1;
    }
    // Note: we're being cautious here, but we aren't checking above that the type
    // of key2.kind is valid...
    throw new Error("Unexpected key kind: ".concat(key1.kind));
}
function serializeCursor(key) {
    return JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convexToJson"])(key.map((v)=>v === undefined ? "undefined" : typeof v === "string" && v.endsWith("undefined") ? // or "_undefined" etc, we escape it.
        "_" + v : v)));
}
function deserializeCursor(cursor) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$values$2f$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["jsonToConvex"])(JSON.parse(cursor)).map((v)=>{
        if (typeof v === "string") {
            if (v === "undefined") {
                // This is a special case for the undefined value.
                // It's not a valid value in the index, but it's a valid value in the
                // cursor.
                return undefined;
            }
            if (v.endsWith("undefined")) {
                // in the unlikely case their string was "undefined" it was changed to
                // "_undefined" in the serialization process.
                // NB: if their string was "_undefined" it was changed to
                // "__undefined" in the serialization process, and so on.
                return v.slice(1);
            }
        }
        return v;
    });
}
}),
"[project]/node_modules/convex-helpers/server/cors.js [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/**
 * This file defines a CorsHttpRouter class that extends Convex's HttpRouter.
 * It provides CORS (Cross-Origin Resource Sharing) support for HTTP routes.
 *
 * The CorsHttpRouter:
 * 1. Allows specifying allowed origins for CORS.
 * 2. Overrides the route method to add CORS headers to all non-OPTIONS requests.
 * 3. Automatically adds an OPTIONS route to handle CORS preflight requests.
 * 4. Uses the handleCors helper function to apply CORS headers consistently.
 *
 * This router simplifies the process of making Convex HTTP endpoints
 * accessible to web applications hosted on different domains while
 * maintaining proper CORS configuration.
 */ __turbopack_context__.s([
    "DEFAULT_EXPOSED_HEADERS",
    ()=>DEFAULT_EXPOSED_HEADERS,
    "corsRouter",
    ()=>corsRouter,
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/server/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$impl$2f$registration_impl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/server/impl/registration_impl.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$router$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/convex/dist/esm/server/router.js [app-client] (ecmascript)");
;
const DEFAULT_EXPOSED_HEADERS = [
    // For Range requests
    "Content-Range",
    "Accept-Ranges"
];
const corsRouter = (http, corsConfig)=>{
    const allowedExactMethodsByPath = new Map();
    const allowedPrefixMethodsByPath = new Map();
    return {
        http,
        route: (routeSpec)=>{
            const tempRouter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$router$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["httpRouter"])();
            tempRouter.exactRoutes = http.exactRoutes;
            tempRouter.prefixRoutes = http.prefixRoutes;
            const config = {
                ...corsConfig,
                ...routeSpec
            };
            const httpCorsHandler = handleCors({
                originalHandler: routeSpec.handler,
                allowedMethods: [
                    routeSpec.method
                ],
                ...config
            });
            /**
             * Figure out what kind of route we're adding: exact or prefix and handle
             * accordingly.
             */ if ("path" in routeSpec) {
                let methods = allowedExactMethodsByPath.get(routeSpec.path);
                if (!methods) {
                    methods = new Set();
                    allowedExactMethodsByPath.set(routeSpec.path, methods);
                }
                methods.add(routeSpec.method);
                tempRouter.route({
                    path: routeSpec.path,
                    method: routeSpec.method,
                    handler: httpCorsHandler
                });
                handleExactRoute(tempRouter, routeSpec, config, Array.from(methods));
            } else {
                let methods = allowedPrefixMethodsByPath.get(routeSpec.pathPrefix);
                if (!methods) {
                    methods = new Set();
                    allowedPrefixMethodsByPath.set(routeSpec.pathPrefix, methods);
                }
                methods.add(routeSpec.method);
                tempRouter.route({
                    pathPrefix: routeSpec.pathPrefix,
                    method: routeSpec.method,
                    handler: httpCorsHandler
                });
                handlePrefixRoute(tempRouter, routeSpec, config, Array.from(methods));
            }
            /**
             * Copy the routes from the temporary router to the main router.
             */ http.exactRoutes = new Map(tempRouter.exactRoutes);
            http.prefixRoutes = new Map(tempRouter.prefixRoutes);
        }
    };
};
/**
 * Handles exact route matching and adds OPTIONS handler.
 * @param tempRouter Temporary router instance.
 * @param routeSpec Route specification for exact matching.
 */ function handleExactRoute(tempRouter, routeSpec, config, allowedMethods) {
    const currentMethodsForPath = tempRouter.exactRoutes.get(routeSpec.path);
    /**
     * Add the OPTIONS handler for the given path
     */ const optionsHandler = createOptionsHandlerForMethods(allowedMethods, config);
    currentMethodsForPath === null || currentMethodsForPath === void 0 ? void 0 : currentMethodsForPath.set("OPTIONS", optionsHandler);
    tempRouter.exactRoutes.set(routeSpec.path, new Map(currentMethodsForPath));
}
/**
 * Handles prefix route matching and adds OPTIONS handler.
 * @param tempRouter Temporary router instance.
 * @param routeSpec Route specification for prefix matching.
 */ function handlePrefixRoute(tempRouter, routeSpec, config, allowedMethods) {
    /**
     * prefixRoutes is structured differently than exactRoutes. It's defined as
     * a Map<string, Map<string, PublicHttpAction>> where the KEY is the
     * METHOD and the VALUE is a map of paths and handlers.
     */ const optionsHandler = createOptionsHandlerForMethods(allowedMethods, config);
    const optionsPrefixes = tempRouter.prefixRoutes.get("OPTIONS") || new Map();
    optionsPrefixes.set(routeSpec.pathPrefix, optionsHandler);
    tempRouter.prefixRoutes.set("OPTIONS", optionsPrefixes);
}
/**
 * Creates an OPTIONS handler for the given HTTP methods.
 * @param methods Array of HTTP methods to be allowed.
 * @returns A CORS-enabled OPTIONS handler.
 */ function createOptionsHandlerForMethods(methods, config) {
    return handleCors({
        ...config,
        allowedMethods: methods
    });
}
const __TURBOPACK__default__export__ = corsRouter;
/**
 * handleCors() is a higher-order function that wraps a Convex HTTP action handler to add CORS support.
 * It allows for customization of allowed HTTP methods and origins for cross-origin requests.
 *
 * The function:
 * 1. Validates and normalizes the allowed HTTP methods.
 * 2. Generates appropriate CORS headers based on the provided configuration.
 * 3. Handles preflight OPTIONS requests automatically.
 * 4. Wraps the original handler to add CORS headers to its response.
 *
 * This helper simplifies the process of making Convex HTTP actions accessible
 * to web applications hosted on different domains.
 */ const SECONDS_IN_A_DAY = 60 * 60 * 24;
/**
 * Example CORS origins:
 * - "*" (allow all origins)
 * - "https://example.com" (allow a specific domain)
 * - "https://*.example.com" (allow all subdomains of example.com)
 * - "https://example1.com, https://example2.com" (allow multiple specific domains)
 * - "null" (allow requests from data URLs or local files)
 */ const handleCors = (param)=>{
    let { originalHandler, allowedMethods = [
        "OPTIONS"
    ], allowedOrigins = [
        "*"
    ], allowedHeaders = [
        "Content-Type"
    ], exposedHeaders = DEFAULT_EXPOSED_HEADERS, allowCredentials = false, browserCacheMaxAge = SECONDS_IN_A_DAY, enforceAllowOrigins = false, debug = false } = param;
    const uniqueMethods = Array.from(new Set(allowedMethods.map((method)=>method.toUpperCase())));
    const filteredMethods = uniqueMethods.filter((method)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$router$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ROUTABLE_HTTP_METHODS"].includes(method));
    if (filteredMethods.length === 0) {
        throw new Error("No valid HTTP methods provided");
    }
    /**
     * Ensure OPTIONS is not duplicated if it was passed in
     * E.g. if allowedMethods = ["GET", "OPTIONS"]
     */ const allowMethods = filteredMethods.includes("OPTIONS") ? filteredMethods.join(", ") : [
        ...filteredMethods
    ].join(", ");
    /**
     * Build up the set of CORS headers
     */ const commonHeaders = {
        Vary: "Origin"
    };
    if (allowCredentials) {
        commonHeaders["Access-Control-Allow-Credentials"] = "true";
    }
    if (exposedHeaders.length > 0) {
        commonHeaders["Access-Control-Expose-Headers"] = exposedHeaders.join(", ");
    }
    async function parseAllowedOrigins(request) {
        return Array.isArray(allowedOrigins) ? allowedOrigins : await allowedOrigins(request);
    }
    // Helper function to check if origin is allowed (including wildcard subdomain matching)
    async function isAllowedOrigin(request) {
        const requestOrigin = request.headers.get("origin");
        if (!requestOrigin) return false;
        return (await parseAllowedOrigins(request)).some((allowed)=>{
            if (allowed === "*") return true;
            if (allowed === requestOrigin) return true;
            if (allowed.startsWith("*.")) {
                const wildcardDomain = allowed.slice(1); // ".bar.com"
                const rootDomain = allowed.slice(2); // "bar.com"
                try {
                    const url = new URL(requestOrigin);
                    return url.protocol === "https:" && (url.hostname.endsWith(wildcardDomain) || url.hostname === rootDomain);
                } catch (e) {
                    return false; // Invalid URL format
                }
            }
            return false;
        });
    }
    /**
     * Return our modified HTTP action
     */ return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$convex$2f$dist$2f$esm$2f$server$2f$impl$2f$registration_impl$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["httpActionGeneric"])(async (ctx, request)=>{
        if (debug) {
            console.log("CORS request", {
                path: request.url,
                origin: request.headers.get("origin"),
                headers: request.headers,
                method: request.method,
                body: request.body
            });
        }
        const requestOrigin = request.headers.get("origin");
        const parsedAllowedOrigins = await parseAllowedOrigins(request);
        if (debug) {
            console.log("allowed origins", parsedAllowedOrigins);
        }
        // Handle origin matching
        let allowOrigins = null;
        if (parsedAllowedOrigins.includes("*") && requestOrigin && !allowCredentials) {
            allowOrigins = requestOrigin;
        } else if (requestOrigin) {
            // Check if the request origin matches any of the allowed origins
            // (including wildcard subdomain matching if configured)
            if (await isAllowedOrigin(request)) {
                allowOrigins = requestOrigin;
            }
        }
        if (enforceAllowOrigins && !allowOrigins) {
            // Origin not allowed
            console.error("Request from origin ".concat(requestOrigin, " blocked, missing from allowed origins: ").concat(parsedAllowedOrigins.join()));
            return new Response(null, {
                status: 403
            });
        }
        /**
         * OPTIONS has no handler and just returns headers
         */ if (request.method === "OPTIONS") {
            const responseHeaders = new Headers({
                ...commonHeaders,
                ...allowOrigins ? {
                    "Access-Control-Allow-Origin": allowOrigins
                } : {},
                "Access-Control-Allow-Methods": allowMethods,
                "Access-Control-Allow-Headers": allowedHeaders.join(", "),
                "Access-Control-Max-Age": browserCacheMaxAge.toString()
            });
            if (debug) {
                console.log("CORS OPTIONS response headers", responseHeaders);
            }
            return new Response(null, {
                status: 204,
                headers: responseHeaders
            });
        }
        /**
         * If the method is not OPTIONS, it must pass a handler
         */ if (!originalHandler) {
            throw new Error("No PublicHttpAction provider to CORS handler");
        }
        /**
         * First, execute the original handler
         */ const innerHandler = "_handler" in originalHandler ? originalHandler["_handler"] : originalHandler;
        const originalResponse = await innerHandler(ctx, request);
        /**
         * Second, get a copy of the original response's headers and add the
         * allow origin header if it's allowed
         */ const newHeaders = new Headers(originalResponse.headers);
        if (allowOrigins) {
            newHeaders.set("Access-Control-Allow-Origin", allowOrigins);
        }
        /**
         * Third, add or update our other CORS headers
         */ Object.entries(commonHeaders).forEach((param)=>{
            let [key, value] = param;
            newHeaders.set(key, value);
        });
        if (debug) {
            console.log("CORS response headers", newHeaders);
        }
        /**
         * Fourth, return the modified Response.
         * A Response object is immutable, so we create a new one to return here.
         */ return new Response(originalResponse.body, {
            status: originalResponse.status,
            statusText: originalResponse.statusText,
            headers: newHeaders
        });
    });
};
}),
]);

//# sourceMappingURL=node_modules_convex-helpers_9fdd8ece._.js.map