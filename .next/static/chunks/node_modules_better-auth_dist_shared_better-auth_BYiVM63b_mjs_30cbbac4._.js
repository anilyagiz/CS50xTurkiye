(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/better-auth/dist/shared/better-auth.BYiVM63b.mjs [app-client] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "o",
    ()=>organization,
    "p",
    ()=>parseRoles
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-call/dist/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/schemas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/node_modules/zod/v4/classic/external.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DV5EHeYG.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$nqWf7zUe$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.nqWf7zUe.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CMQ3rA$2d$I$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CMQ3rA-I.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$base64$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/base64.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hmac$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hmac.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$BjBlybv$2d2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.BjBlybv-.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$binary$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/binary.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$Dcv8PS7T$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.Dcv8PS7T.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DVhkokI7.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.UfVWArIB.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DQunmJlF.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.DrJWSFx6.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$random$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/random.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hash$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hash.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/index.mjs [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$better$2d$auth$2f$utils$2f$dist$2f$hex$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@better-auth/utils/dist/hex.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$B4Qoxdgc$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/better-auth/dist/plugins/organization/access/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const shimContext = (originalObject, newContext)=>{
    const shimmedObj = {};
    for (const [key, value] of Object.entries(originalObject)){
        shimmedObj[key] = (ctx)=>{
            return value({
                ...ctx,
                context: {
                    ...newContext,
                    ...ctx.context
                }
            });
        };
        shimmedObj[key].path = value.path;
        shimmedObj[key].method = value.method;
        shimmedObj[key].options = value.options;
        shimmedObj[key].headers = value.headers;
    }
    return shimmedObj;
};
const getOrgAdapter = (context, options)=>{
    const adapter = context.adapter;
    return {
        findOrganizationBySlug: async (slug)=>{
            const organization = await adapter.findOne({
                model: "organization",
                where: [
                    {
                        field: "slug",
                        value: slug
                    }
                ]
            });
            return organization;
        },
        createOrganization: async (data)=>{
            const organization = await adapter.create({
                model: "organization",
                data: {
                    ...data.organization,
                    metadata: data.organization.metadata ? JSON.stringify(data.organization.metadata) : void 0
                }
            });
            return {
                ...organization,
                metadata: organization.metadata && typeof organization.metadata === "string" ? JSON.parse(organization.metadata) : void 0
            };
        },
        findMemberByEmail: async (data)=>{
            const user = await adapter.findOne({
                model: "user",
                where: [
                    {
                        field: "email",
                        value: data.email.toLowerCase()
                    }
                ]
            });
            if (!user) {
                return null;
            }
            const member = await adapter.findOne({
                model: "member",
                where: [
                    {
                        field: "organizationId",
                        value: data.organizationId
                    },
                    {
                        field: "userId",
                        value: user.id
                    }
                ]
            });
            if (!member) {
                return null;
            }
            return {
                ...member,
                user: {
                    id: user.id,
                    name: user.name,
                    email: user.email,
                    image: user.image
                }
            };
        },
        listMembers: async (data)=>{
            var _data_filter, _data_filter1, _data_filter2, _data_filter3, _data_filter4, _data_filter5;
            const members = await Promise.all([
                adapter.findMany({
                    model: "member",
                    where: [
                        {
                            field: "organizationId",
                            value: data.organizationId
                        },
                        ...((_data_filter = data.filter) === null || _data_filter === void 0 ? void 0 : _data_filter.field) ? [
                            {
                                field: (_data_filter1 = data.filter) === null || _data_filter1 === void 0 ? void 0 : _data_filter1.field,
                                value: (_data_filter2 = data.filter) === null || _data_filter2 === void 0 ? void 0 : _data_filter2.value
                            }
                        ] : []
                    ],
                    limit: data.limit || (options === null || options === void 0 ? void 0 : options.membershipLimit) || 100,
                    offset: data.offset || 0,
                    sortBy: data.sortBy ? {
                        field: data.sortBy,
                        direction: data.sortOrder || "asc"
                    } : void 0
                }),
                adapter.count({
                    model: "member",
                    where: [
                        {
                            field: "organizationId",
                            value: data.organizationId
                        },
                        ...((_data_filter3 = data.filter) === null || _data_filter3 === void 0 ? void 0 : _data_filter3.field) ? [
                            {
                                field: (_data_filter4 = data.filter) === null || _data_filter4 === void 0 ? void 0 : _data_filter4.field,
                                value: (_data_filter5 = data.filter) === null || _data_filter5 === void 0 ? void 0 : _data_filter5.value
                            }
                        ] : []
                    ]
                })
            ]);
            const users = await adapter.findMany({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: members[0].map((member)=>member.userId),
                        operator: "in"
                    }
                ]
            });
            return {
                members: members[0].map((member)=>{
                    const user = users.find((user2)=>user2.id === member.userId);
                    if (!user) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Unexpected error: User not found for member");
                    }
                    return {
                        ...member,
                        user: {
                            id: user.id,
                            name: user.name,
                            email: user.email,
                            image: user.image
                        }
                    };
                }),
                total: members[1]
            };
        },
        findMemberByOrgId: async (data)=>{
            const [member, user] = await Promise.all([
                await adapter.findOne({
                    model: "member",
                    where: [
                        {
                            field: "userId",
                            value: data.userId
                        },
                        {
                            field: "organizationId",
                            value: data.organizationId
                        }
                    ]
                }),
                await adapter.findOne({
                    model: "user",
                    where: [
                        {
                            field: "id",
                            value: data.userId
                        }
                    ]
                })
            ]);
            if (!user || !member) {
                return null;
            }
            return {
                ...member,
                user: {
                    id: user.id,
                    name: user.name,
                    email: user.email,
                    image: user.image
                }
            };
        },
        findMemberById: async (memberId)=>{
            const member = await adapter.findOne({
                model: "member",
                where: [
                    {
                        field: "id",
                        value: memberId
                    }
                ]
            });
            if (!member) {
                return null;
            }
            const user = await adapter.findOne({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: member.userId
                    }
                ]
            });
            if (!user) {
                return null;
            }
            return {
                ...member,
                user: {
                    id: user.id,
                    name: user.name,
                    email: user.email,
                    image: user.image
                }
            };
        },
        createMember: async (data)=>{
            const member = await adapter.create({
                model: "member",
                data: {
                    ...data,
                    createdAt: /* @__PURE__ */ new Date()
                }
            });
            return member;
        },
        updateMember: async (memberId, role)=>{
            const member = await adapter.update({
                model: "member",
                where: [
                    {
                        field: "id",
                        value: memberId
                    }
                ],
                update: {
                    role
                }
            });
            return member;
        },
        deleteMember: async (memberId)=>{
            const member = await adapter.delete({
                model: "member",
                where: [
                    {
                        field: "id",
                        value: memberId
                    }
                ]
            });
            return member;
        },
        updateOrganization: async (organizationId, data)=>{
            const organization = await adapter.update({
                model: "organization",
                where: [
                    {
                        field: "id",
                        value: organizationId
                    }
                ],
                update: {
                    ...data,
                    metadata: typeof data.metadata === "object" ? JSON.stringify(data.metadata) : data.metadata
                }
            });
            if (!organization) {
                return null;
            }
            return {
                ...organization,
                metadata: organization.metadata ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$ffWeg50w$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["p"])(organization.metadata) : void 0
            };
        },
        deleteOrganization: async (organizationId)=>{
            await adapter.delete({
                model: "member",
                where: [
                    {
                        field: "organizationId",
                        value: organizationId
                    }
                ]
            });
            await adapter.delete({
                model: "invitation",
                where: [
                    {
                        field: "organizationId",
                        value: organizationId
                    }
                ]
            });
            await adapter.delete({
                model: "organization",
                where: [
                    {
                        field: "id",
                        value: organizationId
                    }
                ]
            });
            return organizationId;
        },
        setActiveOrganization: async (sessionToken, organizationId)=>{
            const session = await context.internalAdapter.updateSession(sessionToken, {
                activeOrganizationId: organizationId
            });
            return session;
        },
        findOrganizationById: async (organizationId)=>{
            const organization = await adapter.findOne({
                model: "organization",
                where: [
                    {
                        field: "id",
                        value: organizationId
                    }
                ]
            });
            return organization;
        },
        checkMembership: async (param)=>{
            let { userId, organizationId } = param;
            const member = await adapter.findOne({
                model: "member",
                where: [
                    {
                        field: "userId",
                        value: userId
                    },
                    {
                        field: "organizationId",
                        value: organizationId
                    }
                ]
            });
            return member;
        },
        /**
     * @requires db
     */ findFullOrganization: async (param)=>{
            let { organizationId, isSlug, includeTeams, membersLimit } = param;
            const org = await adapter.findOne({
                model: "organization",
                where: [
                    {
                        field: isSlug ? "slug" : "id",
                        value: organizationId
                    }
                ]
            });
            if (!org) {
                return null;
            }
            var _ref;
            const [invitations, members, teams] = await Promise.all([
                adapter.findMany({
                    model: "invitation",
                    where: [
                        {
                            field: "organizationId",
                            value: org.id
                        }
                    ]
                }),
                adapter.findMany({
                    model: "member",
                    where: [
                        {
                            field: "organizationId",
                            value: org.id
                        }
                    ],
                    limit: (_ref = membersLimit !== null && membersLimit !== void 0 ? membersLimit : options === null || options === void 0 ? void 0 : options.membershipLimit) !== null && _ref !== void 0 ? _ref : 100
                }),
                includeTeams ? adapter.findMany({
                    model: "team",
                    where: [
                        {
                            field: "organizationId",
                            value: org.id
                        }
                    ]
                }) : null
            ]);
            if (!org) return null;
            const userIds = members.map((member)=>member.userId);
            const users = userIds.length > 0 ? await adapter.findMany({
                model: "user",
                where: [
                    {
                        field: "id",
                        value: userIds,
                        operator: "in"
                    }
                ],
                limit: (options === null || options === void 0 ? void 0 : options.membershipLimit) || 100
            }) : [];
            const userMap = new Map(users.map((user)=>[
                    user.id,
                    user
                ]));
            const membersWithUsers = members.map((member)=>{
                const user = userMap.get(member.userId);
                if (!user) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DdzSJf$2d$n$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"]("Unexpected error: User not found for member");
                }
                return {
                    ...member,
                    user: {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        image: user.image
                    }
                };
            });
            return {
                ...org,
                invitations,
                members: membersWithUsers,
                teams
            };
        },
        listOrganizations: async (userId)=>{
            const members = await adapter.findMany({
                model: "member",
                where: [
                    {
                        field: "userId",
                        value: userId
                    }
                ]
            });
            if (!members || members.length === 0) {
                return [];
            }
            const organizationIds = members.map((member)=>member.organizationId);
            const organizations = await adapter.findMany({
                model: "organization",
                where: [
                    {
                        field: "id",
                        value: organizationIds,
                        operator: "in"
                    }
                ]
            });
            return organizations;
        },
        createTeam: async (data)=>{
            const team = await adapter.create({
                model: "team",
                data
            });
            return team;
        },
        findTeamById: async (param)=>{
            let { teamId, organizationId, includeTeamMembers } = param;
            const team = await adapter.findOne({
                model: "team",
                where: [
                    {
                        field: "id",
                        value: teamId
                    },
                    ...organizationId ? [
                        {
                            field: "organizationId",
                            value: organizationId
                        }
                    ] : []
                ]
            });
            if (!team) {
                return null;
            }
            let members = [];
            if (includeTeamMembers) {
                members = await adapter.findMany({
                    model: "teamMember",
                    where: [
                        {
                            field: "teamId",
                            value: teamId
                        }
                    ],
                    limit: (options === null || options === void 0 ? void 0 : options.membershipLimit) || 100
                });
                return {
                    ...team,
                    members
                };
            }
            return team;
        },
        updateTeam: async (teamId, data)=>{
            if ("id" in data) data.id = void 0;
            const team = await adapter.update({
                model: "team",
                where: [
                    {
                        field: "id",
                        value: teamId
                    }
                ],
                update: {
                    ...data
                }
            });
            return team;
        },
        deleteTeam: async (teamId)=>{
            await adapter.deleteMany({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: teamId
                    }
                ]
            });
            const team = await adapter.delete({
                model: "team",
                where: [
                    {
                        field: "id",
                        value: teamId
                    }
                ]
            });
            return team;
        },
        listTeams: async (organizationId)=>{
            const teams = await adapter.findMany({
                model: "team",
                where: [
                    {
                        field: "organizationId",
                        value: organizationId
                    }
                ]
            });
            return teams;
        },
        createTeamInvitation: async (param)=>{
            let { email, role, teamId, organizationId, inviterId, expiresIn = 1e3 * 60 * 60 * 48 } = param;
            const expiresAt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(expiresIn);
            const invitation = await adapter.create({
                model: "invitation",
                data: {
                    email,
                    role,
                    organizationId,
                    teamId,
                    inviterId,
                    status: "pending",
                    expiresAt
                }
            });
            return invitation;
        },
        setActiveTeam: async (sessionToken, teamId)=>{
            const session = await context.internalAdapter.updateSession(sessionToken, {
                activeTeamId: teamId
            });
            return session;
        },
        listTeamMembers: async (data)=>{
            const members = await adapter.findMany({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: data.teamId
                    }
                ]
            });
            return members;
        },
        countTeamMembers: async (data)=>{
            const count = await adapter.count({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: data.teamId
                    }
                ]
            });
            return count;
        },
        countMembers: async (data)=>{
            const count = await adapter.count({
                model: "member",
                where: [
                    {
                        field: "organizationId",
                        value: data.organizationId
                    }
                ]
            });
            return count;
        },
        listTeamsByUser: async (data)=>{
            const members = await adapter.findMany({
                model: "teamMember",
                where: [
                    {
                        field: "userId",
                        value: data.userId
                    }
                ]
            });
            const teams = await adapter.findMany({
                model: "team",
                where: [
                    {
                        field: "id",
                        operator: "in",
                        value: members.map((m)=>m.teamId)
                    }
                ]
            });
            return teams;
        },
        findTeamMember: async (data)=>{
            const member = await adapter.findOne({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: data.teamId
                    },
                    {
                        field: "userId",
                        value: data.userId
                    }
                ]
            });
            return member;
        },
        findOrCreateTeamMember: async (data)=>{
            const member = await adapter.findOne({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: data.teamId
                    },
                    {
                        field: "userId",
                        value: data.userId
                    }
                ]
            });
            if (member) return member;
            return await adapter.create({
                model: "teamMember",
                data: {
                    teamId: data.teamId,
                    userId: data.userId,
                    createdAt: /* @__PURE__ */ new Date()
                }
            });
        },
        removeTeamMember: async (data)=>{
            await adapter.delete({
                model: "teamMember",
                where: [
                    {
                        field: "teamId",
                        value: data.teamId
                    },
                    {
                        field: "userId",
                        value: data.userId
                    }
                ]
            });
        },
        findInvitationsByTeamId: async (teamId)=>{
            const invitations = await adapter.findMany({
                model: "invitation",
                where: [
                    {
                        field: "teamId",
                        value: teamId
                    }
                ]
            });
            return invitations;
        },
        listUserInvitations: async (email)=>{
            const invitations = await adapter.findMany({
                model: "invitation",
                where: [
                    {
                        field: "email",
                        value: email.toLowerCase()
                    }
                ]
            });
            return invitations;
        },
        createInvitation: async (param)=>{
            let { invitation, user } = param;
            const defaultExpiration = 60 * 60 * 48;
            const expiresAt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])((options === null || options === void 0 ? void 0 : options.invitationExpiresIn) || defaultExpiration, "sec");
            const invite = await adapter.create({
                model: "invitation",
                data: {
                    status: "pending",
                    expiresAt,
                    inviterId: user.id,
                    ...invitation,
                    teamId: invitation.teamIds.length > 0 ? invitation.teamIds.join(",") : null
                }
            });
            return invite;
        },
        findInvitationById: async (id)=>{
            const invitation = await adapter.findOne({
                model: "invitation",
                where: [
                    {
                        field: "id",
                        value: id
                    }
                ]
            });
            return invitation;
        },
        findPendingInvitation: async (data)=>{
            const invitation = await adapter.findMany({
                model: "invitation",
                where: [
                    {
                        field: "email",
                        value: data.email.toLowerCase()
                    },
                    {
                        field: "organizationId",
                        value: data.organizationId
                    },
                    {
                        field: "status",
                        value: "pending"
                    }
                ]
            });
            return invitation.filter((invite)=>new Date(invite.expiresAt) > /* @__PURE__ */ new Date());
        },
        findPendingInvitations: async (data)=>{
            const invitations = await adapter.findMany({
                model: "invitation",
                where: [
                    {
                        field: "organizationId",
                        value: data.organizationId
                    },
                    {
                        field: "status",
                        value: "pending"
                    }
                ]
            });
            return invitations.filter((invite)=>new Date(invite.expiresAt) > /* @__PURE__ */ new Date());
        },
        listInvitations: async (data)=>{
            const invitations = await adapter.findMany({
                model: "invitation",
                where: [
                    {
                        field: "organizationId",
                        value: data.organizationId
                    }
                ]
            });
            return invitations;
        },
        updateInvitation: async (data)=>{
            const invitation = await adapter.update({
                model: "invitation",
                where: [
                    {
                        field: "id",
                        value: data.invitationId
                    }
                ],
                update: {
                    status: data.status
                }
            });
            return invitation;
        }
    };
};
const ORGANIZATION_ERROR_CODES = {
    YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION: "You are not allowed to create a new organization",
    YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS: "You have reached the maximum number of organizations",
    ORGANIZATION_ALREADY_EXISTS: "Organization already exists",
    ORGANIZATION_NOT_FOUND: "Organization not found",
    USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION: "User is not a member of the organization",
    YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION: "You are not allowed to update this organization",
    YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION: "You are not allowed to delete this organization",
    NO_ACTIVE_ORGANIZATION: "No active organization",
    USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION: "User is already a member of this organization",
    MEMBER_NOT_FOUND: "Member not found",
    ROLE_NOT_FOUND: "Role not found",
    YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM: "You are not allowed to create a new team",
    TEAM_ALREADY_EXISTS: "Team already exists",
    TEAM_NOT_FOUND: "Team not found",
    YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER: "You cannot leave the organization as the only owner",
    YOU_CANNOT_LEAVE_THE_ORGANIZATION_WITHOUT_AN_OWNER: "You cannot leave the organization without an owner",
    YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER: "You are not allowed to delete this member",
    YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION: "You are not allowed to invite users to this organization",
    USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION: "User is already invited to this organization",
    INVITATION_NOT_FOUND: "Invitation not found",
    YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION: "You are not the recipient of the invitation",
    EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION: "Email verification required before accepting or rejecting invitation",
    YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION: "You are not allowed to cancel this invitation",
    INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION: "Inviter is no longer a member of the organization",
    YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE: "You are not allowed to invite a user with this role",
    FAILED_TO_RETRIEVE_INVITATION: "Failed to retrieve invitation",
    YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS: "You have reached the maximum number of teams",
    UNABLE_TO_REMOVE_LAST_TEAM: "Unable to remove last team",
    YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER: "You are not allowed to update this member",
    ORGANIZATION_MEMBERSHIP_LIMIT_REACHED: "Organization membership limit reached",
    YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION: "You are not allowed to create teams in this organization",
    YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION: "You are not allowed to delete teams in this organization",
    YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM: "You are not allowed to update this team",
    YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM: "You are not allowed to delete this team",
    INVITATION_LIMIT_REACHED: "Invitation limit reached",
    TEAM_MEMBER_LIMIT_REACHED: "Team member limit reached",
    USER_IS_NOT_A_MEMBER_OF_THE_TEAM: "User is not a member of the team",
    YOU_CAN_NOT_ACCESS_THE_MEMBERS_OF_THIS_TEAM: "You are not allowed to list the members of this team",
    YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM: "You do not have an active team",
    YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER: "You are not allowed to create a new member",
    YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER: "You are not allowed to remove a team member",
    YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION: "You are not allowed to access this organization as an owner",
    YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION: "You are not a member of this organization"
};
const createInvitation = (option)=>{
    var _option_schema_invitation, _option_schema;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (option === null || option === void 0 ? void 0 : (_option_schema = option.schema) === null || _option_schema === void 0 ? void 0 : (_option_schema_invitation = _option_schema.invitation) === null || _option_schema_invitation === void 0 ? void 0 : _option_schema_invitation.additionalFields) || {},
        isClientSide: true
    });
    const baseSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
        email: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The email address of the user to invite"
        }),
        role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The role to assign to the user"
            }),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The roles to assign to the user"
            }))
        ]).meta({
            description: 'The role(s) to assign to the user. It can be `admin`, `member`, or `guest`. Eg: "member"'
        }),
        organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The organization ID to invite the user to"
        }).optional(),
        resend: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().meta({
            description: "Resend the invitation email, if the user is already invited. Eg: true"
        }).optional(),
        teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The team ID to invite the user to"
            }).optional(),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()).meta({
                description: "The team IDs to invite the user to"
            }).optional()
        ])
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/invite-member", {
        method: "POST",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            ...baseSchema.shape,
            ...additionalFieldsSchema.shape
        }),
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Invite a user to an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string"
                                        },
                                        email: {
                                            type: "string"
                                        },
                                        role: {
                                            type: "string"
                                        },
                                        organizationId: {
                                            type: "string"
                                        },
                                        inviterId: {
                                            type: "string"
                                        },
                                        status: {
                                            type: "string"
                                        },
                                        expiresAt: {
                                            type: "string"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "email",
                                        "role",
                                        "organizationId",
                                        "inviterId",
                                        "status",
                                        "expiresAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _option_organizationHooks, _ctx_context_orgOptions_sendInvitationEmail, _ctx_context_orgOptions, _option_organizationHooks1;
        const session = ctx.context.session;
        const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const adapter = getOrgAdapter(ctx.context, option);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const canInvite = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            options: ctx.context.orgOptions,
            permissions: {
                invitation: [
                    "create"
                ]
            },
            organizationId
        }, ctx);
        if (!canInvite) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION
            });
        }
        const creatorRole = ctx.context.orgOptions.creatorRole || "owner";
        const roles = parseRoles(ctx.body.role);
        if (member.role !== creatorRole && roles.split(",").includes(creatorRole)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE
            });
        }
        const alreadyMember = await adapter.findMemberByEmail({
            email: ctx.body.email,
            organizationId
        });
        if (alreadyMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION
            });
        }
        const alreadyInvited = await adapter.findPendingInvitation({
            email: ctx.body.email,
            organizationId
        });
        if (alreadyInvited.length && !ctx.body.resend) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION
            });
        }
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        if (alreadyInvited.length && ctx.body.resend) {
            var _ctx_context_orgOptions_sendInvitationEmail1, _ctx_context_orgOptions1;
            const existingInvitation = alreadyInvited[0];
            const defaultExpiration = 60 * 60 * 48;
            const newExpiresAt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$CW6D9eSx$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx.context.orgOptions.invitationExpiresIn || defaultExpiration, "sec");
            await ctx.context.adapter.update({
                model: "invitation",
                where: [
                    {
                        field: "id",
                        value: existingInvitation.id
                    }
                ],
                update: {
                    expiresAt: newExpiresAt
                }
            });
            const updatedInvitation = {
                ...existingInvitation,
                expiresAt: newExpiresAt
            };
            await ((_ctx_context_orgOptions_sendInvitationEmail1 = (_ctx_context_orgOptions1 = ctx.context.orgOptions).sendInvitationEmail) === null || _ctx_context_orgOptions_sendInvitationEmail1 === void 0 ? void 0 : _ctx_context_orgOptions_sendInvitationEmail1.call(_ctx_context_orgOptions1, {
                id: updatedInvitation.id,
                role: updatedInvitation.role,
                email: updatedInvitation.email.toLowerCase(),
                organization,
                inviter: {
                    ...member,
                    user: session.user
                },
                invitation: updatedInvitation
            }, ctx.request));
            return ctx.json(updatedInvitation);
        }
        if (alreadyInvited.length && ctx.context.orgOptions.cancelPendingInvitationsOnReInvite) {
            await adapter.updateInvitation({
                invitationId: alreadyInvited[0].id,
                status: "canceled"
            });
        }
        var _ctx_context_orgOptions_invitationLimit;
        const invitationLimit = typeof ctx.context.orgOptions.invitationLimit === "function" ? await ctx.context.orgOptions.invitationLimit({
            user: session.user,
            organization,
            member
        }, ctx.context) : (_ctx_context_orgOptions_invitationLimit = ctx.context.orgOptions.invitationLimit) !== null && _ctx_context_orgOptions_invitationLimit !== void 0 ? _ctx_context_orgOptions_invitationLimit : 100;
        const pendingInvitations = await adapter.findPendingInvitations({
            organizationId
        });
        if (pendingInvitations.length >= invitationLimit) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.INVITATION_LIMIT_REACHED
            });
        }
        if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== "undefined" && "teamId" in ctx.body && ctx.body.teamId) {
            const teamIds2 = typeof ctx.body.teamId === "string" ? [
                ctx.body.teamId
            ] : ctx.body.teamId;
            for (const teamId of teamIds2){
                const team = await adapter.findTeamById({
                    teamId,
                    organizationId,
                    includeTeamMembers: true
                });
                if (!team) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
                    });
                }
                const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === "function" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({
                    teamId,
                    session,
                    organizationId
                }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;
                if (team.members.length >= maximumMembersPerTeam) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                        message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED
                    });
                }
            }
        }
        var _ctx_body_teamId;
        const teamIds = "teamId" in ctx.body ? typeof ctx.body.teamId === "string" ? [
            ctx.body.teamId
        ] : (_ctx_body_teamId = ctx.body.teamId) !== null && _ctx_body_teamId !== void 0 ? _ctx_body_teamId : [] : [];
        const { email: _, role: __, organizationId: ___, resend: ____, ...additionalFields } = ctx.body;
        let invitationData = {
            role: roles,
            email: ctx.body.email.toLowerCase(),
            organizationId,
            teamIds,
            ...additionalFields ? additionalFields : {}
        };
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks = option.organizationHooks) === null || _option_organizationHooks === void 0 ? void 0 : _option_organizationHooks.beforeCreateInvitation) {
            const response = await (option === null || option === void 0 ? void 0 : option.organizationHooks.beforeCreateInvitation({
                invitation: {
                    ...invitationData,
                    inviterId: session.user.id,
                    teamId: teamIds.length > 0 ? teamIds[0] : void 0
                },
                inviter: session.user,
                organization
            }));
            if (response && typeof response === "object" && "data" in response) {
                invitationData = {
                    ...invitationData,
                    ...response.data
                };
            }
        }
        const invitation = await adapter.createInvitation({
            invitation: invitationData,
            user: session.user
        });
        await ((_ctx_context_orgOptions_sendInvitationEmail = (_ctx_context_orgOptions = ctx.context.orgOptions).sendInvitationEmail) === null || _ctx_context_orgOptions_sendInvitationEmail === void 0 ? void 0 : _ctx_context_orgOptions_sendInvitationEmail.call(_ctx_context_orgOptions, {
            id: invitation.id,
            role: invitation.role,
            email: invitation.email.toLowerCase(),
            organization,
            inviter: {
                ...member,
                user: session.user
            },
            //@ts-expect-error
            invitation
        }, ctx.request));
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks1 = option.organizationHooks) === null || _option_organizationHooks1 === void 0 ? void 0 : _option_organizationHooks1.afterCreateInvitation) {
            await (option === null || option === void 0 ? void 0 : option.organizationHooks.afterCreateInvitation({
                invitation,
                inviter: session.user,
                organization
            }));
        }
        return ctx.json(invitation);
    });
};
const acceptInvitation = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/accept-invitation", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            invitationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID of the invitation to accept"
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            openapi: {
                description: "Accept an invitation to an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        invitation: {
                                            type: "object"
                                        },
                                        member: {
                                            type: "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions, _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, options);
        const invitation = await adapter.findInvitationById(ctx.body.invitationId);
        if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== "pending") {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND
            });
        }
        if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION
            });
        }
        if (ctx.context.orgOptions.requireEmailVerificationOnInvitation && !session.user.emailVerified) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION
            });
        }
        const membershipLimit = ((_ctx_context_orgOptions = ctx.context.orgOptions) === null || _ctx_context_orgOptions === void 0 ? void 0 : _ctx_context_orgOptions.membershipLimit) || 100;
        const membersCount = await adapter.countMembers({
            organizationId: invitation.organizationId
        });
        if (membersCount >= membershipLimit) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED
            });
        }
        const organization = await adapter.findOrganizationById(invitation.organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeAcceptInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeAcceptInvitation({
                invitation,
                user: session.user,
                organization
            }));
        }
        const acceptedI = await adapter.updateInvitation({
            invitationId: ctx.body.invitationId,
            status: "accepted"
        });
        if (!acceptedI) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.FAILED_TO_RETRIEVE_INVITATION
            });
        }
        if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && "teamId" in acceptedI && acceptedI.teamId) {
            const teamIds = acceptedI.teamId.split(",");
            const onlyOne = teamIds.length === 1;
            for (const teamId of teamIds){
                await adapter.findOrCreateTeamMember({
                    teamId,
                    userId: session.user.id
                });
                if (typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== "undefined") {
                    const members = await adapter.countTeamMembers({
                        teamId
                    });
                    const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === "function" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({
                        teamId,
                        session,
                        organizationId: invitation.organizationId
                    }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;
                    if (members >= maximumMembersPerTeam) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                            message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED
                        });
                    }
                }
            }
            if (onlyOne) {
                const teamId = teamIds[0];
                const updatedSession = await adapter.setActiveTeam(session.session.token, teamId);
                await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
                    session: updatedSession,
                    user: session.user
                });
            }
        }
        const member = await adapter.createMember({
            organizationId: invitation.organizationId,
            userId: session.user.id,
            role: invitation.role,
            createdAt: /* @__PURE__ */ new Date()
        });
        await adapter.setActiveOrganization(session.session.token, invitation.organizationId);
        if (!acceptedI) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND
                }
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterAcceptInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterAcceptInvitation({
                invitation: acceptedI,
                member,
                user: session.user,
                organization
            }));
        }
        return ctx.json({
            invitation: acceptedI,
            member
        });
    });
const rejectInvitation = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/reject-invitation", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            invitationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID of the invitation to reject"
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            openapi: {
                description: "Reject an invitation to an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        invitation: {
                                            type: "object"
                                        },
                                        member: {
                                            type: "null"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        const invitation = await adapter.findInvitationById(ctx.body.invitationId);
        if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== "pending") {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "Invitation not found!"
            });
        }
        if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION
            });
        }
        if (ctx.context.orgOptions.requireEmailVerificationOnInvitation && !session.user.emailVerified) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.EMAIL_VERIFICATION_REQUIRED_BEFORE_ACCEPTING_OR_REJECTING_INVITATION
            });
        }
        const organization = await adapter.findOrganizationById(invitation.organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeRejectInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeRejectInvitation({
                invitation,
                user: session.user,
                organization
            }));
        }
        const rejectedI = await adapter.updateInvitation({
            invitationId: ctx.body.invitationId,
            status: "rejected"
        });
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterRejectInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterRejectInvitation({
                invitation: rejectedI || invitation,
                user: session.user,
                organization
            }));
        }
        return ctx.json({
            invitation: rejectedI,
            member: null
        });
    });
const cancelInvitation = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/cancel-invitation", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            invitationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID of the invitation to cancel"
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        openapi: {
            description: "Cancel an invitation to an organization",
            responses: {
                "200": {
                    description: "Success",
                    content: {
                        "application/json": {
                            schema: {
                                type: "object",
                                properties: {
                                    invitation: {
                                        type: "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, options);
        const invitation = await adapter.findInvitationById(ctx.body.invitationId);
        if (!invitation) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND
            });
        }
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: invitation.organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const canCancel = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            options: ctx.context.orgOptions,
            permissions: {
                invitation: [
                    "cancel"
                ]
            },
            organizationId: invitation.organizationId
        }, ctx);
        if (!canCancel) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION
            });
        }
        const organization = await adapter.findOrganizationById(invitation.organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeCancelInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeCancelInvitation({
                invitation,
                cancelledBy: session.user,
                organization
            }));
        }
        const canceledI = await adapter.updateInvitation({
            invitationId: ctx.body.invitationId,
            status: "canceled"
        });
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterCancelInvitation) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterCancelInvitation({
                invitation: canceledI || invitation,
                cancelledBy: session.user,
                organization
            }));
        }
        return ctx.json(canceledI);
    });
const getInvitation = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/get-invitation", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        requireHeaders: true,
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID of the invitation to get"
            })
        }),
        metadata: {
            openapi: {
                description: "Get an invitation by ID",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string"
                                        },
                                        email: {
                                            type: "string"
                                        },
                                        role: {
                                            type: "string"
                                        },
                                        organizationId: {
                                            type: "string"
                                        },
                                        inviterId: {
                                            type: "string"
                                        },
                                        status: {
                                            type: "string"
                                        },
                                        expiresAt: {
                                            type: "string"
                                        },
                                        organizationName: {
                                            type: "string"
                                        },
                                        organizationSlug: {
                                            type: "string"
                                        },
                                        inviterEmail: {
                                            type: "string"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "email",
                                        "role",
                                        "organizationId",
                                        "inviterId",
                                        "status",
                                        "expiresAt",
                                        "organizationName",
                                        "organizationSlug",
                                        "inviterEmail"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        if (!session) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: "Not authenticated"
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const invitation = await adapter.findInvitationById(ctx.query.id);
        if (!invitation || invitation.status !== "pending" || invitation.expiresAt < /* @__PURE__ */ new Date()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "Invitation not found!"
            });
        }
        if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION
            });
        }
        const organization = await adapter.findOrganizationById(invitation.organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const member = await adapter.findMemberByOrgId({
            userId: invitation.inviterId,
            organizationId: invitation.organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        return ctx.json({
            ...invitation,
            organizationName: organization.name,
            organizationSlug: organization.slug,
            inviterEmail: member.user.email
        });
    });
const listInvitations = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-invitations", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID of the organization to list invitations for"
            }).optional()
        }).optional()
    }, async (ctx)=>{
        var _ctx_query;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        if (!session) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: "Not authenticated"
            });
        }
        const orgId = ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationId) || session.session.activeOrganizationId;
        if (!orgId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "Organization ID is required"
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const isMember = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: orgId
        });
        if (!isMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization"
            });
        }
        const invitations = await adapter.listInvitations({
            organizationId: orgId
        });
        return ctx.json(invitations);
    });
const listUserInvitations = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-user-invitations", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            email: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The email of the user to list invitations for. This only works for server side API calls."
            }).optional()
        }).optional()
    }, async (ctx)=>{
        var _ctx_query, _ctx_query1;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        if (ctx.request && ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.email)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "User email cannot be passed for client side API calls."
            });
        }
        const userEmail = (session === null || session === void 0 ? void 0 : session.user.email) || ((_ctx_query1 = ctx.query) === null || _ctx_query1 === void 0 ? void 0 : _ctx_query1.email);
        if (!userEmail) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "Missing session headers, or email query parameter."
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const invitations = await adapter.listUserInvitations(userEmail);
        return ctx.json(invitations);
    });
const addMember = (option)=>{
    var _option_schema_member, _option_schema;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (option === null || option === void 0 ? void 0 : (_option_schema = option.schema) === null || _option_schema === void 0 ? void 0 : (_option_schema_member = _option_schema.member) === null || _option_schema_member === void 0 ? void 0 : _option_schema_member.additionalFields) || {},
        isClientSide: true
    });
    const baseSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
        userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
            description: 'The user Id which represents the user to be added as a member. If `null` is provided, then it\'s expected to provide session headers. Eg: "user-id"'
        }),
        role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())
        ]).meta({
            description: 'The role(s) to assign to the new member. Eg: ["admin", "sale"]'
        }),
        organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: 'An optional organization ID to pass. If not provided, will default to the user\'s active organization. Eg: "org-id"'
        }).optional(),
        teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: 'An optional team ID to add the member to. Eg: "team-id"'
        }).optional()
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/add-member", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            ...baseSchema.shape,
            ...additionalFieldsSchema.shape
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            SERVER_ONLY: true,
            $Infer: {
                body: {}
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions_teams, _ctx_context_orgOptions, _option_organizationHooks, _option_organizationHooks1;
        const session = ctx.body.userId ? await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx).catch((e)=>null) : null;
        const orgId = ctx.body.organizationId || (session === null || session === void 0 ? void 0 : session.session.activeOrganizationId);
        if (!orgId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                }
            });
        }
        const teamId = "teamId" in ctx.body ? ctx.body.teamId : void 0;
        if (teamId && !((_ctx_context_orgOptions_teams = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams === void 0 ? void 0 : _ctx_context_orgOptions_teams.enabled)) {
            ctx.context.logger.error("Teams are not enabled");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "Teams are not enabled"
            });
        }
        const adapter = getOrgAdapter(ctx.context, option);
        const user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
        if (!user) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["B"].USER_NOT_FOUND
            });
        }
        const alreadyMember = await adapter.findMemberByEmail({
            email: user.email,
            organizationId: orgId
        });
        if (alreadyMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION
            });
        }
        if (teamId) {
            const team = await adapter.findTeamById({
                teamId,
                organizationId: orgId
            });
            if (!team || team.organizationId !== orgId) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
                });
            }
        }
        const membershipLimit = ((_ctx_context_orgOptions = ctx.context.orgOptions) === null || _ctx_context_orgOptions === void 0 ? void 0 : _ctx_context_orgOptions.membershipLimit) || 100;
        const count = await adapter.countMembers({
            organizationId: orgId
        });
        if (count >= membershipLimit) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED
            });
        }
        const { role: _, userId: __, organizationId: ___, ...additionalFields } = ctx.body;
        const organization = await adapter.findOrganizationById(orgId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        let memberData = {
            organizationId: orgId,
            userId: user.id,
            role: parseRoles(ctx.body.role),
            createdAt: /* @__PURE__ */ new Date(),
            ...additionalFields ? additionalFields : {}
        };
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks = option.organizationHooks) === null || _option_organizationHooks === void 0 ? void 0 : _option_organizationHooks.beforeAddMember) {
            const response = await (option === null || option === void 0 ? void 0 : option.organizationHooks.beforeAddMember({
                member: {
                    userId: user.id,
                    organizationId: orgId,
                    role: parseRoles(ctx.body.role),
                    ...additionalFields
                },
                user,
                organization
            }));
            if (response && typeof response === "object" && "data" in response) {
                memberData = {
                    ...memberData,
                    ...response.data
                };
            }
        }
        const createdMember = await adapter.createMember(memberData);
        if (teamId) {
            await adapter.findOrCreateTeamMember({
                userId: user.id,
                teamId
            });
        }
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks1 = option.organizationHooks) === null || _option_organizationHooks1 === void 0 ? void 0 : _option_organizationHooks1.afterAddMember) {
            await (option === null || option === void 0 ? void 0 : option.organizationHooks.afterAddMember({
                member: createdMember,
                user,
                organization
            }));
        }
        return ctx.json(createdMember);
    });
};
const removeMember = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/remove-member", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            memberIdOrEmail: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The ID or email of the member to remove"
            }),
            /**
       * If not provided, the active organization will be used
       */ organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The ID of the organization to remove the member from. If not provided, the active organization will be used. Eg: "org-id"'
            }).optional()
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            openapi: {
                description: "Remove a member from an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        member: {
                                            type: "object",
                                            properties: {
                                                id: {
                                                    type: "string"
                                                },
                                                userId: {
                                                    type: "string"
                                                },
                                                organizationId: {
                                                    type: "string"
                                                },
                                                role: {
                                                    type: "string"
                                                }
                                            },
                                            required: [
                                                "id",
                                                "userId",
                                                "organizationId",
                                                "role"
                                            ]
                                        }
                                    },
                                    required: [
                                        "member"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions, _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;
        if (!organizationId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                }
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        let toBeRemovedMember = null;
        if (ctx.body.memberIdOrEmail.includes("@")) {
            toBeRemovedMember = await adapter.findMemberByEmail({
                email: ctx.body.memberIdOrEmail,
                organizationId
            });
        } else {
            toBeRemovedMember = await adapter.findMemberById(ctx.body.memberIdOrEmail);
        }
        if (!toBeRemovedMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const roles = toBeRemovedMember.role.split(",");
        const creatorRole = ((_ctx_context_orgOptions = ctx.context.orgOptions) === null || _ctx_context_orgOptions === void 0 ? void 0 : _ctx_context_orgOptions.creatorRole) || "owner";
        const isOwner = roles.includes(creatorRole);
        if (isOwner) {
            if (member.role !== creatorRole) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER
                });
            }
            const { members } = await adapter.listMembers({
                organizationId
            });
            const owners = members.filter((member2)=>{
                const roles2 = member2.role.split(",");
                return roles2.includes(creatorRole);
            });
            if (owners.length <= 1) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER
                });
            }
        }
        const canDeleteMember = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            options: ctx.context.orgOptions,
            permissions: {
                member: [
                    "delete"
                ]
            },
            organizationId
        }, ctx);
        if (!canDeleteMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER
            });
        }
        if ((toBeRemovedMember === null || toBeRemovedMember === void 0 ? void 0 : toBeRemovedMember.organizationId) !== organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const userBeingRemoved = await ctx.context.internalAdapter.findUserById(toBeRemovedMember.userId);
        if (!userBeingRemoved) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "User not found"
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeRemoveMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeRemoveMember({
                member: toBeRemovedMember,
                user: userBeingRemoved,
                organization
            }));
        }
        await adapter.deleteMember(toBeRemovedMember.id);
        if (session.user.id === toBeRemovedMember.userId && session.session.activeOrganizationId === toBeRemovedMember.organizationId) {
            await adapter.setActiveOrganization(session.session.token, null);
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterRemoveMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterRemoveMember({
                member: toBeRemovedMember,
                user: userBeingRemoved,
                organization
            }));
        }
        return ctx.json({
            member: toBeRemovedMember
        });
    });
const updateMemberRole = (option)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/update-member-role", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](),
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())
            ]).meta({
                description: 'The new role to be applied. This can be a string or array of strings representing the roles. Eg: ["admin", "sale"]'
            }),
            memberId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The member id to apply the role update to. Eg: "member-id"'
            }),
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'An optional organization ID which the member is a part of to apply the role update. If not provided, you must provide session headers to get the active organization. Eg: "organization-id"'
            }).optional()
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Update the role of a member in an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        member: {
                                            type: "object",
                                            properties: {
                                                id: {
                                                    type: "string"
                                                },
                                                userId: {
                                                    type: "string"
                                                },
                                                organizationId: {
                                                    type: "string"
                                                },
                                                role: {
                                                    type: "string"
                                                }
                                            },
                                            required: [
                                                "id",
                                                "userId",
                                                "organizationId",
                                                "role"
                                            ]
                                        }
                                    },
                                    required: [
                                        "member"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions, _option_organizationHooks, _option_organizationHooks1;
        const session = ctx.context.session;
        if (!ctx.body.role) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST");
        }
        const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        const roleToSet = Array.isArray(ctx.body.role) ? ctx.body.role : ctx.body.role ? [
            ctx.body.role
        ] : [];
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const toBeUpdatedMember = member.id !== ctx.body.memberId ? await adapter.findMemberById(ctx.body.memberId) : member;
        if (!toBeUpdatedMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const memberBelongsToOrganization = toBeUpdatedMember.organizationId === organizationId;
        if (!memberBelongsToOrganization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER
            });
        }
        const creatorRole = ((_ctx_context_orgOptions = ctx.context.orgOptions) === null || _ctx_context_orgOptions === void 0 ? void 0 : _ctx_context_orgOptions.creatorRole) || "owner";
        const updatingMemberRoles = member.role.split(",");
        const toBeUpdatedMemberRoles = toBeUpdatedMember.role.split(",");
        const isUpdatingCreator = toBeUpdatedMemberRoles.includes(creatorRole);
        const updaterIsCreator = updatingMemberRoles.includes(creatorRole);
        const isSettingCreatorRole = roleToSet.includes(creatorRole);
        const memberIsUpdatingThemselves = member.id === toBeUpdatedMember.id;
        if (isUpdatingCreator && !updaterIsCreator || isSettingCreatorRole && !updaterIsCreator) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER
            });
        }
        if (updaterIsCreator && memberIsUpdatingThemselves) {
            const members = await ctx.context.adapter.findMany({
                model: "member",
                where: [
                    {
                        field: "organizationId",
                        value: organizationId
                    }
                ]
            });
            const owners = members.filter((member2)=>{
                const roles = member2.role.split(",");
                return roles.includes(creatorRole);
            });
            if (owners.length <= 1 && !isSettingCreatorRole) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_WITHOUT_AN_OWNER
                });
            }
        }
        const canUpdateMember = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            options: ctx.context.orgOptions,
            permissions: {
                member: [
                    "update"
                ]
            },
            allowCreatorAllPermissions: true,
            organizationId
        }, ctx);
        if (!canUpdateMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER
            });
        }
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const userBeingUpdated = await ctx.context.internalAdapter.findUserById(toBeUpdatedMember.userId);
        if (!userBeingUpdated) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "User not found"
            });
        }
        const previousRole = toBeUpdatedMember.role;
        const newRole = parseRoles(ctx.body.role);
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks = option.organizationHooks) === null || _option_organizationHooks === void 0 ? void 0 : _option_organizationHooks.beforeUpdateMemberRole) {
            const response = await (option === null || option === void 0 ? void 0 : option.organizationHooks.beforeUpdateMemberRole({
                member: toBeUpdatedMember,
                newRole,
                user: userBeingUpdated,
                organization
            }));
            if (response && typeof response === "object" && "data" in response) {
                var _option_organizationHooks2;
                const updatedMember2 = await adapter.updateMember(ctx.body.memberId, response.data.role || newRole);
                if (!updatedMember2) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
                    });
                }
                if (option === null || option === void 0 ? void 0 : (_option_organizationHooks2 = option.organizationHooks) === null || _option_organizationHooks2 === void 0 ? void 0 : _option_organizationHooks2.afterUpdateMemberRole) {
                    await (option === null || option === void 0 ? void 0 : option.organizationHooks.afterUpdateMemberRole({
                        member: updatedMember2,
                        previousRole,
                        user: userBeingUpdated,
                        organization
                    }));
                }
                return ctx.json(updatedMember2);
            }
        }
        const updatedMember = await adapter.updateMember(ctx.body.memberId, newRole);
        if (!updatedMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        if (option === null || option === void 0 ? void 0 : (_option_organizationHooks1 = option.organizationHooks) === null || _option_organizationHooks1 === void 0 ? void 0 : _option_organizationHooks1.afterUpdateMemberRole) {
            await (option === null || option === void 0 ? void 0 : option.organizationHooks.afterUpdateMemberRole({
                member: updatedMember,
                previousRole,
                user: userBeingUpdated,
                organization
            }));
        }
        return ctx.json(updatedMember);
    });
const getActiveMember = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/get-active-member", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        requireHeaders: true,
        metadata: {
            openapi: {
                description: "Get the member details of the active organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string"
                                        },
                                        userId: {
                                            type: "string"
                                        },
                                        organizationId: {
                                            type: "string"
                                        },
                                        role: {
                                            type: "string"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "userId",
                                        "organizationId",
                                        "role"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const session = ctx.context.session;
        const organizationId = session.session.activeOrganizationId;
        if (!organizationId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                }
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
                }
            });
        }
        return ctx.json(member);
    });
const leaveOrganization = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/leave", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization Id for the member to leave. Eg: "organization-id"'
            })
        }),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ]
    }, async (ctx)=>{
        var _ctx_context_orgOptions;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: ctx.body.organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND
            });
        }
        const creatorRole = ((_ctx_context_orgOptions = ctx.context.orgOptions) === null || _ctx_context_orgOptions === void 0 ? void 0 : _ctx_context_orgOptions.creatorRole) || "owner";
        const isOwnerLeaving = member.role.split(",").includes(creatorRole);
        if (isOwnerLeaving) {
            const members = await ctx.context.adapter.findMany({
                model: "member",
                where: [
                    {
                        field: "organizationId",
                        value: ctx.body.organizationId
                    }
                ]
            });
            const owners = members.filter((member2)=>member2.role.split(",").includes(creatorRole));
            if (owners.length <= 1) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER
                });
            }
        }
        await adapter.deleteMember(member.id);
        if (session.session.activeOrganizationId === ctx.body.organizationId) {
            await adapter.setActiveOrganization(session.session.token, null);
        }
        return ctx.json(member);
    });
const listMembers = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-members", {
        method: "GET",
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            limit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The number of users to return"
            }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).optional(),
            offset: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The offset to start from"
            }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).optional(),
            sortBy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The field to sort by"
            }).optional(),
            sortDirection: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                "asc",
                "desc"
            ]).meta({
                description: "The direction to sort by"
            }).optional(),
            filterField: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The field to filter by"
            }).optional(),
            filterValue: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The value to filter by"
            }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]()).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]()).optional(),
            filterOperator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["enum"]([
                "eq",
                "ne",
                "lt",
                "lte",
                "gt",
                "gte",
                "contains"
            ]).meta({
                description: "The operator to use for the filter"
            }).optional(),
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization ID to list members for. If not provided, will default to the user\'s active organization. Eg: "organization-id"'
            }).optional()
        }).optional(),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _ctx_query, _ctx_query1, _ctx_query2, _ctx_query3, _ctx_query4, _ctx_query5, _ctx_query6;
        const session = ctx.context.session;
        const organizationId = ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationId) || session.session.activeOrganizationId;
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const isMember = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!isMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION
            });
        }
        const { members, total } = await adapter.listMembers({
            organizationId,
            limit: ((_ctx_query1 = ctx.query) === null || _ctx_query1 === void 0 ? void 0 : _ctx_query1.limit) ? Number(ctx.query.limit) : void 0,
            offset: ((_ctx_query2 = ctx.query) === null || _ctx_query2 === void 0 ? void 0 : _ctx_query2.offset) ? Number(ctx.query.offset) : void 0,
            sortBy: (_ctx_query3 = ctx.query) === null || _ctx_query3 === void 0 ? void 0 : _ctx_query3.sortBy,
            sortOrder: (_ctx_query4 = ctx.query) === null || _ctx_query4 === void 0 ? void 0 : _ctx_query4.sortDirection,
            filter: ((_ctx_query5 = ctx.query) === null || _ctx_query5 === void 0 ? void 0 : _ctx_query5.filterField) ? {
                field: (_ctx_query6 = ctx.query) === null || _ctx_query6 === void 0 ? void 0 : _ctx_query6.filterField,
                operator: ctx.query.filterOperator,
                value: ctx.query.filterValue
            } : void 0
        });
        return ctx.json({
            members,
            total
        });
    });
const createOrganization = (options)=>{
    var _options_schema_organization, _options_schema;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_organization = _options_schema.organization) === null || _options_schema_organization === void 0 ? void 0 : _options_schema_organization.additionalFields) || {},
        isClientSide: true
    });
    const baseSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
        name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The name of the organization"
        }),
        slug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The slug of the organization"
        }),
        userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
            description: 'The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server. server-only. Eg: "user-id"'
        }).optional(),
        logo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: "The logo of the organization"
        }).optional(),
        metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).meta({
            description: "The metadata of the organization"
        }).optional(),
        keepCurrentActiveOrganization: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["boolean"]().meta({
            description: "Whether to keep the current active organization active after creating a new one. Eg: true"
        }).optional()
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/create", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            ...baseSchema.shape,
            ...additionalFieldsSchema.shape
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Create an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The organization that was created",
                                    $ref: "#/components/schemas/Organization"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _options2_organizationCreation, _options2_organizationHooks, _options2_teams, _options2_teams_defaultTeam, _options2_organizationCreation1, _options2_organizationHooks1;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        if (!session && (ctx.request || ctx.headers)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
        }
        let user = (session === null || session === void 0 ? void 0 : session.user) || null;
        if (!user) {
            if (!ctx.body.userId) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
            }
            user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
        }
        if (!user) {
            return ctx.json(null, {
                status: 401
            });
        }
        const options2 = ctx.context.orgOptions;
        const canCreateOrg = typeof (options2 === null || options2 === void 0 ? void 0 : options2.allowUserToCreateOrganization) === "function" ? await options2.allowUserToCreateOrganization(user) : (options2 === null || options2 === void 0 ? void 0 : options2.allowUserToCreateOrganization) === void 0 ? true : options2.allowUserToCreateOrganization;
        if (!canCreateOrg) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION
            });
        }
        const adapter = getOrgAdapter(ctx.context, options2);
        const userOrganizations = await adapter.listOrganizations(user.id);
        const hasReachedOrgLimit = typeof options2.organizationLimit === "number" ? userOrganizations.length >= options2.organizationLimit : typeof options2.organizationLimit === "function" ? await options2.organizationLimit(user) : false;
        if (hasReachedOrgLimit) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS
            });
        }
        const existingOrganization = await adapter.findOrganizationBySlug(ctx.body.slug);
        if (existingOrganization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_ALREADY_EXISTS
            });
        }
        const { keepCurrentActiveOrganization: _, userId: __, ...orgData } = ctx.body;
        if ((_options2_organizationCreation = options2.organizationCreation) === null || _options2_organizationCreation === void 0 ? void 0 : _options2_organizationCreation.beforeCreate) {
            const response = await options2.organizationCreation.beforeCreate({
                organization: {
                    ...orgData,
                    createdAt: /* @__PURE__ */ new Date()
                },
                user
            }, ctx.request);
            if (response && typeof response === "object" && "data" in response) {
                ctx.body = {
                    ...ctx.body,
                    ...response.data
                };
            }
        }
        if (options2 === null || options2 === void 0 ? void 0 : (_options2_organizationHooks = options2.organizationHooks) === null || _options2_organizationHooks === void 0 ? void 0 : _options2_organizationHooks.beforeCreateOrganization) {
            const response = await (options2 === null || options2 === void 0 ? void 0 : options2.organizationHooks.beforeCreateOrganization({
                organization: orgData,
                user
            }));
            if (response && typeof response === "object" && "data" in response) {
                ctx.body = {
                    ...ctx.body,
                    ...response.data
                };
            }
        }
        const organization = await adapter.createOrganization({
            organization: {
                ...orgData,
                createdAt: /* @__PURE__ */ new Date()
            }
        });
        let member;
        let teamMember = null;
        if ((options2 === null || options2 === void 0 ? void 0 : (_options2_teams = options2.teams) === null || _options2_teams === void 0 ? void 0 : _options2_teams.enabled) && ((_options2_teams_defaultTeam = options2.teams.defaultTeam) === null || _options2_teams_defaultTeam === void 0 ? void 0 : _options2_teams_defaultTeam.enabled) !== false) {
            var _options2_teams_defaultTeam_customCreateDefaultTeam, _options2_teams_defaultTeam1;
            const defaultTeam = await ((_options2_teams_defaultTeam1 = options2.teams.defaultTeam) === null || _options2_teams_defaultTeam1 === void 0 ? void 0 : (_options2_teams_defaultTeam_customCreateDefaultTeam = _options2_teams_defaultTeam1.customCreateDefaultTeam) === null || _options2_teams_defaultTeam_customCreateDefaultTeam === void 0 ? void 0 : _options2_teams_defaultTeam_customCreateDefaultTeam.call(_options2_teams_defaultTeam1, organization, ctx.request)) || await adapter.createTeam({
                organizationId: organization.id,
                name: "".concat(organization.name),
                createdAt: /* @__PURE__ */ new Date()
            });
            member = await adapter.createMember({
                userId: user.id,
                organizationId: organization.id,
                role: ctx.context.orgOptions.creatorRole || "owner"
            });
            teamMember = await adapter.findOrCreateTeamMember({
                teamId: defaultTeam.id,
                userId: user.id
            });
        } else {
            member = await adapter.createMember({
                userId: user.id,
                organizationId: organization.id,
                role: ctx.context.orgOptions.creatorRole || "owner"
            });
        }
        if ((_options2_organizationCreation1 = options2.organizationCreation) === null || _options2_organizationCreation1 === void 0 ? void 0 : _options2_organizationCreation1.afterCreate) {
            await options2.organizationCreation.afterCreate({
                organization,
                user,
                member
            }, ctx.request);
        }
        if (options2 === null || options2 === void 0 ? void 0 : (_options2_organizationHooks1 = options2.organizationHooks) === null || _options2_organizationHooks1 === void 0 ? void 0 : _options2_organizationHooks1.afterCreateOrganization) {
            await (options2 === null || options2 === void 0 ? void 0 : options2.organizationHooks.afterCreateOrganization({
                organization,
                user,
                member
            }));
        }
        if (ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {
            await adapter.setActiveOrganization(ctx.context.session.session.token, organization.id);
        }
        if (teamMember && ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {
            await adapter.setActiveTeam(ctx.context.session.session.token, teamMember.teamId);
        }
        return ctx.json({
            ...organization,
            metadata: ctx.body.metadata,
            members: [
                member
            ]
        });
    });
};
const checkOrganizationSlug = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/check-slug", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            slug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization slug to check. Eg: "my-org"'
            })
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ]
    }, async (ctx)=>{
        const orgAdapter = getOrgAdapter(ctx.context, options);
        const org = await orgAdapter.findOrganizationBySlug(ctx.body.slug);
        if (!org) {
            return ctx.json({
                status: true
            });
        }
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "slug is taken"
        });
    });
const updateOrganization = (options)=>{
    var _options_schema_organization, _options_schema;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_organization = _options_schema.organization) === null || _options_schema_organization === void 0 ? void 0 : _options_schema_organization.additionalFields) || {},
        isClientSide: true
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/update", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                ...additionalFieldsSchema.shape,
                name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The name of the organization"
                }).optional(),
                slug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The slug of the organization"
                }).optional(),
                logo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The logo of the organization"
                }).optional(),
                metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["any"]()).meta({
                    description: "The metadata of the organization"
                }).optional()
            }).partial(),
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization ID. Eg: "org-id"'
            }).optional()
        }),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Update an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The updated organization",
                                    $ref: "#/components/schemas/Organization"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = await ctx.context.getSession(ctx);
        if (!session) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                message: "User not found"
            });
        }
        const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const canUpdateOrg = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            permissions: {
                organization: [
                    "update"
                ]
            },
            role: member.role,
            options: ctx.context.orgOptions,
            organizationId
        }, ctx);
        if (!canUpdateOrg) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeUpdateOrganization) {
            const response = await options.organizationHooks.beforeUpdateOrganization({
                organization: ctx.body.data,
                user: session.user,
                member
            });
            if (response && typeof response === "object" && "data" in response) {
                ctx.body.data = {
                    ...ctx.body.data,
                    ...response.data
                };
            }
        }
        const updatedOrg = await adapter.updateOrganization(organizationId, ctx.body.data);
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterUpdateOrganization) {
            await options.organizationHooks.afterUpdateOrganization({
                organization: updatedOrg,
                user: session.user,
                member
            });
        }
        return ctx.json(updatedOrg);
    });
};
const deleteOrganization = (options)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/delete", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The organization id to delete"
            })
        }),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            openapi: {
                description: "Delete an organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "string",
                                    description: "The organization id that was deleted"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions_organizationDeletion, _options_organizationHooks, _options_organizationHooks1;
        const disableOrganizationDeletion = ((_ctx_context_orgOptions_organizationDeletion = ctx.context.orgOptions.organizationDeletion) === null || _ctx_context_orgOptions_organizationDeletion === void 0 ? void 0 : _ctx_context_orgOptions_organizationDeletion.disabled) || ctx.context.orgOptions.disableOrganizationDeletion;
        if (disableOrganizationDeletion) {
            var _ctx_context_orgOptions_organizationDeletion1;
            if ((_ctx_context_orgOptions_organizationDeletion1 = ctx.context.orgOptions.organizationDeletion) === null || _ctx_context_orgOptions_organizationDeletion1 === void 0 ? void 0 : _ctx_context_orgOptions_organizationDeletion1.disabled) {
                ctx.context.logger.info("`organizationDeletion.disabled` is deprecated. Use `disableOrganizationDeletion` instead");
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_FOUND", {
                message: "Organization deletion is disabled"
            });
        }
        const session = await ctx.context.getSession(ctx);
        if (!session) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                status: 401
            });
        }
        const organizationId = ctx.body.organizationId;
        if (!organizationId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
                }
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const canDeleteOrg = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            permissions: {
                organization: [
                    "delete"
                ]
            },
            organizationId,
            options: ctx.context.orgOptions
        }, ctx);
        if (!canDeleteOrg) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION
            });
        }
        if (organizationId === session.session.activeOrganizationId) {
            await adapter.setActiveOrganization(session.session.token, null);
        }
        const org = await adapter.findOrganizationById(organizationId);
        if (!org) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST");
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeDeleteOrganization) {
            await options.organizationHooks.beforeDeleteOrganization({
                organization: org,
                user: session.user
            });
        }
        await adapter.deleteOrganization(organizationId);
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterDeleteOrganization) {
            await options.organizationHooks.afterDeleteOrganization({
                organization: org,
                user: session.user
            });
        }
        return ctx.json(org);
    });
};
const getFullOrganization = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/get-full-organization", {
        method: "GET",
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The organization id to get"
            }).optional(),
            organizationSlug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The organization slug to get"
            }).optional(),
            membersLimit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["number"]().or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().transform((val)=>parseInt(val))).meta({
                description: "The limit of members to get. By default, it uses the membershipLimit option which defaults to 100."
            }).optional()
        })),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            openapi: {
                description: "Get the full organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The organization",
                                    $ref: "#/components/schemas/Organization"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_query, _ctx_query1, _ctx_query2, _ctx_context_orgOptions_teams, _ctx_query3;
        const session = ctx.context.session;
        const organizationId = ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationSlug) || ((_ctx_query1 = ctx.query) === null || _ctx_query1 === void 0 ? void 0 : _ctx_query1.organizationId) || session.session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.info("No active organization found, returning null");
            return ctx.json(null, {
                status: 200
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const organization = await adapter.findFullOrganization({
            organizationId,
            isSlug: !!((_ctx_query2 = ctx.query) === null || _ctx_query2 === void 0 ? void 0 : _ctx_query2.organizationSlug),
            includeTeams: (_ctx_context_orgOptions_teams = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams === void 0 ? void 0 : _ctx_context_orgOptions_teams.enabled,
            membersLimit: (_ctx_query3 = ctx.query) === null || _ctx_query3 === void 0 ? void 0 : _ctx_query3.membersLimit
        });
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const isMember = organization === null || organization === void 0 ? void 0 : organization.members.find((member)=>member.userId === session.user.id);
        if (!isMember) {
            await adapter.setActiveOrganization(session.session.token, null);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        return ctx.json(organization);
    });
const setActiveOrganization = (options)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/set-active", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization id to set as active. It can be null to unset the active organization. Eg: "org-id"'
            }).nullable().optional(),
            organizationSlug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided. Eg: "org-slug"'
            }).optional()
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            openapi: {
                description: "Set the active organization",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The organization",
                                    $ref: "#/components/schemas/Organization"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const adapter = getOrgAdapter(ctx.context, options);
        const session = ctx.context.session;
        let organizationId = ctx.body.organizationId;
        let organizationSlug = ctx.body.organizationSlug;
        if (organizationId === null) {
            const sessionOrgId = session.session.activeOrganizationId;
            if (!sessionOrgId) {
                return ctx.json(null);
            }
            const updatedSession2 = await adapter.setActiveOrganization(session.session.token, null);
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
                session: updatedSession2,
                user: session.user
            });
            return ctx.json(null);
        }
        if (!organizationId && !organizationSlug) {
            const sessionOrgId = session.session.activeOrganizationId;
            if (!sessionOrgId) {
                return ctx.json(null);
            }
            organizationId = sessionOrgId;
        }
        if (organizationSlug && !organizationId) {
            const organization2 = await adapter.findOrganizationBySlug(organizationSlug);
            if (!organization2) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
                });
            }
            organizationId = organization2.id;
        }
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const isMember = await adapter.checkMembership({
            userId: session.user.id,
            organizationId
        });
        if (!isMember) {
            await adapter.setActiveOrganization(session.session.token, null);
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        let organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const updatedSession = await adapter.setActiveOrganization(session.session.token, organization.id);
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
            session: updatedSession,
            user: session.user
        });
        return ctx.json(organization);
    });
};
const listOrganizations = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            openapi: {
                description: "List all organizations",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        $ref: "#/components/schemas/Organization"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const adapter = getOrgAdapter(ctx.context, options);
        const organizations = await adapter.listOrganizations(ctx.context.session.user.id);
        return ctx.json(organizations);
    });
const createTeam = (options)=>{
    var _options_schema_team, _options_schema;
    var _options_schema_team_additionalFields;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (_options_schema_team_additionalFields = options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_team = _options_schema.team) === null || _options_schema_team === void 0 ? void 0 : _options_schema_team.additionalFields) !== null && _options_schema_team_additionalFields !== void 0 ? _options_schema_team_additionalFields : {},
        isClientSide: true
    });
    const baseSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
        name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: 'The name of the team. Eg: "my-team"'
        }),
        organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
            description: 'The organization ID which the team will be created in. Defaults to the active organization. Eg: "organization-id"'
        }).optional()
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/create-team", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            ...baseSchema.shape,
            ...additionalFieldsSchema.shape
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Create a new team within an organization",
                responses: {
                    "200": {
                        description: "Team created successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "Unique identifier of the created team"
                                        },
                                        name: {
                                            type: "string",
                                            description: "Name of the team"
                                        },
                                        organizationId: {
                                            type: "string",
                                            description: "ID of the organization the team belongs to"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Timestamp when the team was created"
                                        },
                                        updatedAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Timestamp when the team was last updated"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "name",
                                        "organizationId",
                                        "createdAt",
                                        "updatedAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions_teams, _ctx_context_orgOptions_teams1, _ctx_context_orgOptions_teams2, _options_organizationHooks, _options_organizationHooks1;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        const organizationId = ctx.body.organizationId || (session === null || session === void 0 ? void 0 : session.session.activeOrganizationId);
        if (!session && (ctx.request || ctx.headers)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
        }
        if (!organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        if (session) {
            const member = await adapter.findMemberByOrgId({
                userId: session.user.id,
                organizationId
            });
            if (!member) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                    message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION
                });
            }
            const canCreate = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                role: member.role,
                options: ctx.context.orgOptions,
                permissions: {
                    team: [
                        "create"
                    ]
                },
                organizationId
            }, ctx);
            if (!canCreate) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                    message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION
                });
            }
        }
        const existingTeams = await adapter.listTeams(organizationId);
        const maximum = typeof ((_ctx_context_orgOptions_teams = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams === void 0 ? void 0 : _ctx_context_orgOptions_teams.maximumTeams) === "function" ? await ((_ctx_context_orgOptions_teams1 = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams1 === void 0 ? void 0 : _ctx_context_orgOptions_teams1.maximumTeams({
            organizationId,
            session
        }, ctx.request)) : (_ctx_context_orgOptions_teams2 = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams2 === void 0 ? void 0 : _ctx_context_orgOptions_teams2.maximumTeams;
        const maxTeamsReached = maximum ? existingTeams.length >= maximum : false;
        if (maxTeamsReached) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS
            });
        }
        const { name, organizationId: _, ...additionalFields } = ctx.body;
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        let teamData = {
            name,
            organizationId,
            createdAt: /* @__PURE__ */ new Date(),
            updatedAt: /* @__PURE__ */ new Date(),
            ...additionalFields
        };
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeCreateTeam) {
            const response = await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeCreateTeam({
                team: {
                    name,
                    organizationId,
                    ...additionalFields
                },
                user: session === null || session === void 0 ? void 0 : session.user,
                organization
            }));
            if (response && typeof response === "object" && "data" in response) {
                teamData = {
                    ...teamData,
                    ...response.data
                };
            }
        }
        const createdTeam = await adapter.createTeam(teamData);
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterCreateTeam) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterCreateTeam({
                team: createdTeam,
                user: session === null || session === void 0 ? void 0 : session.user,
                organization
            }));
        }
        return ctx.json(createdTeam);
    });
};
const removeTeam = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/remove-team", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The team ID of the team to remove. Eg: "team-id"'
            }),
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization ID which the team falls under. If not provided, it will default to the user\'s active organization. Eg: "organization-id"'
            }).optional()
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            openapi: {
                description: "Remove a team from an organization",
                responses: {
                    "200": {
                        description: "Team removed successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        message: {
                                            type: "string",
                                            description: "Confirmation message indicating successful removal",
                                            enum: [
                                                "Team removed successfully."
                                            ]
                                        }
                                    },
                                    required: [
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _ctx_context_orgOptions_teams, _options_organizationHooks, _options_organizationHooks1;
        const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(ctx);
        const organizationId = ctx.body.organizationId || (session === null || session === void 0 ? void 0 : session.session.activeOrganizationId);
        if (!organizationId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                }
            });
        }
        if (!session && (ctx.request || ctx.headers)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED");
        }
        const adapter = getOrgAdapter(ctx.context, options);
        if (session) {
            var _session_session;
            const member = await adapter.findMemberByOrgId({
                userId: session.user.id,
                organizationId
            });
            if (!member || ((_session_session = session.session) === null || _session_session === void 0 ? void 0 : _session_session.activeTeamId) === ctx.body.teamId) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                    message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM
                });
            }
            const canRemove = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                role: member.role,
                options: ctx.context.orgOptions,
                permissions: {
                    team: [
                        "delete"
                    ]
                },
                organizationId
            }, ctx);
            if (!canRemove) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                    message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION
                });
            }
        }
        const team = await adapter.findTeamById({
            teamId: ctx.body.teamId,
            organizationId
        });
        if (!team || team.organizationId !== organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
            });
        }
        if (!((_ctx_context_orgOptions_teams = ctx.context.orgOptions.teams) === null || _ctx_context_orgOptions_teams === void 0 ? void 0 : _ctx_context_orgOptions_teams.allowRemovingAllTeams)) {
            const teams = await adapter.listTeams(organizationId);
            if (teams.length <= 1) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: ORGANIZATION_ERROR_CODES.UNABLE_TO_REMOVE_LAST_TEAM
                });
            }
        }
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeDeleteTeam) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeDeleteTeam({
                team,
                user: session === null || session === void 0 ? void 0 : session.user,
                organization
            }));
        }
        await adapter.deleteTeam(team.id);
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterDeleteTeam) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterDeleteTeam({
                team,
                user: session === null || session === void 0 ? void 0 : session.user,
                organization
            }));
        }
        return ctx.json({
            message: "Team removed successfully."
        });
    });
const updateTeam = (options)=>{
    var _options_schema_team, _options_schema;
    var _options_schema_team_additionalFields;
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: (_options_schema_team_additionalFields = options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_team = _options_schema.team) === null || _options_schema_team === void 0 ? void 0 : _options_schema_team.additionalFields) !== null && _options_schema_team_additionalFields !== void 0 ? _options_schema_team_additionalFields : {},
        isClientSide: true
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/update-team", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The ID of the team to be updated. Eg: "team-id"'
            }),
            data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"].shape,
                ...additionalFieldsSchema.shape
            }).partial()
        }),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            $Infer: {
                body: {}
            },
            openapi: {
                description: "Update an existing team in an organization",
                responses: {
                    "200": {
                        description: "Team updated successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "Unique identifier of the updated team"
                                        },
                                        name: {
                                            type: "string",
                                            description: "Updated name of the team"
                                        },
                                        organizationId: {
                                            type: "string",
                                            description: "ID of the organization the team belongs to"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Timestamp when the team was created"
                                        },
                                        updatedAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Timestamp when the team was last updated"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "name",
                                        "organizationId",
                                        "createdAt",
                                        "updatedAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const organizationId = ctx.body.data.organizationId || session.session.activeOrganizationId;
        if (!organizationId) {
            return ctx.json(null, {
                status: 400,
                body: {
                    message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                }
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM
            });
        }
        const canUpdate = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: member.role,
            options: ctx.context.orgOptions,
            permissions: {
                team: [
                    "update"
                ]
            },
            organizationId
        }, ctx);
        if (!canUpdate) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM
            });
        }
        const team = await adapter.findTeamById({
            teamId: ctx.body.teamId,
            organizationId
        });
        if (!team || team.organizationId !== organizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
            });
        }
        const { name, organizationId: __, ...additionalFields } = ctx.body.data;
        const organization = await adapter.findOrganizationById(organizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const updates = {
            name,
            ...additionalFields
        };
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeUpdateTeam) {
            const response = await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeUpdateTeam({
                team,
                updates,
                user: session.user,
                organization
            }));
            if (response && typeof response === "object" && "data" in response) {
                var _options_organizationHooks2;
                const modifiedUpdates = response.data;
                const updatedTeam2 = await adapter.updateTeam(team.id, modifiedUpdates);
                if (options === null || options === void 0 ? void 0 : (_options_organizationHooks2 = options.organizationHooks) === null || _options_organizationHooks2 === void 0 ? void 0 : _options_organizationHooks2.afterUpdateTeam) {
                    await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterUpdateTeam({
                        team: updatedTeam2,
                        user: session.user,
                        organization
                    }));
                }
                return ctx.json(updatedTeam2);
            }
        }
        const updatedTeam = await adapter.updateTeam(team.id, updates);
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterUpdateTeam) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterUpdateTeam({
                team: updatedTeam,
                user: session.user,
                organization
            }));
        }
        return ctx.json(updatedTeam);
    });
};
const listOrganizationTeams = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-teams", {
        method: "GET",
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: 'The organization ID which the teams are under to list. Defaults to the users active organization. Eg: "organziation-id"'
            }).optional()
        })),
        requireHeaders: true,
        metadata: {
            openapi: {
                description: "List all teams in an organization",
                responses: {
                    "200": {
                        description: "Teams retrieved successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                        properties: {
                                            id: {
                                                type: "string",
                                                description: "Unique identifier of the team"
                                            },
                                            name: {
                                                type: "string",
                                                description: "Name of the team"
                                            },
                                            organizationId: {
                                                type: "string",
                                                description: "ID of the organization the team belongs to"
                                            },
                                            createdAt: {
                                                type: "string",
                                                format: "date-time",
                                                description: "Timestamp when the team was created"
                                            },
                                            updatedAt: {
                                                type: "string",
                                                format: "date-time",
                                                description: "Timestamp when the team was last updated"
                                            }
                                        },
                                        required: [
                                            "id",
                                            "name",
                                            "organizationId",
                                            "createdAt",
                                            "updatedAt"
                                        ]
                                    },
                                    description: "Array of team objects within the organization"
                                }
                            }
                        }
                    }
                }
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _ctx_query;
        const session = ctx.context.session;
        const organizationId = ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationId) || (session === null || session === void 0 ? void 0 : session.session.activeOrganizationId);
        if (!organizationId) {
            throw ctx.error("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const adapter = getOrgAdapter(ctx.context, options);
        const member = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: organizationId || ""
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION
            });
        }
        const teams = await adapter.listTeams(organizationId);
        return ctx.json(teams);
    });
const setActiveTeam = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/set-active-team", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The team id to set as active. It can be null to unset the active team"
            }).nullable().optional()
        }),
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"]
        ],
        metadata: {
            openapi: {
                description: "Set the active team",
                responses: {
                    "200": {
                        description: "Success",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The team",
                                    $ref: "#/components/schemas/Team"
                                }
                            }
                        }
                    }
                }
            }
        }
    }, async (ctx)=>{
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        const session = ctx.context.session;
        if (ctx.body.teamId === null) {
            const sessionTeamId = session.session.activeTeamId;
            if (!sessionTeamId) {
                return ctx.json(null);
            }
            const updatedSession2 = await adapter.setActiveTeam(session.session.token, null);
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
                session: updatedSession2,
                user: session.user
            });
            return ctx.json(null);
        }
        let teamId;
        if (!ctx.body.teamId) {
            const sessionTeamId = session.session.activeTeamId;
            if (!sessionTeamId) {
                return ctx.json(null);
            } else {
                teamId = sessionTeamId;
            }
        } else {
            teamId = ctx.body.teamId;
        }
        const team = await adapter.findTeamById({
            teamId
        });
        if (!team) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
            });
        }
        const member = await adapter.findTeamMember({
            teamId,
            userId: session.user.id
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM
            });
        }
        const updatedSession = await adapter.setActiveTeam(session.session.token, team.id);
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$UfVWArIB$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(ctx, {
            session: updatedSession,
            user: session.user
        });
        return ctx.json(team);
    });
const listUserTeams = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-user-teams", {
        method: "GET",
        metadata: {
            openapi: {
                description: "List all teams that the current user is a part of.",
                responses: {
                    "200": {
                        description: "Teams retrieved successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                        description: "The team",
                                        $ref: "#/components/schemas/Team"
                                    },
                                    description: "Array of team objects within the organization"
                                }
                            }
                        }
                    }
                }
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        const teams = await adapter.listTeamsByUser({
            userId: session.user.id
        });
        return ctx.json(teams);
    });
const listTeamMembers = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-team-members", {
        method: "GET",
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optional"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The team whose members we should return. If this is not provided the members of the current active team get returned."
            })
        })),
        metadata: {
            openapi: {
                description: "List the members of the given team.",
                responses: {
                    "200": {
                        description: "Teams retrieved successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "array",
                                    items: {
                                        type: "object",
                                        description: "The team member",
                                        properties: {
                                            id: {
                                                type: "string",
                                                description: "Unique identifier of the team member"
                                            },
                                            userId: {
                                                type: "string",
                                                description: "The user ID of the team member"
                                            },
                                            teamId: {
                                                type: "string",
                                                description: "The team ID of the team the team member is in"
                                            },
                                            createdAt: {
                                                type: "string",
                                                format: "date-time",
                                                description: "Timestamp when the team member was created"
                                            }
                                        },
                                        required: [
                                            "id",
                                            "userId",
                                            "teamId",
                                            "createdAt"
                                        ]
                                    },
                                    description: "Array of team member objects within the team"
                                }
                            }
                        }
                    }
                }
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _ctx_query;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        let teamId = ((_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.teamId) || (session === null || session === void 0 ? void 0 : session.session.activeTeamId);
        if (!teamId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM
            });
        }
        const member = await adapter.findTeamMember({
            userId: session.user.id,
            teamId
        });
        if (!member) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM
            });
        }
        const members = await adapter.listTeamMembers({
            teamId
        });
        return ctx.json(members);
    });
const addTeamMember = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/add-team-member", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The team the user should be a member of."
            }),
            userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                description: "The user Id which represents the user to be added as a member."
            })
        }),
        metadata: {
            openapi: {
                description: "The newly created member",
                responses: {
                    "200": {
                        description: "Team member created successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    description: "The team member",
                                    properties: {
                                        id: {
                                            type: "string",
                                            description: "Unique identifier of the team member"
                                        },
                                        userId: {
                                            type: "string",
                                            description: "The user ID of the team member"
                                        },
                                        teamId: {
                                            type: "string",
                                            description: "The team ID of the team the team member is in"
                                        },
                                        createdAt: {
                                            type: "string",
                                            format: "date-time",
                                            description: "Timestamp when the team member was created"
                                        }
                                    },
                                    required: [
                                        "id",
                                        "userId",
                                        "teamId",
                                        "createdAt"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        if (!session.session.activeOrganizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const currentMember = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: session.session.activeOrganizationId
        });
        if (!currentMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const canUpdateMember = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: currentMember.role,
            options: ctx.context.orgOptions,
            permissions: {
                member: [
                    "update"
                ]
            },
            organizationId: session.session.activeOrganizationId
        }, ctx);
        if (!canUpdateMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER
            });
        }
        const toBeAddedMember = await adapter.findMemberByOrgId({
            userId: ctx.body.userId,
            organizationId: session.session.activeOrganizationId
        });
        if (!toBeAddedMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const team = await adapter.findTeamById({
            teamId: ctx.body.teamId,
            organizationId: session.session.activeOrganizationId
        });
        if (!team) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
            });
        }
        const organization = await adapter.findOrganizationById(session.session.activeOrganizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const userBeingAdded = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
        if (!userBeingAdded) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "User not found"
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeAddTeamMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeAddTeamMember({
                teamMember: {
                    teamId: ctx.body.teamId,
                    userId: ctx.body.userId
                },
                team,
                user: userBeingAdded,
                organization
            }));
        }
        const teamMember = await adapter.findOrCreateTeamMember({
            teamId: ctx.body.teamId,
            userId: ctx.body.userId
        });
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterAddTeamMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterAddTeamMember({
                teamMember,
                team,
                user: userBeingAdded,
                organization
            }));
        }
        return ctx.json(teamMember);
    });
const removeTeamMember = (options)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/remove-team-member", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            teamId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The team the user should be removed from."
            }),
            userId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["coerce"].string().meta({
                description: "The user which should be removed from the team."
            })
        }),
        metadata: {
            openapi: {
                description: "Remove a member from a team",
                responses: {
                    "200": {
                        description: "Team member removed successfully",
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        message: {
                                            type: "string",
                                            description: "Confirmation message indicating successful removal",
                                            enum: [
                                                "Team member removed successfully."
                                            ]
                                        }
                                    },
                                    required: [
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _options_organizationHooks, _options_organizationHooks1;
        const session = ctx.context.session;
        const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);
        if (!session.session.activeOrganizationId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
            });
        }
        const currentMember = await adapter.findMemberByOrgId({
            userId: session.user.id,
            organizationId: session.session.activeOrganizationId
        });
        if (!currentMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const canDeleteMember = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            role: currentMember.role,
            options: ctx.context.orgOptions,
            permissions: {
                member: [
                    "delete"
                ]
            },
            organizationId: session.session.activeOrganizationId
        }, ctx);
        if (!canDeleteMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER
            });
        }
        const toBeAddedMember = await adapter.findMemberByOrgId({
            userId: ctx.body.userId,
            organizationId: session.session.activeOrganizationId
        });
        if (!toBeAddedMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
            });
        }
        const team = await adapter.findTeamById({
            teamId: ctx.body.teamId,
            organizationId: session.session.activeOrganizationId
        });
        if (!team) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND
            });
        }
        const organization = await adapter.findOrganizationById(session.session.activeOrganizationId);
        if (!organization) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND
            });
        }
        const userBeingRemoved = await ctx.context.internalAdapter.findUserById(ctx.body.userId);
        if (!userBeingRemoved) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "User not found"
            });
        }
        const teamMember = await adapter.findTeamMember({
            teamId: ctx.body.teamId,
            userId: ctx.body.userId
        });
        if (!teamMember) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM
            });
        }
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks = options.organizationHooks) === null || _options_organizationHooks === void 0 ? void 0 : _options_organizationHooks.beforeRemoveTeamMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.beforeRemoveTeamMember({
                teamMember,
                team,
                user: userBeingRemoved,
                organization
            }));
        }
        await adapter.removeTeamMember({
            teamId: ctx.body.teamId,
            userId: ctx.body.userId
        });
        if (options === null || options === void 0 ? void 0 : (_options_organizationHooks1 = options.organizationHooks) === null || _options_organizationHooks1 === void 0 ? void 0 : _options_organizationHooks1.afterRemoveTeamMember) {
            await (options === null || options === void 0 ? void 0 : options.organizationHooks.afterRemoveTeamMember({
                teamMember,
                team,
                user: userBeingRemoved,
                organization
            }));
        }
        return ctx.json({
            message: "Team member removed successfully."
        });
    });
const normalizeRoleName = (x)=>x.role.toLowerCase();
const DEFAULT_MAXIMUM_ROLES_PER_ORGANIZATION = Number.POSITIVE_INFINITY;
const getAdditionalFields = function(options) {
    let shouldBePartial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var _options_schema_organizationRole, _options_schema;
    let additionalFields = (options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_organizationRole = _options_schema.organizationRole) === null || _options_schema_organizationRole === void 0 ? void 0 : _options_schema_organizationRole.additionalFields) || {};
    if (shouldBePartial) {
        for(const key in additionalFields){
            additionalFields[key].required = false;
        }
    }
    const additionalFieldsSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DrJWSFx6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["t"])({
        fields: additionalFields,
        isClientSide: true
    });
    return {
        additionalFieldsSchema,
        $AdditionalFields: {},
        $ReturnAdditionalFields: {}
    };
};
const createOrgRole = (options)=>{
    const { additionalFieldsSchema } = getAdditionalFields(options, false);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/create-role", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The id of the organization to create the role in. If not provided, the user's active organization will be used."
            }),
            role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                description: "The name of the role to create"
            }),
            permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).meta({
                description: "The permission to assign to the role"
            }),
            additionalFields: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                ...additionalFieldsSchema.shape
            }).optional()
        }),
        metadata: {
            $Infer: {
                body: {}
            }
        },
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        var _options_dynamicAccessControl, _options_dynamicAccessControl1;
        const { session, user } = ctx.context.session;
        let roleName = ctx.body.role;
        const permission = ctx.body.permission;
        const additionalFields = ctx.body.additionalFields;
        const ac = options.ac;
        if (!ac) {
            ctx.context.logger.error("[Dynamic Access Control] The organization plugin is missing a pre-defined ac instance.", "\nPlease refer to the documentation here: https://better-auth.com/docs/plugins/organization#dynamic-access-control");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_IMPLEMENTED", {
                message: "Dynamic Access Control requires a pre-defined ac instance on the server auth plugin. Read server logs for more information."
            });
        }
        var _ctx_body_organizationId;
        const organizationId = (_ctx_body_organizationId = ctx.body.organizationId) !== null && _ctx_body_organizationId !== void 0 ? _ctx_body_organizationId : session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.error("[Dynamic Access Control] The session is missing an active organization id to create a role. Either set an active org id, or pass an organizationId in the request body.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "You must be in an organization to create a role."
            });
        }
        roleName = normalizeRoleName({
            role: roleName
        });
        await checkIfRoleNameIsTakenByPreDefinedRole({
            role: roleName,
            organizationId,
            options,
            ctx
        });
        const member = await ctx.context.adapter.findOne({
            model: "member",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                {
                    field: "userId",
                    value: user.id,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (!member) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not a member of the organization to create a role.", {
                userId: user.id,
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization."
            });
        }
        const canCreateRole = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            options,
            organizationId,
            permissions: {
                ac: [
                    "create"
                ]
            },
            role: member.role
        }, ctx);
        if (!canCreateRole) {
            ctx.context.logger.error('[Dynamic Access Control] The user is not permitted to create a role. If this is unexpected, please make sure the role associated to that member has the "ac" resource with the "create" permission.', {
                userId: user.id,
                organizationId,
                role: member.role
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not permitted to create a role."
            });
        }
        var _options_dynamicAccessControl_maximumRolesPerOrganization;
        const maximumRolesPerOrganization = typeof ((_options_dynamicAccessControl = options.dynamicAccessControl) === null || _options_dynamicAccessControl === void 0 ? void 0 : _options_dynamicAccessControl.maximumRolesPerOrganization) === "function" ? await options.dynamicAccessControl.maximumRolesPerOrganization(organizationId) : (_options_dynamicAccessControl_maximumRolesPerOrganization = (_options_dynamicAccessControl1 = options.dynamicAccessControl) === null || _options_dynamicAccessControl1 === void 0 ? void 0 : _options_dynamicAccessControl1.maximumRolesPerOrganization) !== null && _options_dynamicAccessControl_maximumRolesPerOrganization !== void 0 ? _options_dynamicAccessControl_maximumRolesPerOrganization : DEFAULT_MAXIMUM_ROLES_PER_ORGANIZATION;
        const rolesInDB = await ctx.context.adapter.count({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (rolesInDB >= maximumRolesPerOrganization) {
            ctx.context.logger.error("[Dynamic Access Control] Failed to create a new role, the organization has too many roles. Maximum allowed roles is ".concat(maximumRolesPerOrganization, "."), {
                organizationId,
                maximumRolesPerOrganization,
                rolesInDB
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "The organization has too many roles. Please delete some roles to create a new one."
            });
        }
        await checkForInvalidResources({
            ac,
            ctx,
            permission
        });
        await checkIfMemberHasPermission({
            ctx,
            member,
            options,
            organizationId,
            permissionRequired: permission,
            user,
            action: "create"
        });
        await checkIfRoleNameIsTakenByRoleInDB({
            ctx,
            organizationId,
            role: roleName
        });
        const newRole = ac.newRole(permission);
        const newRoleInDB = await ctx.context.adapter.create({
            model: "organizationRole",
            data: {
                createdAt: /* @__PURE__ */ new Date(),
                organizationId,
                permission: JSON.stringify(permission),
                role: roleName,
                ...additionalFields
            }
        });
        const data = {
            ...newRoleInDB,
            permission
        };
        return ctx.json({
            success: true,
            roleData: data,
            statements: newRole.statements
        });
    });
};
const deleteOrgRole = (options)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/delete-role", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The id of the organization to create the role in. If not provided, the user's active organization will be used."
            })
        }).and(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The name of the role to delete"
                })
            }),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The id of the role to delete"
                })
            })
        ])),
        requireHeaders: true,
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        metadata: {
            $Infer: {
                body: {}
            }
        }
    }, async (ctx)=>{
        const { session, user } = ctx.context.session;
        var _ctx_body_organizationId;
        const organizationId = (_ctx_body_organizationId = ctx.body.organizationId) !== null && _ctx_body_organizationId !== void 0 ? _ctx_body_organizationId : session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.error("[Dynamic Access Control] The session is missing an active organization id to delete a role. Either set an active org id, or pass an organizationId in the request body.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "You must be in an organization to delete a role."
            });
        }
        const member = await ctx.context.adapter.findOne({
            model: "member",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                {
                    field: "userId",
                    value: user.id,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (!member) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not a member of the organization to delete a role.", {
                userId: user.id,
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization."
            });
        }
        const canDeleteRole = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            options,
            organizationId,
            permissions: {
                ac: [
                    "delete"
                ]
            },
            role: member.role
        }, ctx);
        if (!canDeleteRole) {
            ctx.context.logger.error('[Dynamic Access Control] The user is not permitted to delete a role. If this is unexpected, please make sure the role associated to that member has the "ac" resource with the "delete" permission.', {
                userId: user.id,
                organizationId,
                role: member.role
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not permitted to delete a role."
            });
        }
        if ("roleName" in ctx.body) {
            const roleName = ctx.body.roleName;
            const defaultRoles = options.roles ? Object.keys(options.roles) : [
                "owner",
                "admin",
                "member"
            ];
            if (defaultRoles.includes(roleName)) {
                ctx.context.logger.error("[Dynamic Access Control] Cannot delete a pre-defined role.", {
                    roleName,
                    organizationId,
                    defaultRoles
                });
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                    message: "Cannot delete a pre-defined role."
                });
            }
        }
        let condition;
        if ("roleName" in ctx.body) {
            condition = {
                field: "role",
                value: ctx.body.roleName,
                operator: "eq",
                connector: "AND"
            };
        } else {
            condition = {
                field: "id",
                value: ctx.body.roleId,
                operator: "eq",
                connector: "AND"
            };
        }
        const existingRoleInDB = await ctx.context.adapter.findOne({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                condition
            ]
        });
        if (!existingRoleInDB) {
            ctx.context.logger.error("[Dynamic Access Control] The role name/id does not exist in the database.", {
                ..."roleName" in ctx.body ? {
                    roleName: ctx.body.roleName
                } : {
                    roleId: ctx.body.roleId
                },
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "The provided role name or id does not exist."
            });
        }
        existingRoleInDB.permission = JSON.parse(existingRoleInDB.permission);
        await ctx.context.adapter.delete({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                condition
            ]
        });
        return ctx.json({
            success: true
        });
    });
};
const listOrgRoles = (options)=>{
    getAdditionalFields(options, false);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/list-roles", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The id of the organization to list roles for. If not provided, the user's active organization will be used."
            })
        }).optional()
    }, async (ctx)=>{
        var _ctx_query;
        const { session, user } = ctx.context.session;
        var _ctx_query_organizationId;
        const organizationId = (_ctx_query_organizationId = (_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationId) !== null && _ctx_query_organizationId !== void 0 ? _ctx_query_organizationId : session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.error("[Dynamic Access Control] The session is missing an active organization id to list roles. Either set an active org id, or pass an organizationId in the request query.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "You must be in an organization to list roles."
            });
        }
        const member = await ctx.context.adapter.findOne({
            model: "member",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (!member) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not a member of the organization to list roles.", {
                userId: user.id,
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization."
            });
        }
        const canListRoles = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            options,
            organizationId,
            permissions: {
                ac: [
                    "read"
                ]
            },
            role: member.role
        }, ctx);
        if (!canListRoles) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not permitted to list roles.", {
                userId: user.id,
                organizationId,
                role: member.role
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not permitted to list roles."
            });
        }
        let roles = await ctx.context.adapter.findMany({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        roles = roles.map((x)=>({
                ...x,
                permission: JSON.parse(x.permission)
            }));
        return ctx.json(roles);
    });
};
const getOrgRole = (options)=>{
    getAdditionalFields(options, false);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/get-role", {
        method: "GET",
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ],
        query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The id of the organization to read a role for. If not provided, the user's active organization will be used."
            })
        }).and(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The name of the role to read"
                })
            }),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The id of the role to read"
                })
            })
        ])).optional(),
        metadata: {
            $Infer: {
                query: {}
            }
        }
    }, async (ctx)=>{
        var _ctx_query;
        const { session, user } = ctx.context.session;
        var _ctx_query_organizationId;
        const organizationId = (_ctx_query_organizationId = (_ctx_query = ctx.query) === null || _ctx_query === void 0 ? void 0 : _ctx_query.organizationId) !== null && _ctx_query_organizationId !== void 0 ? _ctx_query_organizationId : session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.error("[Dynamic Access Control] The session is missing an active organization id to read a role. Either set an active org id, or pass an organizationId in the request query.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "You must be in an organization to read a role."
            });
        }
        const member = await ctx.context.adapter.findOne({
            model: "member",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (!member) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not a member of the organization to read a role.", {
                userId: user.id,
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization."
            });
        }
        const canListRoles = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            options,
            organizationId,
            permissions: {
                ac: [
                    "read"
                ]
            },
            role: member.role
        }, ctx);
        if (!canListRoles) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not permitted to read a role.", {
                userId: user.id,
                organizationId,
                role: member.role
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not permitted to read a role."
            });
        }
        let condition;
        if ("roleName" in ctx.query) {
            condition = {
                field: "role",
                value: ctx.query.roleName,
                operator: "eq",
                connector: "AND"
            };
        } else {
            condition = {
                field: "id",
                value: ctx.query.roleId,
                operator: "eq",
                connector: "AND"
            };
        }
        let role = await ctx.context.adapter.findOne({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                condition
            ]
        });
        if (!role) {
            ctx.context.logger.error("[Dynamic Access Control] The role name/id does not exist in the database.", {
                ..."roleName" in ctx.query ? {
                    roleName: ctx.query.roleName
                } : {
                    roleId: ctx.query.roleId
                },
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "That role does not exist."
            });
        }
        role.permission = JSON.parse(role.permission);
        return ctx.json(role);
    });
};
const updateOrgRole = (options)=>{
    const { additionalFieldsSchema } = getAdditionalFields(options, true);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/update-role", {
        method: "POST",
        body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
            organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                description: "The id of the organization to update the role in. If not provided, the user's active organization will be used."
            }),
            data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())).optional().meta({
                    description: "The permission to update the role with"
                }),
                roleName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional().meta({
                    description: "The name of the role to update"
                }),
                ...additionalFieldsSchema.shape
            })
        }).and(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleName: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The name of the role to update"
                })
            }),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                roleId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().meta({
                    description: "The id of the role to update"
                })
            })
        ])),
        metadata: {
            $Infer: {
                body: {}
            }
        },
        use: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ]
    }, async (ctx)=>{
        const { session, user } = ctx.context.session;
        const ac = options.ac;
        if (!ac) {
            ctx.context.logger.error("[Dynamic Access Control] The organization plugin is missing a pre-defined ac instance.", "\nPlease refer to the documentation here: https://better-auth.com/docs/plugins/organization#dynamic-access-control");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("NOT_IMPLEMENTED", {
                message: "Dynamic Access Control requires a pre-defined ac instance on the server auth plugin. Read server logs for more information."
            });
        }
        var _ctx_body_organizationId;
        const organizationId = (_ctx_body_organizationId = ctx.body.organizationId) !== null && _ctx_body_organizationId !== void 0 ? _ctx_body_organizationId : session.activeOrganizationId;
        if (!organizationId) {
            ctx.context.logger.error("[Dynamic Access Control] The session is missing an active organization id to update a role. Either set an active org id, or pass an organizationId in the request body.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "You must be in an organization to update a role."
            });
        }
        const member = await ctx.context.adapter.findOne({
            model: "member",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                }
            ]
        });
        if (!member) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not a member of the organization to update a role.", {
                userId: user.id,
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not a member of this organization."
            });
        }
        const canUpdateRole = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
            options,
            organizationId,
            role: member.role,
            permissions: {
                ac: [
                    "update"
                ]
            }
        }, ctx);
        if (!canUpdateRole) {
            ctx.context.logger.error("[Dynamic Access Control] The user is not permitted to update a role.");
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
                message: "You are not permitted to update a role."
            });
        }
        let condition;
        if ("roleName" in ctx.body) {
            condition = {
                field: "role",
                value: ctx.body.roleName,
                operator: "eq",
                connector: "AND"
            };
        } else {
            condition = {
                field: "id",
                value: ctx.body.roleId,
                operator: "eq",
                connector: "AND"
            };
        }
        let role = await ctx.context.adapter.findOne({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                condition
            ]
        });
        if (!role) {
            ctx.context.logger.error("[Dynamic Access Control] The role name/id does not exist in the database.", {
                ..."roleName" in ctx.body ? {
                    roleName: ctx.body.roleName
                } : {
                    roleId: ctx.body.roleId
                },
                organizationId
            });
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                message: "That role does not exist."
            });
        }
        role.permission = role.permission ? JSON.parse(role.permission) : void 0;
        const { permission: _, roleName: __, ...additionalFields } = ctx.body.data;
        let updateData = {
            ...additionalFields
        };
        if (ctx.body.data.permission) {
            let newPermission = ctx.body.data.permission;
            await checkForInvalidResources({
                ac,
                ctx,
                permission: newPermission
            });
            await checkIfMemberHasPermission({
                ctx,
                member,
                options,
                organizationId,
                permissionRequired: newPermission,
                user,
                action: "update"
            });
            updateData.permission = newPermission;
        }
        if (ctx.body.data.roleName) {
            let newRoleName = ctx.body.data.roleName;
            newRoleName = normalizeRoleName({
                role: newRoleName
            });
            await checkIfRoleNameIsTakenByPreDefinedRole({
                role: newRoleName,
                organizationId,
                options,
                ctx
            });
            await checkIfRoleNameIsTakenByRoleInDB({
                role: newRoleName,
                organizationId,
                ctx
            });
            updateData.role = newRoleName;
        }
        const update = {
            ...updateData,
            ...updateData.permission ? {
                permission: JSON.stringify(updateData.permission)
            } : {}
        };
        await ctx.context.adapter.update({
            model: "organizationRole",
            where: [
                {
                    field: "organizationId",
                    value: organizationId,
                    operator: "eq",
                    connector: "AND"
                },
                condition
            ],
            update
        });
        return ctx.json({
            success: true,
            roleData: {
                ...role,
                ...update,
                permission: updateData.permission || role.permission || null
            }
        });
    });
};
async function checkForInvalidResources(param) {
    let { ac, ctx, permission } = param;
    const validResources = Object.keys(ac.statements);
    const providedResources = Object.keys(permission);
    const hasInvalidResource = providedResources.some((r)=>!validResources.includes(r));
    if (hasInvalidResource) {
        ctx.context.logger.error("[Dynamic Access Control] The provided permission includes an invalid resource.", {
            providedResources,
            validResources
        });
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "The provided permission includes an invalid resource."
        });
    }
}
async function checkIfMemberHasPermission(param) {
    let { ctx, permissionRequired: permission, options, organizationId, member, user, action } = param;
    const hasNecessaryPermissions = [];
    const permissionEntries = Object.entries(permission);
    for await (const [resource, permissions] of permissionEntries){
        for await (const perm of permissions){
            hasNecessaryPermissions.push({
                resource: {
                    [resource]: [
                        perm
                    ]
                },
                hasPermission: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    options,
                    organizationId,
                    permissions: {
                        [resource]: [
                            perm
                        ]
                    },
                    useMemoryCache: true,
                    role: member.role
                }, ctx)
            });
        }
    }
    const missingPermissions = hasNecessaryPermissions.filter((x)=>x.hasPermission === false).map((x)=>{
        const key = Object.keys(x.resource)[0];
        return "".concat(key, ":").concat(x.resource[key][0]);
    });
    if (missingPermissions.length > 0) {
        ctx.context.logger.error("[Dynamic Access Control] The user is missing permissions nessesary to ".concat(action, " a role with those set of permissions.\n"), {
            userId: user.id,
            organizationId,
            role: member.role,
            missingPermissions
        });
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("FORBIDDEN", {
            message: "You are not permitted to ".concat(action, " a role with those set of permissions. Please get someone with high enough permissions to ").concat(action, " this role."),
            missingPermissions
        });
    }
}
async function checkIfRoleNameIsTakenByPreDefinedRole(param) {
    let { options, organizationId, role, ctx } = param;
    const defaultRoles = options.roles ? Object.keys(options.roles) : [
        "owner",
        "admin",
        "member"
    ];
    if (defaultRoles.includes(role)) {
        ctx.context.logger.error('[Dynamic Access Control] The role name "'.concat(role, '" is already taken by a pre-defined role.'), {
            role,
            organizationId,
            defaultRoles
        });
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "That role name is already taken."
        });
    }
}
async function checkIfRoleNameIsTakenByRoleInDB(param) {
    let { organizationId, role, ctx } = param;
    const existingRoleInDB = await ctx.context.adapter.findOne({
        model: "organizationRole",
        where: [
            {
                field: "organizationId",
                value: organizationId,
                operator: "eq",
                connector: "AND"
            },
            {
                field: "role",
                value: role,
                operator: "eq",
                connector: "AND"
            }
        ]
    });
    if (existingRoleInDB) {
        ctx.context.logger.error('[Dynamic Access Control] The role name "'.concat(role, '" is already taken by a role in the database.'), {
            role,
            organizationId
        });
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
            message: "That role name is already taken."
        });
    }
}
function parseRoles(roles) {
    return Array.isArray(roles) ? roles.join(",") : roles;
}
const organization = (options)=>{
    var _options_teams, _options_dynamicAccessControl, _options_schema_team, _options_schema, _options_schema_team_fields, _options_schema_team1, _options_schema1, _options_schema_team_fields1, _options_schema_team2, _options_schema2, _options_schema_team_fields2, _options_schema_team3, _options_schema3, _options_schema_team_fields3, _options_schema_team4, _options_schema4, _options_schema_team5, _options_schema5, _options_schema_teamMember, _options_schema6, _options_schema_teamMember_fields, _options_schema_teamMember1, _options_schema7, _options_schema_teamMember_fields1, _options_schema_teamMember2, _options_schema8, _options_schema_teamMember_fields2, _options_schema_teamMember3, _options_schema9, _options_dynamicAccessControl1, _options_schema_organizationRole_fields, _options_schema_organizationRole, _options_schema10, _options_schema_organizationRole_fields1, _options_schema_organizationRole1, _options_schema11, _options_schema_organizationRole_fields2, _options_schema_organizationRole2, _options_schema12, _options_schema_organizationRole_fields3, _options_schema_organizationRole3, _options_schema13, _options_schema_organizationRole_fields4, _options_schema_organizationRole4, _options_schema14, _options_schema_organizationRole5, _options_schema15, _options_schema_organizationRole6, _options_schema16, _options_schema_organization, _options_schema17, _options_schema_organization_fields, _options_schema_organization1, _options_schema18, _options_schema_organization_fields1, _options_schema_organization2, _options_schema19, _options_schema_organization_fields2, _options_schema_organization3, _options_schema20, _options_schema_organization_fields3, _options_schema_organization4, _options_schema21, _options_schema_organization_fields4, _options_schema_organization5, _options_schema22, _options_schema_organization6, _options_schema23, _options_schema_member, _options_schema24, _options_schema_member_fields, _options_schema_member1, _options_schema25, _options_schema_member_fields1, _options_schema_member2, _options_schema26, _options_schema_member_fields2, _options_schema_member3, _options_schema27, _options_schema_member_fields3, _options_schema_member4, _options_schema28, _options_schema_member5, _options_schema29, _options_schema_invitation, _options_schema30, _options_schema_invitation_fields, _options_schema_invitation1, _options_schema31, _options_schema_invitation_fields1, _options_schema_invitation2, _options_schema32, _options_schema_invitation_fields2, _options_schema_invitation3, _options_schema33, _options_schema_invitation_fields3, _options_schema_invitation4, _options_schema34, _options_schema_invitation_fields4, _options_schema_invitation5, _options_schema35, _options_schema_invitation_fields5, _options_schema_invitation6, _options_schema36, _options_schema_invitation_fields6, _options_schema_invitation7, _options_schema37, _options_schema_invitation8, _options_schema38, _options_schema_session_fields, _options_schema_session, _options_schema39, _options_schema_session_fields1, _options_schema_session1, _options_schema40;
    let endpoints = {
        /**
     * ### Endpoint
     *
     * POST `/organization/create`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.createOrganization`
     *
     * **client:**
     * `authClient.organization.create`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create)
     */ createOrganization: createOrganization(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/update`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.updateOrganization`
     *
     * **client:**
     * `authClient.organization.update`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update)
     */ updateOrganization: updateOrganization(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/delete`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.deleteOrganization`
     *
     * **client:**
     * `authClient.organization.delete`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-delete)
     */ deleteOrganization: deleteOrganization(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/set-active`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.setActiveOrganization`
     *
     * **client:**
     * `authClient.organization.setActive`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-set-active)
     */ setActiveOrganization: setActiveOrganization(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/get-full-organization`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.getFullOrganization`
     *
     * **client:**
     * `authClient.organization.getFullOrganization`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-full-organization)
     */ getFullOrganization: getFullOrganization(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/list`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listOrganizations`
     *
     * **client:**
     * `authClient.organization.list`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list)
     */ listOrganizations: listOrganizations(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/invite-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.createInvitation`
     *
     * **client:**
     * `authClient.organization.inviteMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-invite-member)
     */ createInvitation: createInvitation(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/cancel-invitation`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.cancelInvitation`
     *
     * **client:**
     * `authClient.organization.cancelInvitation`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-cancel-invitation)
     */ cancelInvitation: cancelInvitation(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/accept-invitation`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.acceptInvitation`
     *
     * **client:**
     * `authClient.organization.acceptInvitation`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-accept-invitation)
     */ acceptInvitation: acceptInvitation(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/get-invitation`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.getInvitation`
     *
     * **client:**
     * `authClient.organization.getInvitation`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-invitation)
     */ getInvitation: getInvitation(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/reject-invitation`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.rejectInvitation`
     *
     * **client:**
     * `authClient.organization.rejectInvitation`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-reject-invitation)
     */ rejectInvitation: rejectInvitation(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/list-invitations`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listInvitations`
     *
     * **client:**
     * `authClient.organization.listInvitations`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-invitations)
     */ listInvitations: listInvitations(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/get-active-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.getActiveMember`
     *
     * **client:**
     * `authClient.organization.getActiveMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-active-member)
     */ getActiveMember: getActiveMember(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/check-slug`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.checkOrganizationSlug`
     *
     * **client:**
     * `authClient.organization.checkSlug`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-check-slug)
     */ checkOrganizationSlug: checkOrganizationSlug(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/add-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.addMember`
     *
     * **client:**
     * `authClient.organization.addMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-add-member)
     */ addMember: addMember(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/remove-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.removeMember`
     *
     * **client:**
     * `authClient.organization.removeMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-member)
     */ removeMember: removeMember(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/update-member-role`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.updateMemberRole`
     *
     * **client:**
     * `authClient.organization.updateMemberRole`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-member-role)
     */ updateMemberRole: updateMemberRole(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/leave`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.leaveOrganization`
     *
     * **client:**
     * `authClient.organization.leave`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-leave)
     */ leaveOrganization: leaveOrganization(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/list-members`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listMembers`
     *
     * **client:**
     * `authClient.organization.listMembers`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-members)
     */ listUserInvitations: listUserInvitations(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/list-members`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listMembers`
     *
     * **client:**
     * `authClient.organization.listMembers`
     */ listMembers: listMembers(options)
    };
    const teamSupport = options === null || options === void 0 ? void 0 : (_options_teams = options.teams) === null || _options_teams === void 0 ? void 0 : _options_teams.enabled;
    const teamEndpoints = {
        /**
     * ### Endpoint
     *
     * POST `/organization/create-team`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.createTeam`
     *
     * **client:**
     * `authClient.organization.createTeam`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create-team)
     */ createTeam: createTeam(options),
        /**
     * ### Endpoint
     *
     * GET `/organization/list-teams`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listOrganizationTeams`
     *
     * **client:**
     * `authClient.organization.listTeams`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-teams)
     */ listOrganizationTeams: listOrganizationTeams(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/remove-team`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.removeTeam`
     *
     * **client:**
     * `authClient.organization.removeTeam`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-team)
     */ removeTeam: removeTeam(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/update-team`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.updateTeam`
     *
     * **client:**
     * `authClient.organization.updateTeam`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-team)
     */ updateTeam: updateTeam(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/set-active-team`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.setActiveTeam`
     *
     * **client:**
     * `authClient.organization.setActiveTeam`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)
     */ setActiveTeam: setActiveTeam(),
        /**
     * ### Endpoint
     *
     * POST `/organization/list-user-teams`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listUserTeams`
     *
     * **client:**
     * `authClient.organization.listUserTeams`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)
     */ listUserTeams: listUserTeams(),
        /**
     * ### Endpoint
     *
     * POST `/organization/list-team-members`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.listTeamMembers`
     *
     * **client:**
     * `authClient.organization.listTeamMembers`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)
     */ listTeamMembers: listTeamMembers(),
        /**
     * ### Endpoint
     *
     * POST `/organization/add-team-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.addTeamMember`
     *
     * **client:**
     * `authClient.organization.addTeamMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-add-team-member)
     */ addTeamMember: addTeamMember(options),
        /**
     * ### Endpoint
     *
     * POST `/organization/remove-team-member`
     *
     * ### API Methods
     *
     * **server:**
     * `auth.api.removeTeamMember`
     *
     * **client:**
     * `authClient.organization.removeTeamMember`
     *
     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-remove-team-member)
     */ removeTeamMember: removeTeamMember(options)
    };
    if (teamSupport) {
        endpoints = {
            ...endpoints,
            ...teamEndpoints
        };
    }
    const dynamicAccessControlEndpoints = {
        createOrgRole: createOrgRole(options),
        deleteOrgRole: deleteOrgRole(options),
        listOrgRoles: listOrgRoles(options),
        getOrgRole: getOrgRole(options),
        updateOrgRole: updateOrgRole(options)
    };
    if (options === null || options === void 0 ? void 0 : (_options_dynamicAccessControl = options.dynamicAccessControl) === null || _options_dynamicAccessControl === void 0 ? void 0 : _options_dynamicAccessControl.enabled) {
        endpoints = {
            ...endpoints,
            ...dynamicAccessControlEndpoints
        };
    }
    const roles = {
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$plugins$2f$organization$2f$access$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultRoles"],
        ...options === null || options === void 0 ? void 0 : options.roles
    };
    const teamSchema = teamSupport ? {
        team: {
            modelName: options === null || options === void 0 ? void 0 : (_options_schema = options.schema) === null || _options_schema === void 0 ? void 0 : (_options_schema_team = _options_schema.team) === null || _options_schema_team === void 0 ? void 0 : _options_schema_team.modelName,
            fields: {
                name: {
                    type: "string",
                    required: true,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema1 = options.schema) === null || _options_schema1 === void 0 ? void 0 : (_options_schema_team1 = _options_schema1.team) === null || _options_schema_team1 === void 0 ? void 0 : (_options_schema_team_fields = _options_schema_team1.fields) === null || _options_schema_team_fields === void 0 ? void 0 : _options_schema_team_fields.name
                },
                organizationId: {
                    type: "string",
                    required: true,
                    references: {
                        model: "organization",
                        field: "id"
                    },
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema2 = options.schema) === null || _options_schema2 === void 0 ? void 0 : (_options_schema_team2 = _options_schema2.team) === null || _options_schema_team2 === void 0 ? void 0 : (_options_schema_team_fields1 = _options_schema_team2.fields) === null || _options_schema_team_fields1 === void 0 ? void 0 : _options_schema_team_fields1.organizationId
                },
                createdAt: {
                    type: "date",
                    required: true,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema3 = options.schema) === null || _options_schema3 === void 0 ? void 0 : (_options_schema_team3 = _options_schema3.team) === null || _options_schema_team3 === void 0 ? void 0 : (_options_schema_team_fields2 = _options_schema_team3.fields) === null || _options_schema_team_fields2 === void 0 ? void 0 : _options_schema_team_fields2.createdAt
                },
                updatedAt: {
                    type: "date",
                    required: false,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema4 = options.schema) === null || _options_schema4 === void 0 ? void 0 : (_options_schema_team4 = _options_schema4.team) === null || _options_schema_team4 === void 0 ? void 0 : (_options_schema_team_fields3 = _options_schema_team4.fields) === null || _options_schema_team_fields3 === void 0 ? void 0 : _options_schema_team_fields3.updatedAt,
                    onUpdate: ()=>/* @__PURE__ */ new Date()
                },
                ...(options === null || options === void 0 ? void 0 : (_options_schema5 = options.schema) === null || _options_schema5 === void 0 ? void 0 : (_options_schema_team5 = _options_schema5.team) === null || _options_schema_team5 === void 0 ? void 0 : _options_schema_team5.additionalFields) || {}
            }
        },
        teamMember: {
            modelName: options === null || options === void 0 ? void 0 : (_options_schema6 = options.schema) === null || _options_schema6 === void 0 ? void 0 : (_options_schema_teamMember = _options_schema6.teamMember) === null || _options_schema_teamMember === void 0 ? void 0 : _options_schema_teamMember.modelName,
            fields: {
                teamId: {
                    type: "string",
                    required: true,
                    references: {
                        model: "team",
                        field: "id"
                    },
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema7 = options.schema) === null || _options_schema7 === void 0 ? void 0 : (_options_schema_teamMember1 = _options_schema7.teamMember) === null || _options_schema_teamMember1 === void 0 ? void 0 : (_options_schema_teamMember_fields = _options_schema_teamMember1.fields) === null || _options_schema_teamMember_fields === void 0 ? void 0 : _options_schema_teamMember_fields.teamId
                },
                userId: {
                    type: "string",
                    required: true,
                    references: {
                        model: "user",
                        field: "id"
                    },
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema8 = options.schema) === null || _options_schema8 === void 0 ? void 0 : (_options_schema_teamMember2 = _options_schema8.teamMember) === null || _options_schema_teamMember2 === void 0 ? void 0 : (_options_schema_teamMember_fields1 = _options_schema_teamMember2.fields) === null || _options_schema_teamMember_fields1 === void 0 ? void 0 : _options_schema_teamMember_fields1.userId
                },
                createdAt: {
                    type: "date",
                    required: false,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema9 = options.schema) === null || _options_schema9 === void 0 ? void 0 : (_options_schema_teamMember3 = _options_schema9.teamMember) === null || _options_schema_teamMember3 === void 0 ? void 0 : (_options_schema_teamMember_fields2 = _options_schema_teamMember3.fields) === null || _options_schema_teamMember_fields2 === void 0 ? void 0 : _options_schema_teamMember_fields2.createdAt
                }
            }
        }
    } : {};
    const organizationRoleSchema = (options === null || options === void 0 ? void 0 : (_options_dynamicAccessControl1 = options.dynamicAccessControl) === null || _options_dynamicAccessControl1 === void 0 ? void 0 : _options_dynamicAccessControl1.enabled) ? {
        organizationRole: {
            fields: {
                organizationId: {
                    type: "string",
                    required: true,
                    references: {
                        model: "organization",
                        field: "id"
                    },
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema10 = options.schema) === null || _options_schema10 === void 0 ? void 0 : (_options_schema_organizationRole = _options_schema10.organizationRole) === null || _options_schema_organizationRole === void 0 ? void 0 : (_options_schema_organizationRole_fields = _options_schema_organizationRole.fields) === null || _options_schema_organizationRole_fields === void 0 ? void 0 : _options_schema_organizationRole_fields.organizationId
                },
                role: {
                    type: "string",
                    required: true,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema11 = options.schema) === null || _options_schema11 === void 0 ? void 0 : (_options_schema_organizationRole1 = _options_schema11.organizationRole) === null || _options_schema_organizationRole1 === void 0 ? void 0 : (_options_schema_organizationRole_fields1 = _options_schema_organizationRole1.fields) === null || _options_schema_organizationRole_fields1 === void 0 ? void 0 : _options_schema_organizationRole_fields1.role
                },
                permission: {
                    type: "string",
                    required: true,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema12 = options.schema) === null || _options_schema12 === void 0 ? void 0 : (_options_schema_organizationRole2 = _options_schema12.organizationRole) === null || _options_schema_organizationRole2 === void 0 ? void 0 : (_options_schema_organizationRole_fields2 = _options_schema_organizationRole2.fields) === null || _options_schema_organizationRole_fields2 === void 0 ? void 0 : _options_schema_organizationRole_fields2.permission
                },
                createdAt: {
                    type: "date",
                    required: true,
                    defaultValue: ()=>/* @__PURE__ */ new Date(),
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema13 = options.schema) === null || _options_schema13 === void 0 ? void 0 : (_options_schema_organizationRole3 = _options_schema13.organizationRole) === null || _options_schema_organizationRole3 === void 0 ? void 0 : (_options_schema_organizationRole_fields3 = _options_schema_organizationRole3.fields) === null || _options_schema_organizationRole_fields3 === void 0 ? void 0 : _options_schema_organizationRole_fields3.createdAt
                },
                updatedAt: {
                    type: "date",
                    required: false,
                    fieldName: options === null || options === void 0 ? void 0 : (_options_schema14 = options.schema) === null || _options_schema14 === void 0 ? void 0 : (_options_schema_organizationRole4 = _options_schema14.organizationRole) === null || _options_schema_organizationRole4 === void 0 ? void 0 : (_options_schema_organizationRole_fields4 = _options_schema_organizationRole4.fields) === null || _options_schema_organizationRole_fields4 === void 0 ? void 0 : _options_schema_organizationRole_fields4.updatedAt,
                    onUpdate: ()=>/* @__PURE__ */ new Date()
                },
                ...(options === null || options === void 0 ? void 0 : (_options_schema15 = options.schema) === null || _options_schema15 === void 0 ? void 0 : (_options_schema_organizationRole5 = _options_schema15.organizationRole) === null || _options_schema_organizationRole5 === void 0 ? void 0 : _options_schema_organizationRole5.additionalFields) || {}
            },
            modelName: options === null || options === void 0 ? void 0 : (_options_schema16 = options.schema) === null || _options_schema16 === void 0 ? void 0 : (_options_schema_organizationRole6 = _options_schema16.organizationRole) === null || _options_schema_organizationRole6 === void 0 ? void 0 : _options_schema_organizationRole6.modelName
        }
    } : {};
    const schema = {
        ...organizationRoleSchema,
        ...teamSchema,
        ...{
            organization: {
                modelName: options === null || options === void 0 ? void 0 : (_options_schema17 = options.schema) === null || _options_schema17 === void 0 ? void 0 : (_options_schema_organization = _options_schema17.organization) === null || _options_schema_organization === void 0 ? void 0 : _options_schema_organization.modelName,
                fields: {
                    name: {
                        type: "string",
                        required: true,
                        sortable: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema18 = options.schema) === null || _options_schema18 === void 0 ? void 0 : (_options_schema_organization1 = _options_schema18.organization) === null || _options_schema_organization1 === void 0 ? void 0 : (_options_schema_organization_fields = _options_schema_organization1.fields) === null || _options_schema_organization_fields === void 0 ? void 0 : _options_schema_organization_fields.name
                    },
                    slug: {
                        type: "string",
                        unique: true,
                        sortable: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema19 = options.schema) === null || _options_schema19 === void 0 ? void 0 : (_options_schema_organization2 = _options_schema19.organization) === null || _options_schema_organization2 === void 0 ? void 0 : (_options_schema_organization_fields1 = _options_schema_organization2.fields) === null || _options_schema_organization_fields1 === void 0 ? void 0 : _options_schema_organization_fields1.slug
                    },
                    logo: {
                        type: "string",
                        required: false,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema20 = options.schema) === null || _options_schema20 === void 0 ? void 0 : (_options_schema_organization3 = _options_schema20.organization) === null || _options_schema_organization3 === void 0 ? void 0 : (_options_schema_organization_fields2 = _options_schema_organization3.fields) === null || _options_schema_organization_fields2 === void 0 ? void 0 : _options_schema_organization_fields2.logo
                    },
                    createdAt: {
                        type: "date",
                        required: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema21 = options.schema) === null || _options_schema21 === void 0 ? void 0 : (_options_schema_organization4 = _options_schema21.organization) === null || _options_schema_organization4 === void 0 ? void 0 : (_options_schema_organization_fields3 = _options_schema_organization4.fields) === null || _options_schema_organization_fields3 === void 0 ? void 0 : _options_schema_organization_fields3.createdAt
                    },
                    metadata: {
                        type: "string",
                        required: false,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema22 = options.schema) === null || _options_schema22 === void 0 ? void 0 : (_options_schema_organization5 = _options_schema22.organization) === null || _options_schema_organization5 === void 0 ? void 0 : (_options_schema_organization_fields4 = _options_schema_organization5.fields) === null || _options_schema_organization_fields4 === void 0 ? void 0 : _options_schema_organization_fields4.metadata
                    },
                    ...(options === null || options === void 0 ? void 0 : (_options_schema23 = options.schema) === null || _options_schema23 === void 0 ? void 0 : (_options_schema_organization6 = _options_schema23.organization) === null || _options_schema_organization6 === void 0 ? void 0 : _options_schema_organization6.additionalFields) || {}
                }
            },
            member: {
                modelName: options === null || options === void 0 ? void 0 : (_options_schema24 = options.schema) === null || _options_schema24 === void 0 ? void 0 : (_options_schema_member = _options_schema24.member) === null || _options_schema_member === void 0 ? void 0 : _options_schema_member.modelName,
                fields: {
                    organizationId: {
                        type: "string",
                        required: true,
                        references: {
                            model: "organization",
                            field: "id"
                        },
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema25 = options.schema) === null || _options_schema25 === void 0 ? void 0 : (_options_schema_member1 = _options_schema25.member) === null || _options_schema_member1 === void 0 ? void 0 : (_options_schema_member_fields = _options_schema_member1.fields) === null || _options_schema_member_fields === void 0 ? void 0 : _options_schema_member_fields.organizationId
                    },
                    userId: {
                        type: "string",
                        required: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema26 = options.schema) === null || _options_schema26 === void 0 ? void 0 : (_options_schema_member2 = _options_schema26.member) === null || _options_schema_member2 === void 0 ? void 0 : (_options_schema_member_fields1 = _options_schema_member2.fields) === null || _options_schema_member_fields1 === void 0 ? void 0 : _options_schema_member_fields1.userId,
                        references: {
                            model: "user",
                            field: "id"
                        }
                    },
                    role: {
                        type: "string",
                        required: true,
                        sortable: true,
                        defaultValue: "member",
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema27 = options.schema) === null || _options_schema27 === void 0 ? void 0 : (_options_schema_member3 = _options_schema27.member) === null || _options_schema_member3 === void 0 ? void 0 : (_options_schema_member_fields2 = _options_schema_member3.fields) === null || _options_schema_member_fields2 === void 0 ? void 0 : _options_schema_member_fields2.role
                    },
                    createdAt: {
                        type: "date",
                        required: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema28 = options.schema) === null || _options_schema28 === void 0 ? void 0 : (_options_schema_member4 = _options_schema28.member) === null || _options_schema_member4 === void 0 ? void 0 : (_options_schema_member_fields3 = _options_schema_member4.fields) === null || _options_schema_member_fields3 === void 0 ? void 0 : _options_schema_member_fields3.createdAt
                    },
                    ...(options === null || options === void 0 ? void 0 : (_options_schema29 = options.schema) === null || _options_schema29 === void 0 ? void 0 : (_options_schema_member5 = _options_schema29.member) === null || _options_schema_member5 === void 0 ? void 0 : _options_schema_member5.additionalFields) || {}
                }
            },
            invitation: {
                modelName: options === null || options === void 0 ? void 0 : (_options_schema30 = options.schema) === null || _options_schema30 === void 0 ? void 0 : (_options_schema_invitation = _options_schema30.invitation) === null || _options_schema_invitation === void 0 ? void 0 : _options_schema_invitation.modelName,
                fields: {
                    organizationId: {
                        type: "string",
                        required: true,
                        references: {
                            model: "organization",
                            field: "id"
                        },
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema31 = options.schema) === null || _options_schema31 === void 0 ? void 0 : (_options_schema_invitation1 = _options_schema31.invitation) === null || _options_schema_invitation1 === void 0 ? void 0 : (_options_schema_invitation_fields = _options_schema_invitation1.fields) === null || _options_schema_invitation_fields === void 0 ? void 0 : _options_schema_invitation_fields.organizationId
                    },
                    email: {
                        type: "string",
                        required: true,
                        sortable: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema32 = options.schema) === null || _options_schema32 === void 0 ? void 0 : (_options_schema_invitation2 = _options_schema32.invitation) === null || _options_schema_invitation2 === void 0 ? void 0 : (_options_schema_invitation_fields1 = _options_schema_invitation2.fields) === null || _options_schema_invitation_fields1 === void 0 ? void 0 : _options_schema_invitation_fields1.email
                    },
                    role: {
                        type: "string",
                        required: false,
                        sortable: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema33 = options.schema) === null || _options_schema33 === void 0 ? void 0 : (_options_schema_invitation3 = _options_schema33.invitation) === null || _options_schema_invitation3 === void 0 ? void 0 : (_options_schema_invitation_fields2 = _options_schema_invitation3.fields) === null || _options_schema_invitation_fields2 === void 0 ? void 0 : _options_schema_invitation_fields2.role
                    },
                    ...teamSupport ? {
                        teamId: {
                            type: "string",
                            required: false,
                            sortable: true,
                            fieldName: options === null || options === void 0 ? void 0 : (_options_schema34 = options.schema) === null || _options_schema34 === void 0 ? void 0 : (_options_schema_invitation4 = _options_schema34.invitation) === null || _options_schema_invitation4 === void 0 ? void 0 : (_options_schema_invitation_fields3 = _options_schema_invitation4.fields) === null || _options_schema_invitation_fields3 === void 0 ? void 0 : _options_schema_invitation_fields3.teamId
                        }
                    } : {},
                    status: {
                        type: "string",
                        required: true,
                        sortable: true,
                        defaultValue: "pending",
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema35 = options.schema) === null || _options_schema35 === void 0 ? void 0 : (_options_schema_invitation5 = _options_schema35.invitation) === null || _options_schema_invitation5 === void 0 ? void 0 : (_options_schema_invitation_fields4 = _options_schema_invitation5.fields) === null || _options_schema_invitation_fields4 === void 0 ? void 0 : _options_schema_invitation_fields4.status
                    },
                    expiresAt: {
                        type: "date",
                        required: true,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema36 = options.schema) === null || _options_schema36 === void 0 ? void 0 : (_options_schema_invitation6 = _options_schema36.invitation) === null || _options_schema_invitation6 === void 0 ? void 0 : (_options_schema_invitation_fields5 = _options_schema_invitation6.fields) === null || _options_schema_invitation_fields5 === void 0 ? void 0 : _options_schema_invitation_fields5.expiresAt
                    },
                    inviterId: {
                        type: "string",
                        references: {
                            model: "user",
                            field: "id"
                        },
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema37 = options.schema) === null || _options_schema37 === void 0 ? void 0 : (_options_schema_invitation7 = _options_schema37.invitation) === null || _options_schema_invitation7 === void 0 ? void 0 : (_options_schema_invitation_fields6 = _options_schema_invitation7.fields) === null || _options_schema_invitation_fields6 === void 0 ? void 0 : _options_schema_invitation_fields6.inviterId,
                        required: true
                    },
                    ...(options === null || options === void 0 ? void 0 : (_options_schema38 = options.schema) === null || _options_schema38 === void 0 ? void 0 : (_options_schema_invitation8 = _options_schema38.invitation) === null || _options_schema_invitation8 === void 0 ? void 0 : _options_schema_invitation8.additionalFields) || {}
                }
            }
        }
    };
    const api = shimContext(endpoints, {
        orgOptions: options || {},
        roles,
        getSession: async (context)=>{
            return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(context);
        }
    });
    return {
        id: "organization",
        endpoints: {
            ...api,
            hasPermission: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DV5EHeYG$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])("/organization/has-permission", {
                method: "POST",
                requireHeaders: true,
                body: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                    organizationId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]().optional()
                }).and(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["union"]([
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                        permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]())),
                        permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["undefined"]()
                    }),
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["object"]({
                        permission: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["undefined"](),
                        permissions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["record"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"](), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["array"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$node_modules$2f$zod$2f$v4$2f$classic$2f$schemas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["string"]()))
                    })
                ])),
                use: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DVhkokI7$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
                ],
                metadata: {
                    $Infer: {
                        body: {}
                    },
                    openapi: {
                        description: "Check if the user has permission",
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            permission: {
                                                type: "object",
                                                description: "The permission to check",
                                                deprecated: true
                                            },
                                            permissions: {
                                                type: "object",
                                                description: "The permission to check"
                                            }
                                        },
                                        required: [
                                            "permissions"
                                        ]
                                    }
                                }
                            }
                        },
                        responses: {
                            "200": {
                                description: "Success",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                error: {
                                                    type: "string"
                                                },
                                                success: {
                                                    type: "boolean"
                                                }
                                            },
                                            required: [
                                                "success"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, async (ctx)=>{
                const activeOrganizationId = ctx.body.organizationId || ctx.context.session.session.activeOrganizationId;
                if (!activeOrganizationId) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("BAD_REQUEST", {
                        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION
                    });
                }
                const adapter = getOrgAdapter(ctx.context, options);
                const member = await adapter.findMemberByOrgId({
                    userId: ctx.context.session.user.id,
                    organizationId: activeOrganizationId
                });
                if (!member) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$call$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["APIError"]("UNAUTHORIZED", {
                        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION
                    });
                }
                var _ctx_body_permissions;
                const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$better$2d$auth$2f$dist$2f$shared$2f$better$2d$auth$2e$DQunmJlF$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])({
                    role: member.role,
                    options: options || {},
                    permissions: (_ctx_body_permissions = ctx.body.permissions) !== null && _ctx_body_permissions !== void 0 ? _ctx_body_permissions : ctx.body.permission,
                    organizationId: activeOrganizationId
                }, ctx);
                return ctx.json({
                    error: null,
                    success: result
                });
            })
        },
        schema: {
            ...schema,
            session: {
                fields: {
                    activeOrganizationId: {
                        type: "string",
                        required: false,
                        fieldName: options === null || options === void 0 ? void 0 : (_options_schema39 = options.schema) === null || _options_schema39 === void 0 ? void 0 : (_options_schema_session = _options_schema39.session) === null || _options_schema_session === void 0 ? void 0 : (_options_schema_session_fields = _options_schema_session.fields) === null || _options_schema_session_fields === void 0 ? void 0 : _options_schema_session_fields.activeOrganizationId
                    },
                    ...teamSupport ? {
                        activeTeamId: {
                            type: "string",
                            required: false,
                            fieldName: options === null || options === void 0 ? void 0 : (_options_schema40 = options.schema) === null || _options_schema40 === void 0 ? void 0 : (_options_schema_session1 = _options_schema40.session) === null || _options_schema_session1 === void 0 ? void 0 : (_options_schema_session_fields1 = _options_schema_session1.fields) === null || _options_schema_session_fields1 === void 0 ? void 0 : _options_schema_session_fields1.activeTeamId
                        }
                    } : {}
                }
            }
        },
        $Infer: {
            Organization: {},
            Invitation: {},
            Member: {},
            Team: teamSupport ? {} : {},
            TeamMember: teamSupport ? {} : {},
            ActiveOrganization: {}
        },
        $ERROR_CODES: ORGANIZATION_ERROR_CODES,
        options
    };
};
;
}),
]);

//# sourceMappingURL=node_modules_better-auth_dist_shared_better-auth_BYiVM63b_mjs_30cbbac4._.js.map