{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-driver.js"],"sourcesContent":["/// <reference types=\"./sqlite-driver.d.ts\" />\nimport { SelectQueryNode } from '../../operation-node/select-query-node.js';\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { freeze, isFunction } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nexport class SqliteDriver {\n    #config;\n    #connectionMutex = new ConnectionMutex();\n    #db;\n    #connection;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        this.#db = isFunction(this.#config.database)\n            ? await this.#config.database()\n            : this.#config.database;\n        this.#connection = new SqliteConnection(this.#db);\n        if (this.#config.onCreateConnection) {\n            await this.#config.onCreateConnection(this.#connection);\n        }\n    }\n    async acquireConnection() {\n        // SQLite only has one single connection. We use a mutex here to wait\n        // until the single connection has been released.\n        await this.#connectionMutex.lock();\n        return this.#connection;\n    }\n    async beginTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release', savepointName), createQueryId()));\n    }\n    async releaseConnection() {\n        this.#connectionMutex.unlock();\n    }\n    async destroy() {\n        this.#db?.close();\n    }\n}\nclass SqliteConnection {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    executeQuery(compiledQuery) {\n        const { sql, parameters } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (stmt.reader) {\n            return Promise.resolve({\n                rows: stmt.all(parameters),\n            });\n        }\n        const { changes, lastInsertRowid } = stmt.run(parameters);\n        return Promise.resolve({\n            numAffectedRows: changes !== undefined && changes !== null ? BigInt(changes) : undefined,\n            insertId: lastInsertRowid !== undefined && lastInsertRowid !== null\n                ? BigInt(lastInsertRowid)\n                : undefined,\n            rows: [],\n        });\n    }\n    async *streamQuery(compiledQuery, _chunkSize) {\n        const { sql, parameters, query } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (SelectQueryNode.is(query)) {\n            const iter = stmt.iterate(parameters);\n            for (const row of iter) {\n                yield {\n                    rows: [row],\n                };\n            }\n        }\n        else {\n            throw new Error('Sqlite driver only supports streaming of select queries');\n        }\n    }\n}\nclass ConnectionMutex {\n    #promise;\n    #resolve;\n    async lock() {\n        while (this.#promise) {\n            await this.#promise;\n        }\n        this.#promise = new Promise((resolve) => {\n            this.#resolve = resolve;\n        });\n    }\n    unlock() {\n        const resolve = this.#resolve;\n        this.#promise = undefined;\n        this.#resolve = undefined;\n        resolve?.();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js"],"sourcesContent":["/// <reference types=\"./sqlite-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class SqliteQueryCompiler extends DefaultQueryCompiler {\n    visitOrAction(node) {\n        this.append('or ');\n        this.append(node.action);\n    }\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n    visitDefaultInsertValue(_) {\n        // sqlite doesn't support the `default` keyword in inserts.\n        this.append('null');\n    }\n}\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;AACtD;;AACA,MAAM,gBAAgB;AACf,MAAM,4BAA4B,qNAAoB;IACzD,cAAc,IAAI,EAAE;QAChB,IAAI,CAAC,MAAM,CAAC;QACZ,IAAI,CAAC,MAAM,CAAC,KAAK,MAAM;IAC3B;IACA,iCAAiC;QAC7B,OAAO;IACX;IACA,+BAA+B;QAC3B,OAAO;IACX;IACA,gCAAgC;QAC5B,OAAO;IACX;IACA,2BAA2B;QACvB,OAAO;IACX;IACA,4BAA4B;QACxB,OAAO;IACX;IACA,mBAAmB;QACf,OAAO;IACX;IACA,mBAAmB,UAAU,EAAE;QAC3B,OAAO,WAAW,OAAO,CAAC,eAAe;IAC7C;IACA,wBAAwB,CAAC,EAAE;QACvB,2DAA2D;QAC3D,IAAI,CAAC,MAAM,CAAC;IAChB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-introspector.js"],"sourcesContent":["/// <reference types=\"./sqlite-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class SqliteIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        // Sqlite doesn't support schemas.\n        return [];\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        return await this.#getTableMetadata(options);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #tablesQuery(qb, options) {\n        let tablesQuery = qb\n            .selectFrom('sqlite_master')\n            .where('type', 'in', ['table', 'view'])\n            .where('name', 'not like', 'sqlite_%')\n            .select(['name', 'sql', 'type'])\n            .orderBy('name');\n        if (!options.withInternalKyselyTables) {\n            tablesQuery = tablesQuery\n                .where('name', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('name', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        return tablesQuery;\n    }\n    async #getTableMetadata(options) {\n        const tablesResult = await this.#tablesQuery(this.#db, options).execute();\n        const tableMetadata = await this.#db\n            .with('table_list', (qb) => this.#tablesQuery(qb, options))\n            .selectFrom([\n            'table_list as tl',\n            sql `pragma_table_info(tl.name)`.as('p'),\n        ])\n            .select([\n            'tl.name as table',\n            'p.cid',\n            'p.name',\n            'p.type',\n            'p.notnull',\n            'p.dflt_value',\n            'p.pk',\n        ])\n            .orderBy('tl.name')\n            .orderBy('p.cid')\n            .execute();\n        const columnsByTable = {};\n        for (const row of tableMetadata) {\n            columnsByTable[row.table] ??= [];\n            columnsByTable[row.table].push(row);\n        }\n        return tablesResult.map(({ name, sql, type }) => {\n            // // Try to find the name of the column that has `autoincrement` 🤦\n            let autoIncrementCol = sql\n                ?.split(/[\\(\\),]/)\n                ?.find((it) => it.toLowerCase().includes('autoincrement'))\n                ?.trimStart()\n                ?.split(/\\s+/)?.[0]\n                ?.replace(/[\"`]/g, '');\n            const columns = columnsByTable[name] ?? [];\n            // Otherwise, check for an INTEGER PRIMARY KEY\n            // https://www.sqlite.org/autoinc.html\n            if (!autoIncrementCol) {\n                const pkCols = columns.filter((r) => r.pk > 0);\n                if (pkCols.length === 1 && pkCols[0].type.toLowerCase() === 'integer') {\n                    autoIncrementCol = pkCols[0].name;\n                }\n            }\n            return {\n                name: name,\n                isView: type === 'view',\n                columns: columns.map((col) => ({\n                    name: col.name,\n                    dataType: col.type,\n                    isNullable: !col.notnull,\n                    isAutoIncrementing: col.name === autoIncrementCol,\n                    hasDefaultValue: col.dflt_value != null,\n                    comment: undefined,\n                })),\n            };\n        });\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js"],"sourcesContent":["/// <reference types=\"./dialect-adapter-base.d.ts\" />\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * Third-party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nexport class DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return true;\n    }\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    get supportsOutput() {\n        return false;\n    }\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;AACrD;;;;;CAKC;;;;AACM,MAAM;IACT,IAAI,4BAA4B;QAC5B,OAAO;IACX;IACA,IAAI,2BAA2B;QAC3B,OAAO;IACX;IACA,IAAI,oBAAoB;QACpB,OAAO;IACX;IACA,IAAI,iBAAiB;QACjB,OAAO;IACX;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js"],"sourcesContent":["/// <reference types=\"./sqlite-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class SqliteAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;;AAC/C;;AACO,MAAM,sBAAsB,uMAAkB;IACjD,IAAI,2BAA2B;QAC3B,OAAO;IACX;IACA,IAAI,oBAAoB;QACpB,OAAO;IACX;IACA,MAAM,qBAAqB,GAAG,EAAE,IAAI,EAAE;IAClC,yEAAyE;IACzE,4EAA4E;IAC5E,qCAAqC;IACzC;IACA,MAAM,qBAAqB,GAAG,EAAE,IAAI,EAAE;IAClC,yEAAyE;IACzE,4EAA4E;IAC5E,qCAAqC;IACzC;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js"],"sourcesContent":["/// <reference types=\"./sqlite-dialect.d.ts\" />\nimport { SqliteDriver } from './sqlite-driver.js';\nimport { SqliteQueryCompiler } from './sqlite-query-compiler.js';\nimport { SqliteIntrospector } from './sqlite-introspector.js';\nimport { SqliteAdapter } from './sqlite-adapter.js';\nimport { freeze } from '../../util/object-utils.js';\n/**\n * SQLite dialect that uses the [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) library.\n *\n * The constructor takes an instance of {@link SqliteDialectConfig}.\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: new Database('db.sqlite')\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `database`\n * can be a function:\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: async () => new Database('db.sqlite')\n * })\n * ```\n */\nexport class SqliteDialect {\n    #config;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    createDriver() {\n        return new SqliteDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new SqliteQueryCompiler();\n    }\n    createAdapter() {\n        return new SqliteAdapter();\n    }\n    createIntrospector(db) {\n        return new SqliteIntrospector(db);\n    }\n}\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;;;;;AAC/C;AACA;AACA;AACA;AACA;;;;;;;;;IA0BI;AADG,MAAM;IAKT,eAAe;QACX,OAAO,IAAI,iMAAY,kLAAC,IAAI,EAAC;IACjC;IACA,sBAAsB;QAClB,OAAO,IAAI,mNAAmB;IAClC;IACA,gBAAgB;QACZ,OAAO,IAAI,mMAAa;IAC5B;IACA,mBAAmB,EAAE,EAAE;QACnB,OAAO,IAAI,6MAAkB,CAAC;IAClC;IAdA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,SAAU,IAAA,6KAAM,EAAC;YAAE,GAAG,MAAM;QAAC;IACtC;AAaJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mysql/mysql-driver.js"],"sourcesContent":["/// <reference types=\"./mysql-driver.d.ts\" />\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, isObject, freeze } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class MysqlDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(configOrPool) {\n        this.#config = freeze({ ...configOrPool });\n    }\n    async init() {\n        this.#pool = isFunction(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const rawConnection = await this.#acquireConnection();\n        let connection = this.#connections.get(rawConnection);\n        if (!connection) {\n            connection = new MysqlConnection(rawConnection);\n            this.#connections.set(rawConnection, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `mysql2` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config?.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        if (this.#config?.onReserveConnection) {\n            await this.#config.onReserveConnection(connection);\n        }\n        return connection;\n    }\n    async #acquireConnection() {\n        return new Promise((resolve, reject) => {\n            this.#pool.getConnection(async (err, rawConnection) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rawConnection);\n                }\n            });\n        });\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel || settings.accessMode) {\n            const parts = [];\n            if (settings.isolationLevel) {\n                parts.push(`isolation level ${settings.isolationLevel}`);\n            }\n            if (settings.accessMode) {\n                parts.push(settings.accessMode);\n            }\n            const sql = `set transaction ${parts.join(', ')}`;\n            // On MySQL this sets the isolation level of the next transaction.\n            await connection.executeQuery(CompiledQuery.raw(sql));\n        }\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release savepoint', savepointName), createQueryId()));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        return new Promise((resolve, reject) => {\n            this.#pool.end((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nfunction isOkPacket(obj) {\n    return isObject(obj) && 'insertId' in obj && 'affectedRows' in obj;\n}\nclass MysqlConnection {\n    #rawConnection;\n    constructor(rawConnection) {\n        this.#rawConnection = rawConnection;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const result = await this.#executeQuery(compiledQuery);\n            if (isOkPacket(result)) {\n                const { insertId, affectedRows, changedRows } = result;\n                return {\n                    insertId: insertId !== undefined &&\n                        insertId !== null &&\n                        insertId.toString() !== '0'\n                        ? BigInt(insertId)\n                        : undefined,\n                    numAffectedRows: affectedRows !== undefined && affectedRows !== null\n                        ? BigInt(affectedRows)\n                        : undefined,\n                    numChangedRows: changedRows !== undefined && changedRows !== null\n                        ? BigInt(changedRows)\n                        : undefined,\n                    rows: [],\n                };\n            }\n            else if (Array.isArray(result)) {\n                return {\n                    rows: result,\n                };\n            }\n            return {\n                rows: [],\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    #executeQuery(compiledQuery) {\n        return new Promise((resolve, reject) => {\n            this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    async *streamQuery(compiledQuery, _chunkSize) {\n        const stream = this.#rawConnection\n            .query(compiledQuery.sql, compiledQuery.parameters)\n            .stream({\n            objectMode: true,\n        });\n        try {\n            for await (const row of stream) {\n                yield {\n                    rows: [row],\n                };\n            }\n        }\n        catch (ex) {\n            if (ex &&\n                typeof ex === 'object' &&\n                'code' in ex &&\n                // @ts-ignore\n                ex.code === 'ERR_STREAM_PREMATURE_CLOSE') {\n                // Most likely because of https://github.com/mysqljs/mysql/blob/master/lib/protocol/sequences/Query.js#L220\n                return;\n            }\n            throw ex;\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#rawConnection.release();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 635, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mysql/mysql-query-compiler.js"],"sourcesContent":["/// <reference types=\"./mysql-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /`/g;\nexport class MysqlQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getExplainOptionAssignment() {\n        return '=';\n    }\n    getExplainOptionsDelimiter() {\n        return ' ';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '`';\n    }\n    getRightIdentifierWrapper() {\n        return '`';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '``');\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;;AACA,MAAM,gBAAgB;AACf,MAAM,2BAA2B,qNAAoB;IACxD,iCAAiC;QAC7B,OAAO;IACX;IACA,+BAA+B;QAC3B,OAAO;IACX;IACA,6BAA6B;QACzB,OAAO;IACX;IACA,6BAA6B;QACzB,OAAO;IACX;IACA,gCAAgC;QAC5B,OAAO;IACX;IACA,2BAA2B;QACvB,OAAO;IACX;IACA,4BAA4B;QACxB,OAAO;IACX;IACA,mBAAmB,UAAU,EAAE;QAC3B,OAAO,WAAW,OAAO,CAAC,eAAe;IAC7C;IACA,iBAAiB,IAAI,EAAE;QACnB,IAAI,CAAC,MAAM,CAAC;QACZ,IAAI,KAAK,MAAM,EAAE;YACb,IAAI,CAAC,MAAM,CAAC;QAChB;QACA,IAAI,CAAC,MAAM,CAAC;QACZ,IAAI,KAAK,WAAW,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC;QAChB;QACA,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI;QACxB,IAAI,KAAK,KAAK,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK;QAC7B;QACA,IAAI,KAAK,KAAK,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK;QAC7B;QACA,IAAI,KAAK,OAAO,EAAE;YACd,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,WAAW,CAAC,KAAK,OAAO;YAC7B,IAAI,CAAC,MAAM,CAAC;QAChB;QACA,IAAI,KAAK,KAAK,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK;QAC7B;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mysql/mysql-introspector.js"],"sourcesContent":["/// <reference types=\"./mysql-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class MysqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('information_schema.schemata')\n            .select('schema_name')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.SCHEMA_NAME }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('information_schema.columns as columns')\n            .innerJoin('information_schema.tables as tables', (b) => b\n            .onRef('columns.TABLE_CATALOG', '=', 'tables.TABLE_CATALOG')\n            .onRef('columns.TABLE_SCHEMA', '=', 'tables.TABLE_SCHEMA')\n            .onRef('columns.TABLE_NAME', '=', 'tables.TABLE_NAME'))\n            .select([\n            'columns.COLUMN_NAME',\n            'columns.COLUMN_DEFAULT',\n            'columns.TABLE_NAME',\n            'columns.TABLE_SCHEMA',\n            'tables.TABLE_TYPE',\n            'columns.IS_NULLABLE',\n            'columns.DATA_TYPE',\n            'columns.EXTRA',\n            'columns.COLUMN_COMMENT',\n        ])\n            .where('columns.TABLE_SCHEMA', '=', sql `database()`)\n            .orderBy('columns.TABLE_NAME')\n            .orderBy('columns.ORDINAL_POSITION')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('columns.TABLE_NAME', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('columns.TABLE_NAME', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);\n            if (!table) {\n                table = freeze({\n                    name: it.TABLE_NAME,\n                    isView: it.TABLE_TYPE === 'VIEW',\n                    schema: it.TABLE_SCHEMA,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.COLUMN_NAME,\n                dataType: it.DATA_TYPE,\n                isNullable: it.IS_NULLABLE === 'YES',\n                isAutoIncrementing: it.EXTRA.toLowerCase().includes('auto_increment'),\n                hasDefaultValue: it.COLUMN_DEFAULT !== null,\n                comment: it.COLUMN_COMMENT === '' ? undefined : it.COLUMN_COMMENT,\n            }));\n            return tables;\n        }, []);\n    }\n}\n"],"names":[],"mappings":"AAAA,mDAAmD;;;;;;;;;;;AACnD;AACA;AACA;;;;;;;;;;;;;;;;;;;IAEI,mCA+CA;AAhDG,MAAM;IAKT,MAAM,aAAa;QACf,IAAI,aAAa,MAAM,iLAAA,IAAI,EAAC,KACvB,UAAU,CAAC,+BACX,MAAM,CAAC,eACP,OAAO,GACP,OAAO;QACZ,OAAO,WAAW,GAAG,CAAC,CAAC,KAAO,CAAC;gBAAE,MAAM,GAAG,WAAW;YAAC,CAAC;IAC3D;IACA,MAAM,YAAyD;YAA/C,UAAA,iEAAU;YAAE,0BAA0B;QAAM;QACxD,IAAI,QAAQ,iLAAA,IAAI,EAAC,KACZ,UAAU,CAAC,yCACX,SAAS,CAAC,uCAAuC,CAAC,IAAM,EACxD,KAAK,CAAC,yBAAyB,KAAK,wBACpC,KAAK,CAAC,wBAAwB,KAAK,uBACnC,KAAK,CAAC,sBAAsB,KAAK,sBACjC,MAAM,CAAC;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACH,EACI,KAAK,CAAC,wBAAwB,SAAK,wKAAG,sBACtC,OAAO,CAAC,sBACR,OAAO,CAAC,4BACR,OAAO;QACZ,IAAI,CAAC,QAAQ,wBAAwB,EAAE;YACnC,QAAQ,MACH,KAAK,CAAC,sBAAsB,MAAM,4LAAuB,EACzD,KAAK,CAAC,sBAAsB,MAAM,iMAA4B;QACvE;QACA,MAAM,aAAa,MAAM,MAAM,OAAO;QACtC,OAAO,kLAAA,IAAI,EAAC,qBAAA,yBAAL,IAAI,EAAqB;IACpC;IACA,MAAM,YAAY,OAAO,EAAE;QACvB,OAAO;YACH,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC;QACjC;IACJ;IA7CA,YAAY,EAAE,CAAE;QA8ChB,yLAAA;QA/CA,wLAAA;;mBAAA,KAAA;;+LAES,KAAM;IACf;AAmEJ;AAvBI,SAAA,mBAAoB,OAAO;IACvB,OAAO,QAAQ,MAAM,CAAC,CAAC,QAAQ;QAC3B,IAAI,QAAQ,OAAO,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,KAAK,GAAG,UAAU;QAC3D,IAAI,CAAC,OAAO;YACR,QAAQ,IAAA,6KAAM,EAAC;gBACX,MAAM,GAAG,UAAU;gBACnB,QAAQ,GAAG,UAAU,KAAK;gBAC1B,QAAQ,GAAG,YAAY;gBACvB,SAAS,EAAE;YACf;YACA,OAAO,IAAI,CAAC;QAChB;QACA,MAAM,OAAO,CAAC,IAAI,CAAC,IAAA,6KAAM,EAAC;YACtB,MAAM,GAAG,WAAW;YACpB,UAAU,GAAG,SAAS;YACtB,YAAY,GAAG,WAAW,KAAK;YAC/B,oBAAoB,GAAG,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC;YACpD,iBAAiB,GAAG,cAAc,KAAK;YACvC,SAAS,GAAG,cAAc,KAAK,KAAK,YAAY,GAAG,cAAc;QACrE;QACA,OAAO;IACX,GAAG,EAAE;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 803, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mysql/mysql-adapter.js"],"sourcesContent":["/// <reference types=\"./mysql-adapter.d.ts\" />\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nconst LOCK_ID = 'ea586330-2c93-47c8-908d-981d9d270f9d';\nconst LOCK_TIMEOUT_SECONDS = 60 * 60;\nexport class MysqlAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Kysely uses a single connection to run the migrations. Because of that, we\n        // can take a lock using `get_lock`. Locks acquired using `get_lock` get\n        // released when the connection is destroyed (session ends) or when the lock\n        // is released using `release_lock`. This way we know that the lock is either\n        // released by us after successfull or failed migrations OR it's released by\n        // MySQL if the process gets killed for some reason.\n        await sql `select get_lock(${sql.lit(LOCK_ID)}, ${sql.lit(LOCK_TIMEOUT_SECONDS)})`.execute(db);\n    }\n    async releaseMigrationLock(db, _opt) {\n        await sql `select release_lock(${sql.lit(LOCK_ID)})`.execute(db);\n    }\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;AAC9C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAM,UAAU;AAChB,MAAM,uBAAuB,KAAK;AAC3B,MAAM,qBAAqB,uMAAkB;IAChD,IAAI,2BAA2B;QAC3B,OAAO;IACX;IACA,IAAI,oBAAoB;QACpB,OAAO;IACX;IACA,MAAM,qBAAqB,EAAE,EAAE,IAAI,EAAE;QACjC,6EAA6E;QAC7E,wEAAwE;QACxE,4EAA4E;QAC5E,6EAA6E;QAC7E,4EAA4E;QAC5E,oDAAoD;QACpD,MAAM,IAAA,wKAAG,qBAAoB,wKAAG,CAAC,GAAG,CAAC,UAAa,wKAAG,CAAC,GAAG,CAAC,uBAAyB,OAAO,CAAC;IAC/F;IACA,MAAM,qBAAqB,EAAE,EAAE,IAAI,EAAE;QACjC,MAAM,IAAA,wKAAG,sBAAwB,wKAAG,CAAC,GAAG,CAAC,UAAY,OAAO,CAAC;IACjE;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 861, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js"],"sourcesContent":["/// <reference types=\"./mysql-dialect.d.ts\" />\nimport { MysqlDriver } from './mysql-driver.js';\nimport { MysqlQueryCompiler } from './mysql-query-compiler.js';\nimport { MysqlIntrospector } from './mysql-introspector.js';\nimport { MysqlAdapter } from './mysql-adapter.js';\n/**\n * MySQL dialect that uses the [mysql2](https://github.com/sidorares/node-mysql2#readme) library.\n *\n * The constructor takes an instance of {@link MysqlDialectConfig}.\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: async () => createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nexport class MysqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new MysqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new MysqlQueryCompiler();\n    }\n    createAdapter() {\n        return new MysqlAdapter();\n    }\n    createIntrospector(db) {\n        return new MysqlIntrospector(db);\n    }\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;;;AAC9C;AACA;AACA;AACA;;;;;;;;IAgCI;AADG,MAAM;IAKT,eAAe;QACX,OAAO,IAAI,8LAAW,kLAAC,IAAI,EAAC;IAChC;IACA,sBAAsB;QAClB,OAAO,IAAI,gNAAkB;IACjC;IACA,gBAAgB;QACZ,OAAO,IAAI,gMAAY;IAC3B;IACA,mBAAmB,EAAE,EAAE;QACnB,OAAO,IAAI,0MAAiB,CAAC;IACjC;IAdA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,SAAU;IACnB;AAaJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/postgres/postgres-driver.js"],"sourcesContent":["/// <reference types=\"./postgres-driver.d.ts\" />\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, freeze } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class PostgresDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        this.#pool = isFunction(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const client = await this.#pool.connect();\n        let connection = this.#connections.get(client);\n        if (!connection) {\n            connection = new PostgresConnection(client, {\n                cursor: this.#config.cursor ?? null,\n            });\n            this.#connections.set(client, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `pg` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        if (this.#config.onReserveConnection) {\n            await this.#config.onReserveConnection(connection);\n        }\n        return connection;\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel || settings.accessMode) {\n            let sql = 'start transaction';\n            if (settings.isolationLevel) {\n                sql += ` isolation level ${settings.isolationLevel}`;\n            }\n            if (settings.accessMode) {\n                sql += ` ${settings.accessMode}`;\n            }\n            await connection.executeQuery(CompiledQuery.raw(sql));\n        }\n        else {\n            await connection.executeQuery(CompiledQuery.raw('begin'));\n        }\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release', savepointName), createQueryId()));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        if (this.#pool) {\n            const pool = this.#pool;\n            this.#pool = undefined;\n            await pool.end();\n        }\n    }\n}\nclass PostgresConnection {\n    #client;\n    #options;\n    constructor(client, options) {\n        this.#client = client;\n        this.#options = options;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const { command, rowCount, rows } = await this.#client.query(compiledQuery.sql, [...compiledQuery.parameters]);\n            return {\n                numAffectedRows: command === 'INSERT' ||\n                    command === 'UPDATE' ||\n                    command === 'DELETE' ||\n                    command === 'MERGE'\n                    ? BigInt(rowCount)\n                    : undefined,\n                rows: rows ?? [],\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    async *streamQuery(compiledQuery, chunkSize) {\n        if (!this.#options.cursor) {\n            throw new Error(\"'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.\");\n        }\n        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n            throw new Error('chunkSize must be a positive integer');\n        }\n        const cursor = this.#client.query(new this.#options.cursor(compiledQuery.sql, compiledQuery.parameters.slice()));\n        try {\n            while (true) {\n                const rows = await cursor.read(chunkSize);\n                if (rows.length === 0) {\n                    break;\n                }\n                yield {\n                    rows,\n                };\n            }\n        }\n        finally {\n            await cursor.close();\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#client.release();\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1069, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js"],"sourcesContent":["/// <reference types=\"./postgres-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class PostgresIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('pg_catalog.pg_namespace')\n            .select('nspname')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.nspname }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            // column\n            .selectFrom('pg_catalog.pg_attribute as a')\n            // table\n            .innerJoin('pg_catalog.pg_class as c', 'a.attrelid', 'c.oid')\n            // table schema\n            .innerJoin('pg_catalog.pg_namespace as ns', 'c.relnamespace', 'ns.oid')\n            // column data type\n            .innerJoin('pg_catalog.pg_type as typ', 'a.atttypid', 'typ.oid')\n            // column data type schema\n            .innerJoin('pg_catalog.pg_namespace as dtns', 'typ.typnamespace', 'dtns.oid')\n            .select([\n            'a.attname as column',\n            'a.attnotnull as not_null',\n            'a.atthasdef as has_default',\n            'c.relname as table',\n            'c.relkind as table_type',\n            'ns.nspname as schema',\n            'typ.typname as type',\n            'dtns.nspname as type_schema',\n            sql `col_description(a.attrelid, a.attnum)`.as('column_description'),\n            sql `pg_get_serial_sequence(quote_ident(ns.nspname) || '.' || quote_ident(c.relname), a.attname)`.as('auto_incrementing'),\n        ])\n            .where('c.relkind', 'in', [\n            'r' /*regular table*/,\n            'v' /*view*/,\n            'p' /*partitioned table*/,\n        ])\n            .where('ns.nspname', '!~', '^pg_')\n            .where('ns.nspname', '!=', 'information_schema')\n            // Filter out internal cockroachdb schema\n            .where('ns.nspname', '!=', 'crdb_internal')\n            // No system columns\n            .where('a.attnum', '>=', 0)\n            .where('a.attisdropped', '!=', true)\n            .orderBy('ns.nspname')\n            .orderBy('c.relname')\n            .orderBy('a.attnum')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('c.relname', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('c.relname', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);\n            if (!table) {\n                table = freeze({\n                    name: it.table,\n                    isView: it.table_type === 'v',\n                    schema: it.schema,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.column,\n                dataType: it.type,\n                dataTypeSchema: it.type_schema,\n                isNullable: !it.not_null,\n                isAutoIncrementing: it.auto_incrementing !== null,\n                hasDefaultValue: it.has_default,\n                comment: it.column_description ?? undefined,\n            }));\n            return tables;\n        }, []);\n    }\n}\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;;;;;;AACtD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEI,mCAiEA;AAlEG,MAAM;IAKT,MAAM,aAAa;QACf,IAAI,aAAa,MAAM,iLAAA,IAAI,EAAC,KACvB,UAAU,CAAC,2BACX,MAAM,CAAC,WACP,OAAO,GACP,OAAO;QACZ,OAAO,WAAW,GAAG,CAAC,CAAC,KAAO,CAAC;gBAAE,MAAM,GAAG,OAAO;YAAC,CAAC;IACvD;IACA,MAAM,YAAyD;YAA/C,UAAA,iEAAU;YAAE,0BAA0B;QAAM;QACxD,IAAI,QAAQ,iLAAA,IAAI,EAAC,IACb,SAAS;SACR,UAAU,CAAC,+BACZ,QAAQ;SACP,SAAS,CAAC,4BAA4B,cAAc,QACrD,eAAe;SACd,SAAS,CAAC,iCAAiC,kBAAkB,SAC9D,mBAAmB;SAClB,SAAS,CAAC,6BAA6B,cAAc,UACtD,0BAA0B;SACzB,SAAS,CAAC,mCAAmC,oBAAoB,YACjE,MAAM,CAAC;YACR;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA,IAAA,wKAAG,qBAAyC,EAAE,CAAC;YAC/C,IAAA,wKAAG,sBAA+F,EAAE,CAAC;SACxG,EACI,KAAK,CAAC,aAAa,MAAM;YAC1B,IAAI,eAAe;YACnB,IAAI,MAAM;YACV,IAAI,mBAAmB;SAC1B,EACI,KAAK,CAAC,cAAc,MAAM,QAC1B,KAAK,CAAC,cAAc,MAAM,qBAC3B,yCAAyC;SACxC,KAAK,CAAC,cAAc,MAAM,gBAC3B,oBAAoB;SACnB,KAAK,CAAC,YAAY,MAAM,GACxB,KAAK,CAAC,kBAAkB,MAAM,MAC9B,OAAO,CAAC,cACR,OAAO,CAAC,aACR,OAAO,CAAC,YACR,OAAO;QACZ,IAAI,CAAC,QAAQ,wBAAwB,EAAE;YACnC,QAAQ,MACH,KAAK,CAAC,aAAa,MAAM,4LAAuB,EAChD,KAAK,CAAC,aAAa,MAAM,iMAA4B;QAC9D;QACA,MAAM,aAAa,MAAM,MAAM,OAAO;QACtC,OAAO,kLAAA,IAAI,EAAC,qBAAA,yBAAL,IAAI,EAAqB;IACpC;IACA,MAAM,YAAY,OAAO,EAAE;QACvB,OAAO;YACH,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC;QACjC;IACJ;IA/DA,YAAY,EAAE,CAAE;QAgEhB,yLAAA;QAjEA,wLAAA;;mBAAA,KAAA;;+LAES,KAAM;IACf;AAsFJ;AAxBI,SAAA,mBAAoB,OAAO;IACvB,OAAO,QAAQ,MAAM,CAAC,CAAC,QAAQ;QAC3B,IAAI,QAAQ,OAAO,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,KAAK,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,GAAG,MAAM;QAClF,IAAI,CAAC,OAAO;YACR,QAAQ,IAAA,6KAAM,EAAC;gBACX,MAAM,GAAG,KAAK;gBACd,QAAQ,GAAG,UAAU,KAAK;gBAC1B,QAAQ,GAAG,MAAM;gBACjB,SAAS,EAAE;YACf;YACA,OAAO,IAAI,CAAC;QAChB;YAQa;QAPb,MAAM,OAAO,CAAC,IAAI,CAAC,IAAA,6KAAM,EAAC;YACtB,MAAM,GAAG,MAAM;YACf,UAAU,GAAG,IAAI;YACjB,gBAAgB,GAAG,WAAW;YAC9B,YAAY,CAAC,GAAG,QAAQ;YACxB,oBAAoB,GAAG,iBAAiB,KAAK;YAC7C,iBAAiB,GAAG,WAAW;YAC/B,SAAS,CAAA,yBAAA,GAAG,kBAAkB,cAArB,oCAAA,yBAAyB;QACtC;QACA,OAAO;IACX,GAAG,EAAE;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1194, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js"],"sourcesContent":["/// <reference types=\"./postgres-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class PostgresQueryCompiler extends DefaultQueryCompiler {\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n}\n"],"names":[],"mappings":"AAAA,wDAAwD;;;;;AACxD;;AACA,MAAM,gBAAgB;AACf,MAAM,8BAA8B,qNAAoB;IAC3D,mBAAmB,UAAU,EAAE;QAC3B,OAAO,WAAW,OAAO,CAAC,eAAe;IAC7C;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1211, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js"],"sourcesContent":["/// <reference types=\"./postgres-adapter.d.ts\" />\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\n// Random id for our transaction lock.\nconst LOCK_ID = BigInt('3853314791062309107');\nexport class PostgresAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Acquire a transaction level advisory lock.\n        await sql `select pg_advisory_xact_lock(${sql.lit(LOCK_ID)})`.execute(db);\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // Nothing to do here. `pg_advisory_xact_lock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;;AACjD;AACA;;;;;;;;;;;;;;AACA,sCAAsC;AACtC,MAAM,UAAU,OAAO;AAChB,MAAM,wBAAwB,uMAAkB;IACnD,IAAI,2BAA2B;QAC3B,OAAO;IACX;IACA,IAAI,oBAAoB;QACpB,OAAO;IACX;IACA,MAAM,qBAAqB,EAAE,EAAE,IAAI,EAAE;QACjC,6CAA6C;QAC7C,MAAM,IAAA,wKAAG,qBAAiC,wKAAG,CAAC,GAAG,CAAC,UAAY,OAAO,CAAC;IAC1E;IACA,MAAM,qBAAqB,GAAG,EAAE,IAAI,EAAE;IAClC,+EAA+E;IAC/E,4EAA4E;IAC5E,8EAA8E;IAClF;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1255, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js"],"sourcesContent":["/// <reference types=\"./postgres-dialect.d.ts\" />\nimport { PostgresDriver } from './postgres-driver.js';\nimport { PostgresIntrospector } from './postgres-introspector.js';\nimport { PostgresQueryCompiler } from './postgres-query-compiler.js';\nimport { PostgresAdapter } from './postgres-adapter.js';\n/**\n * PostgreSQL dialect that uses the [pg](https://node-postgres.com/) library.\n *\n * The constructor takes an instance of {@link PostgresDialectConfig}.\n *\n * ```ts\n * import { Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import { Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: async () => new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nexport class PostgresDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new PostgresDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new PostgresQueryCompiler();\n    }\n    createAdapter() {\n        return new PostgresAdapter();\n    }\n    createIntrospector(db) {\n        return new PostgresIntrospector(db);\n    }\n}\n"],"names":[],"mappings":"AAAA,iDAAiD;;;;;;;;AACjD;AACA;AACA;AACA;;;;;;;;IAgCI;AADG,MAAM;IAKT,eAAe;QACX,OAAO,IAAI,uMAAc,kLAAC,IAAI,EAAC;IACnC;IACA,sBAAsB;QAClB,OAAO,IAAI,yNAAqB;IACpC;IACA,gBAAgB;QACZ,OAAO,IAAI,yMAAe;IAC9B;IACA,mBAAmB,EAAE,EAAE;QACnB,OAAO,IAAI,mNAAoB,CAAC;IACpC;IAdA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,SAAU;IACnB;AAaJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mssql/mssql-adapter.js"],"sourcesContent":["/// <reference types=\"./mssql-adapter.d.ts\" />\nimport { DEFAULT_MIGRATION_TABLE } from '../../migration/migrator.js';\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class MssqlAdapter extends DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return false;\n    }\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsOutput() {\n        return true;\n    }\n    async acquireMigrationLock(db) {\n        // Acquire a transaction-level exclusive lock on the migrations table.\n        // https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-getapplock-transact-sql?view=sql-server-ver16\n        await sql `exec sp_getapplock @DbPrincipal = ${sql.lit('dbo')}, @Resource = ${sql.lit(DEFAULT_MIGRATION_TABLE)}, @LockMode = ${sql.lit('Exclusive')}`.execute(db);\n    }\n    async releaseMigrationLock() {\n        // Nothing to do here. `sp_getapplock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;AACO,MAAM,qBAAqB,uMAAkB;IAChD,IAAI,4BAA4B;QAC5B,OAAO;IACX;IACA,IAAI,2BAA2B;QAC3B,OAAO;IACX;IACA,IAAI,iBAAiB;QACjB,OAAO;IACX;IACA,MAAM,qBAAqB,EAAE,EAAE;QAC3B,sEAAsE;QACtE,uIAAuI;QACvI,MAAM,IAAA,wKAAG,qBAAsC,wKAAG,CAAC,GAAG,CAAC,QAAuB,wKAAG,CAAC,GAAG,CAAC,4LAAuB,GAAkB,wKAAG,CAAC,GAAG,CAAC,cAAe,OAAO,CAAC;IAClK;IACA,MAAM,uBAAuB;IACzB,uEAAuE;IACvE,4EAA4E;IAC5E,8EAA8E;IAClF;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1350, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mssql/mssql-driver.js"],"sourcesContent":["/// <reference types=\"./mssql-driver.d.ts\" />\nimport { freeze, isBigInt, isBoolean, isBuffer, isDate, isNull, isNumber, isString, isUndefined, } from '../../util/object-utils.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nimport { randomString } from '../../util/random-string.js';\nimport { Deferred } from '../../util/deferred.js';\nconst PRIVATE_RESET_METHOD = Symbol();\nconst PRIVATE_DESTROY_METHOD = Symbol();\nconst PRIVATE_VALIDATE_METHOD = Symbol();\nexport class MssqlDriver {\n    #config;\n    #pool;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n        const { tarn, tedious, validateConnections } = this.#config;\n        const { validateConnections: deprecatedValidateConnections, ...poolOptions } = tarn.options;\n        this.#pool = new tarn.Pool({\n            ...poolOptions,\n            create: async () => {\n                const connection = await tedious.connectionFactory();\n                return await new MssqlConnection(connection, tedious).connect();\n            },\n            destroy: async (connection) => {\n                await connection[PRIVATE_DESTROY_METHOD]();\n            },\n            // @ts-ignore `tarn` accepts a function that returns a promise here, but\n            // the types are not aligned and it type errors.\n            validate: validateConnections === false ||\n                deprecatedValidateConnections === false\n                ? undefined\n                : (connection) => connection[PRIVATE_VALIDATE_METHOD](),\n        });\n    }\n    async init() {\n        // noop\n    }\n    async acquireConnection() {\n        return await this.#pool.acquire().promise;\n    }\n    async beginTransaction(connection, settings) {\n        await connection.beginTransaction(settings);\n    }\n    async commitTransaction(connection) {\n        await connection.commitTransaction();\n    }\n    async rollbackTransaction(connection) {\n        await connection.rollbackTransaction();\n    }\n    async savepoint(connection, savepointName) {\n        await connection.savepoint(savepointName);\n    }\n    async rollbackToSavepoint(connection, savepointName) {\n        await connection.rollbackTransaction(savepointName);\n    }\n    async releaseConnection(connection) {\n        if (this.#config.resetConnectionsOnRelease ||\n            this.#config.tedious.resetConnectionOnRelease) {\n            await connection[PRIVATE_RESET_METHOD]();\n        }\n        this.#pool.release(connection);\n    }\n    async destroy() {\n        await this.#pool.destroy();\n    }\n}\nclass MssqlConnection {\n    #connection;\n    #hasSocketError;\n    #tedious;\n    constructor(connection, tedious) {\n        this.#connection = connection;\n        this.#hasSocketError = false;\n        this.#tedious = tedious;\n    }\n    async beginTransaction(settings) {\n        const { isolationLevel } = settings;\n        await new Promise((resolve, reject) => this.#connection.beginTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, isolationLevel ? randomString(8) : undefined, isolationLevel\n            ? this.#getTediousIsolationLevel(isolationLevel)\n            : undefined));\n    }\n    async commitTransaction() {\n        await new Promise((resolve, reject) => this.#connection.commitTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }));\n    }\n    async connect() {\n        const { promise: waitForConnected, reject, resolve } = new Deferred();\n        this.#connection.connect((error) => {\n            if (error) {\n                return reject(error);\n            }\n            resolve();\n        });\n        this.#connection.on('error', (error) => {\n            if (error instanceof Error &&\n                'code' in error &&\n                error.code === 'ESOCKET') {\n                this.#hasSocketError = true;\n            }\n            console.error(error);\n            reject(error);\n        });\n        function endListener() {\n            reject(new Error('The connection ended without ever completing the connection'));\n        }\n        this.#connection.once('end', endListener);\n        await waitForConnected;\n        this.#connection.off('end', endListener);\n        return this;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const deferred = new Deferred();\n            const request = new MssqlRequest({\n                compiledQuery,\n                tedious: this.#tedious,\n                onDone: deferred,\n            });\n            this.#connection.execSql(request.request);\n            const { rowCount, rows } = await deferred.promise;\n            return {\n                numAffectedRows: rowCount !== undefined ? BigInt(rowCount) : undefined,\n                rows,\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    async rollbackTransaction(savepointName) {\n        await new Promise((resolve, reject) => this.#connection.rollbackTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, savepointName));\n    }\n    async savepoint(savepointName) {\n        await new Promise((resolve, reject) => this.#connection.saveTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, savepointName));\n    }\n    async *streamQuery(compiledQuery, chunkSize) {\n        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n            throw new Error('chunkSize must be a positive integer');\n        }\n        const request = new MssqlRequest({\n            compiledQuery,\n            streamChunkSize: chunkSize,\n            tedious: this.#tedious,\n        });\n        this.#connection.execSql(request.request);\n        try {\n            while (true) {\n                const rows = await request.readChunk();\n                if (rows.length === 0) {\n                    break;\n                }\n                yield { rows };\n                if (rows.length < chunkSize) {\n                    break;\n                }\n            }\n        }\n        finally {\n            await this.#cancelRequest(request);\n        }\n    }\n    #getTediousIsolationLevel(isolationLevel) {\n        const { ISOLATION_LEVEL } = this.#tedious;\n        const mapper = {\n            'read committed': ISOLATION_LEVEL.READ_COMMITTED,\n            'read uncommitted': ISOLATION_LEVEL.READ_UNCOMMITTED,\n            'repeatable read': ISOLATION_LEVEL.REPEATABLE_READ,\n            serializable: ISOLATION_LEVEL.SERIALIZABLE,\n            snapshot: ISOLATION_LEVEL.SNAPSHOT,\n        };\n        const tediousIsolationLevel = mapper[isolationLevel];\n        if (tediousIsolationLevel === undefined) {\n            throw new Error(`Unknown isolation level: ${isolationLevel}`);\n        }\n        return tediousIsolationLevel;\n    }\n    #cancelRequest(request) {\n        return new Promise((resolve) => {\n            request.request.once('requestCompleted', resolve);\n            const wasCanceled = this.#connection.cancel();\n            if (!wasCanceled) {\n                request.request.off('requestCompleted', resolve);\n                resolve();\n            }\n        });\n    }\n    [PRIVATE_DESTROY_METHOD]() {\n        if ('closed' in this.#connection && this.#connection.closed) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve) => {\n            this.#connection.once('end', resolve);\n            this.#connection.close();\n        });\n    }\n    async [PRIVATE_RESET_METHOD]() {\n        await new Promise((resolve, reject) => {\n            this.#connection.reset((error) => {\n                if (error) {\n                    return reject(error);\n                }\n                resolve();\n            });\n        });\n    }\n    async [PRIVATE_VALIDATE_METHOD]() {\n        if (this.#hasSocketError || this.#isConnectionClosed()) {\n            return false;\n        }\n        try {\n            const deferred = new Deferred();\n            const request = new MssqlRequest({\n                compiledQuery: CompiledQuery.raw('select 1'),\n                onDone: deferred,\n                tedious: this.#tedious,\n            });\n            this.#connection.execSql(request.request);\n            await deferred.promise;\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    #isConnectionClosed() {\n        return 'closed' in this.#connection && Boolean(this.#connection.closed);\n    }\n}\nclass MssqlRequest {\n    #request;\n    #rows;\n    #streamChunkSize;\n    #subscribers;\n    #tedious;\n    #rowCount;\n    constructor(props) {\n        const { compiledQuery, onDone, streamChunkSize, tedious } = props;\n        this.#rows = [];\n        this.#streamChunkSize = streamChunkSize;\n        this.#subscribers = {};\n        this.#tedious = tedious;\n        if (onDone) {\n            const subscriptionKey = 'onDone';\n            this.#subscribers[subscriptionKey] = (event, error) => {\n                if (event === 'chunkReady') {\n                    return;\n                }\n                delete this.#subscribers[subscriptionKey];\n                if (event === 'error') {\n                    return onDone.reject(error);\n                }\n                onDone.resolve({\n                    rowCount: this.#rowCount,\n                    rows: this.#rows,\n                });\n            };\n        }\n        this.#request = new this.#tedious.Request(compiledQuery.sql, (err, rowCount) => {\n            if (err) {\n                return Object.values(this.#subscribers).forEach((subscriber) => subscriber('error', err instanceof AggregateError ? err.errors : err));\n            }\n            this.#rowCount = rowCount;\n        });\n        this.#addParametersToRequest(compiledQuery.parameters);\n        this.#attachListeners();\n    }\n    get request() {\n        return this.#request;\n    }\n    readChunk() {\n        const subscriptionKey = this.readChunk.name;\n        return new Promise((resolve, reject) => {\n            this.#subscribers[subscriptionKey] = (event, error) => {\n                delete this.#subscribers[subscriptionKey];\n                if (event === 'error') {\n                    return reject(error);\n                }\n                resolve(this.#rows.splice(0, this.#streamChunkSize));\n            };\n            this.#request.resume();\n        });\n    }\n    #addParametersToRequest(parameters) {\n        for (let i = 0; i < parameters.length; i++) {\n            const parameter = parameters[i];\n            this.#request.addParameter(String(i + 1), this.#getTediousDataType(parameter), parameter);\n        }\n    }\n    #attachListeners() {\n        const pauseAndEmitChunkReady = this.#streamChunkSize\n            ? () => {\n                if (this.#streamChunkSize <= this.#rows.length) {\n                    this.#request.pause();\n                    Object.values(this.#subscribers).forEach((subscriber) => subscriber('chunkReady'));\n                }\n            }\n            : () => { };\n        const rowListener = (columns) => {\n            const row = {};\n            for (const column of columns) {\n                row[column.metadata.colName] = column.value;\n            }\n            this.#rows.push(row);\n            pauseAndEmitChunkReady();\n        };\n        this.#request.on('row', rowListener);\n        this.#request.once('requestCompleted', () => {\n            Object.values(this.#subscribers).forEach((subscriber) => subscriber('completed'));\n            this.#request.off('row', rowListener);\n        });\n    }\n    #getTediousDataType(value) {\n        if (isNull(value) || isUndefined(value) || isString(value)) {\n            return this.#tedious.TYPES.NVarChar;\n        }\n        if (isBigInt(value) || (isNumber(value) && value % 1 === 0)) {\n            if (value < -2147483648 || value > 2147483647) {\n                return this.#tedious.TYPES.BigInt;\n            }\n            else {\n                return this.#tedious.TYPES.Int;\n            }\n        }\n        if (isNumber(value)) {\n            return this.#tedious.TYPES.Float;\n        }\n        if (isBoolean(value)) {\n            return this.#tedious.TYPES.Bit;\n        }\n        if (isDate(value)) {\n            return this.#tedious.TYPES.DateTime;\n        }\n        if (isBuffer(value)) {\n            return this.#tedious.TYPES.VarBinary;\n        }\n        return this.#tedious.TYPES.NVarChar;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1754, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mssql/mssql-introspector.js"],"sourcesContent":["/// <reference types=\"./mssql-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nexport class MssqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        return await this.#db.selectFrom('sys.schemas').select('name').execute();\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        const rawColumns = await this.#db\n            .selectFrom('sys.tables as tables')\n            .leftJoin('sys.schemas as table_schemas', 'table_schemas.schema_id', 'tables.schema_id')\n            .innerJoin('sys.columns as columns', 'columns.object_id', 'tables.object_id')\n            .innerJoin('sys.types as types', 'types.user_type_id', 'columns.user_type_id')\n            .leftJoin('sys.schemas as type_schemas', 'type_schemas.schema_id', 'types.schema_id')\n            .leftJoin('sys.extended_properties as comments', (join) => join\n            .onRef('comments.major_id', '=', 'tables.object_id')\n            .onRef('comments.minor_id', '=', 'columns.column_id')\n            .on('comments.name', '=', 'MS_Description'))\n            .$if(!options.withInternalKyselyTables, (qb) => qb\n            .where('tables.name', '!=', DEFAULT_MIGRATION_TABLE)\n            .where('tables.name', '!=', DEFAULT_MIGRATION_LOCK_TABLE))\n            .select([\n            'tables.name as table_name',\n            (eb) => eb\n                .ref('tables.type')\n                .$castTo()\n                .as('table_type'),\n            'table_schemas.name as table_schema_name',\n            'columns.default_object_id as column_default_object_id',\n            'columns.generated_always_type_desc as column_generated_always_type',\n            'columns.is_computed as column_is_computed',\n            'columns.is_identity as column_is_identity',\n            'columns.is_nullable as column_is_nullable',\n            'columns.is_rowguidcol as column_is_rowguidcol',\n            'columns.name as column_name',\n            'types.is_nullable as type_is_nullable',\n            'types.name as type_name',\n            'type_schemas.name as type_schema_name',\n            'comments.value as column_comment',\n        ])\n            .unionAll(this.#db\n            .selectFrom('sys.views as views')\n            .leftJoin('sys.schemas as view_schemas', 'view_schemas.schema_id', 'views.schema_id')\n            .innerJoin('sys.columns as columns', 'columns.object_id', 'views.object_id')\n            .innerJoin('sys.types as types', 'types.user_type_id', 'columns.user_type_id')\n            .leftJoin('sys.schemas as type_schemas', 'type_schemas.schema_id', 'types.schema_id')\n            .leftJoin('sys.extended_properties as comments', (join) => join\n            .onRef('comments.major_id', '=', 'views.object_id')\n            .onRef('comments.minor_id', '=', 'columns.column_id')\n            .on('comments.name', '=', 'MS_Description'))\n            .select([\n            'views.name as table_name',\n            'views.type as table_type',\n            'view_schemas.name as table_schema_name',\n            'columns.default_object_id as column_default_object_id',\n            'columns.generated_always_type_desc as column_generated_always_type',\n            'columns.is_computed as column_is_computed',\n            'columns.is_identity as column_is_identity',\n            'columns.is_nullable as column_is_nullable',\n            'columns.is_rowguidcol as column_is_rowguidcol',\n            'columns.name as column_name',\n            'types.is_nullable as type_is_nullable',\n            'types.name as type_name',\n            'type_schemas.name as type_schema_name',\n            'comments.value as column_comment',\n        ]))\n            .orderBy('table_schema_name')\n            .orderBy('table_name')\n            .orderBy('column_name')\n            .execute();\n        const tableDictionary = {};\n        for (const rawColumn of rawColumns) {\n            const key = `${rawColumn.table_schema_name}.${rawColumn.table_name}`;\n            const table = (tableDictionary[key] =\n                tableDictionary[key] ||\n                    freeze({\n                        columns: [],\n                        isView: rawColumn.table_type === 'V ',\n                        name: rawColumn.table_name,\n                        schema: rawColumn.table_schema_name ?? undefined,\n                    }));\n            table.columns.push(freeze({\n                dataType: rawColumn.type_name,\n                dataTypeSchema: rawColumn.type_schema_name ?? undefined,\n                hasDefaultValue: rawColumn.column_default_object_id > 0 ||\n                    rawColumn.column_generated_always_type !== 'NOT_APPLICABLE' ||\n                    rawColumn.column_is_identity ||\n                    rawColumn.column_is_computed ||\n                    rawColumn.column_is_rowguidcol,\n                isAutoIncrementing: rawColumn.column_is_identity,\n                isNullable: rawColumn.column_is_nullable && rawColumn.type_is_nullable,\n                name: rawColumn.column_name,\n                comment: rawColumn.column_comment ?? undefined,\n            }));\n        }\n        return Object.values(tableDictionary);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1849, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mssql/mssql-query-compiler.js"],"sourcesContent":["/// <reference types=\"./mssql-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst COLLATION_CHAR_REGEX = /^[a-z0-9_]$/i;\nexport class MssqlQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return `@${this.numParameters}`;\n    }\n    visitOffset(node) {\n        super.visitOffset(node);\n        this.append(' rows');\n    }\n    // mssql allows multi-column alterations in a single statement,\n    // but you can only use the command keyword/s once.\n    // it also doesn't support multiple kinds of commands in the same\n    // alter table statement, but we compile that anyway for the sake\n    // of WYSIWYG.\n    compileColumnAlterations(columnAlterations) {\n        const nodesByKind = {};\n        for (const columnAlteration of columnAlterations) {\n            if (!nodesByKind[columnAlteration.kind]) {\n                nodesByKind[columnAlteration.kind] = [];\n            }\n            nodesByKind[columnAlteration.kind].push(columnAlteration);\n        }\n        let first = true;\n        if (nodesByKind.AddColumnNode) {\n            this.append('add ');\n            this.compileList(nodesByKind.AddColumnNode);\n            first = false;\n        }\n        // multiple of these are not really supported by mssql,\n        // but for the sake of WYSIWYG.\n        if (nodesByKind.AlterColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.AlterColumnNode);\n        }\n        if (nodesByKind.DropColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.append('drop column ');\n            this.compileList(nodesByKind.DropColumnNode);\n        }\n        // not really supported by mssql, but for the sake of WYSIWYG.\n        if (nodesByKind.ModifyColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.ModifyColumnNode);\n        }\n        // not really supported by mssql, but for the sake of WYSIWYG.\n        if (nodesByKind.RenameColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.RenameColumnNode);\n        }\n    }\n    visitAddColumn(node) {\n        this.visitNode(node.column);\n    }\n    visitDropColumn(node) {\n        this.visitNode(node.column);\n    }\n    visitMergeQuery(node) {\n        super.visitMergeQuery(node);\n        this.append(';');\n    }\n    visitCollate(node) {\n        this.append('collate ');\n        const { name } = node.collation;\n        for (const char of name) {\n            if (!COLLATION_CHAR_REGEX.test(char)) {\n                throw new Error(`Invalid collation: ${name}`);\n            }\n        }\n        this.append(name);\n    }\n    announcesNewColumnDataType() {\n        return false;\n    }\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;;AACA,MAAM,uBAAuB;AACtB,MAAM,2BAA2B,qNAAoB;IACxD,iCAAiC;QAC7B,OAAO,AAAC,IAAsB,OAAnB,IAAI,CAAC,aAAa;IACjC;IACA,YAAY,IAAI,EAAE;QACd,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,MAAM,CAAC;IAChB;IACA,+DAA+D;IAC/D,mDAAmD;IACnD,iEAAiE;IACjE,iEAAiE;IACjE,cAAc;IACd,yBAAyB,iBAAiB,EAAE;QACxC,MAAM,cAAc,CAAC;QACrB,KAAK,MAAM,oBAAoB,kBAAmB;YAC9C,IAAI,CAAC,WAAW,CAAC,iBAAiB,IAAI,CAAC,EAAE;gBACrC,WAAW,CAAC,iBAAiB,IAAI,CAAC,GAAG,EAAE;YAC3C;YACA,WAAW,CAAC,iBAAiB,IAAI,CAAC,CAAC,IAAI,CAAC;QAC5C;QACA,IAAI,QAAQ;QACZ,IAAI,YAAY,aAAa,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,WAAW,CAAC,YAAY,aAAa;YAC1C,QAAQ;QACZ;QACA,uDAAuD;QACvD,+BAA+B;QAC/B,IAAI,YAAY,eAAe,EAAE;YAC7B,IAAI,CAAC,OACD,IAAI,CAAC,MAAM,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,YAAY,eAAe;QAChD;QACA,IAAI,YAAY,cAAc,EAAE;YAC5B,IAAI,CAAC,OACD,IAAI,CAAC,MAAM,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,WAAW,CAAC,YAAY,cAAc;QAC/C;QACA,8DAA8D;QAC9D,IAAI,YAAY,gBAAgB,EAAE;YAC9B,IAAI,CAAC,OACD,IAAI,CAAC,MAAM,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,YAAY,gBAAgB;QACjD;QACA,8DAA8D;QAC9D,IAAI,YAAY,gBAAgB,EAAE;YAC9B,IAAI,CAAC,OACD,IAAI,CAAC,MAAM,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,YAAY,gBAAgB;QACjD;IACJ;IACA,eAAe,IAAI,EAAE;QACjB,IAAI,CAAC,SAAS,CAAC,KAAK,MAAM;IAC9B;IACA,gBAAgB,IAAI,EAAE;QAClB,IAAI,CAAC,SAAS,CAAC,KAAK,MAAM;IAC9B;IACA,gBAAgB,IAAI,EAAE;QAClB,KAAK,CAAC,gBAAgB;QACtB,IAAI,CAAC,MAAM,CAAC;IAChB;IACA,aAAa,IAAI,EAAE;QACf,IAAI,CAAC,MAAM,CAAC;QACZ,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,SAAS;QAC/B,KAAK,MAAM,QAAQ,KAAM;YACrB,IAAI,CAAC,qBAAqB,IAAI,CAAC,OAAO;gBAClC,MAAM,IAAI,MAAM,AAAC,sBAA0B,OAAL;YAC1C;QACJ;QACA,IAAI,CAAC,MAAM,CAAC;IAChB;IACA,6BAA6B;QACzB,OAAO;IACX;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1934, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/nakafa.com-main/node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js"],"sourcesContent":["/// <reference types=\"./mssql-dialect.d.ts\" />\nimport { MssqlAdapter } from './mssql-adapter.js';\nimport { MssqlDriver } from './mssql-driver.js';\nimport { MssqlIntrospector } from './mssql-introspector.js';\nimport { MssqlQueryCompiler } from './mssql-query-compiler.js';\n/**\n * MS SQL Server dialect that uses the [tedious](https://tediousjs.github.io/tedious)\n * library.\n *\n * The constructor takes an instance of {@link MssqlDialectConfig}.\n *\n * ```ts\n * import * as Tedious from 'tedious'\n * import * as Tarn from 'tarn'\n *\n * const dialect = new MssqlDialect({\n *   tarn: {\n *     ...Tarn,\n *     options: {\n *       min: 0,\n *       max: 10,\n *     },\n *   },\n *   tedious: {\n *     ...Tedious,\n *     connectionFactory: () => new Tedious.Connection({\n *       authentication: {\n *         options: {\n *           password: 'password',\n *           userName: 'username',\n *         },\n *         type: 'default',\n *       },\n *       options: {\n *         database: 'some_db',\n *         port: 1433,\n *         trustServerCertificate: true,\n *       },\n *       server: 'localhost',\n *     }),\n *   },\n * })\n * ```\n */\nexport class MssqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new MssqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new MssqlQueryCompiler();\n    }\n    createAdapter() {\n        return new MssqlAdapter();\n    }\n    createIntrospector(db) {\n        return new MssqlIntrospector(db);\n    }\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;;;AAC9C;AACA;AACA;AACA;;;;;;;;IAyCI;AADG,MAAM;IAKT,eAAe;QACX,OAAO,IAAI,8LAAW,kLAAC,IAAI,EAAC;IAChC;IACA,sBAAsB;QAClB,OAAO,IAAI,gNAAkB;IACjC;IACA,gBAAgB;QACZ,OAAO,IAAI,gMAAY;IAC3B;IACA,mBAAmB,EAAE,EAAE;QACnB,OAAO,IAAI,0MAAiB,CAAC;IACjC;IAdA,YAAY,MAAM,CAAE;QADpB,wLAAA;;mBAAA,KAAA;;+LAES,SAAU;IACnB;AAaJ","ignoreList":[0],"debugId":null}}]
}