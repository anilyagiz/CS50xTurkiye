// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/[locale]/[...rest]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/[...rest]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/[...rest]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/articles/[category]/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/articles/[category]/[slug]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/articles/[category]/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/articles/[category]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/articles/[category]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/articles/[category]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/articles/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/articles">> = Specific
  const handler = {} as typeof import("../../app/[locale]/articles/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/auth">> = Specific
  const handler = {} as typeof import("../../app/[locale]/auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/chat/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/chat">> = Specific
  const handler = {} as typeof import("../../app/[locale]/chat/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/contributor/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/contributor">> = Specific
  const handler = {} as typeof import("../../app/[locale]/contributor/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/quran/[surah]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/quran/[surah]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/quran/[surah]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/quran/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/quran">> = Specific
  const handler = {} as typeof import("../../app/[locale]/quran/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/search/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/search">> = Specific
  const handler = {} as typeof import("../../app/[locale]/search/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/settings">> = Specific
  const handler = {} as typeof import("../../app/[locale]/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/subject/[category]/[grade]/[material]/[...slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/subject/[category]/[grade]/[material]/[...slug]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/subject/[category]/[grade]/[material]/[...slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/subject/[category]/[grade]/[material]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/subject/[category]/[grade]/[material]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/subject/[category]/[grade]/[material]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/subject/[category]/[grade]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/subject/[category]/[grade]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/subject/[category]/[grade]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/subject/[category]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[locale]/subject/[category]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/subject/[category]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/[locale]/og/[...slug]/route.tsx
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/[locale]/og/[...slug]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/og/[...slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/[...all]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...all]">> = Specific
  const handler = {} as typeof import("../../app/api/auth/[...all]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/chat/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/chat">> = Specific
  const handler = {} as typeof import("../../app/api/chat/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/llms.mdx/[...slug]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/llms.mdx/[...slug]">> = Specific
  const handler = {} as typeof import("../../app/llms.mdx/[...slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/llms.txt/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/llms.txt">> = Specific
  const handler = {} as typeof import("../../app/llms.txt/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/rss.xml/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/rss.xml">> = Specific
  const handler = {} as typeof import("../../app/rss.xml/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/[locale]/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/[locale]">> = Specific
  const handler = {} as typeof import("../../app/[locale]/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
