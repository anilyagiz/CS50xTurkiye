// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/[locale]" | "/[locale]/[...rest]" | "/[locale]/articles" | "/[locale]/articles/[category]" | "/[locale]/articles/[category]/[slug]" | "/[locale]/auth" | "/[locale]/chat" | "/[locale]/contributor" | "/[locale]/quran" | "/[locale]/quran/[surah]" | "/[locale]/search" | "/[locale]/settings" | "/[locale]/subject/[category]" | "/[locale]/subject/[category]/[grade]" | "/[locale]/subject/[category]/[grade]/[material]" | "/[locale]/subject/[category]/[grade]/[material]/[...slug]"
type AppRouteHandlerRoutes = "/[locale]/og/[...slug]" | "/api/auth/[...all]" | "/api/chat" | "/llms.mdx/[...slug]" | "/llms.txt" | "/rss.xml"
type PageRoutes = never
type LayoutRoutes = "/" | "/[locale]"
type RedirectRoutes = "/community" | "/discord" | "/subject/junior-high-school/[[...path]]" | "/subject/senior-high-school/[[...path]]"
type RewriteRoutes = "/[[...path]].md" | "/[[...path]].mdx" | "/[[...path]]/llms.txt"
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/[[...path]].md": {}
  "/[[...path]].mdx": {}
  "/[[...path]]/llms.txt": { "path"?: string[]; }
  "/[locale]": { "locale": string; }
  "/[locale]/[...rest]": { "locale": string; "rest": string[]; }
  "/[locale]/articles": { "locale": string; }
  "/[locale]/articles/[category]": { "locale": string; "category": string; }
  "/[locale]/articles/[category]/[slug]": { "locale": string; "category": string; "slug": string; }
  "/[locale]/auth": { "locale": string; }
  "/[locale]/chat": { "locale": string; }
  "/[locale]/contributor": { "locale": string; }
  "/[locale]/og/[...slug]": { "locale": string; "slug": string[]; }
  "/[locale]/quran": { "locale": string; }
  "/[locale]/quran/[surah]": { "locale": string; "surah": string; }
  "/[locale]/search": { "locale": string; }
  "/[locale]/settings": { "locale": string; }
  "/[locale]/subject/[category]": { "locale": string; "category": string; }
  "/[locale]/subject/[category]/[grade]": { "locale": string; "category": string; "grade": string; }
  "/[locale]/subject/[category]/[grade]/[material]": { "locale": string; "category": string; "grade": string; "material": string; }
  "/[locale]/subject/[category]/[grade]/[material]/[...slug]": { "locale": string; "category": string; "grade": string; "material": string; "slug": string[]; }
  "/api/auth/[...all]": { "all": string[]; }
  "/api/chat": {}
  "/community": {}
  "/discord": {}
  "/llms.mdx/[...slug]": { "slug": string[]; }
  "/llms.txt": {}
  "/rss.xml": {}
  "/subject/junior-high-school/[[...path]]": { "path"?: string[]; }
  "/subject/senior-high-school/[[...path]]": { "path"?: string[]; }
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/[locale]": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
